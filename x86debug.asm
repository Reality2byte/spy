	TITLE	x86debug.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	_offDataLast
PUBLIC	_cbpdGlobal
PUBLIC	_abpdGlobal
PUBLIC	_pbpdTempDisable
PUBLIC	_apszOptions
PUBLIC	_apszIDTOptions
PUBLIC	_achScale
PUBLIC	_apszRM
PUBLIC	_desV86
PUBLIC	_aoffSel
PUBLIC	_apszMnemonic
PUBLIC	_ardRegs
PUBLIC	_aidBase
PUBLIC	_aid0F
PUBLIC	_aaidGroup
PUBLIC	_abTypeSize
PUBLIC	_apszIDTDesc
PUBLIC	_flTrace
PUBLIC	_msDebugStart
PUBLIC	_iIDTEntry
PUBLIC	_iDebugEntry
PUBLIC	_lInsCount
PUBLIC	_iSizeLast
PUBLIC	_selCodeLast
PUBLIC	_offCodeLast
PUBLIC	_selDataLast
_DATA	SEGMENT
_szModule$S696 DB 'x86debug.c', 00H
	ORG $+1
_iIDTEntry DD	00H
_iDebugEntry DD	00H
_flTrace DD	00H
_msDebugStart DD 00H
_lInsCount DD	00H
_iSizeLast DD	01H
_selCodeLast DD	00H
_offCodeLast DD	00H
_selDataLast DD	00H
_offDataLast DD	00H
_cbpdGlobal DD	00H
_abpdGlobal DD	00H
	DD	00H
	DD	00H
	ORG $+8
	ORG $+380
_pbpdTempDisable DD 00H
$SG709	DB	'com', 00H
$SG710	DB	'idt', 00H
$SG711	DB	'vga', 00H
_apszOptions DD	FLAT:$SG709
	DD	FLAT:$SG710
	DD	FLAT:$SG711
$SG713	DB	'on', 00H
	ORG $+1
$SG714	DB	'off', 00H
	ORG $+4
_apszIDTOptions DD FLAT:$SG713
	DD	FLAT:$SG714
_desV86	DW	0ffffH
	DW	00H
	DB	00H
	DB	0f0H
	ORG $+2
_aoffSel DD	068H
	DD	068H
	DD	030H
	DD	07cH
	DD	02cH
	DD	078H
	DD	028H
	DD	080H
	DD	024H
	DD	084H
	DD	020H
	DD	074H
$SG719	DB	'???', 00H
$SG720	DB	'aaa', 00H
$SG721	DB	'aad', 00H
$SG722	DB	'aam', 00H
$SG723	DB	'aas', 00H
$SG724	DB	'adc', 00H
$SG725	DB	'add', 00H
$SG726	DB	'and', 00H
$SG727	DB	'arpl', 00H
	ORG $+3
$SG728	DB	'as:', 00H
$SG729	DB	'bound', 00H
	ORG $+2
$SG730	DB	'bsf', 00H
$SG731	DB	'bsr', 00H
$SG732	DB	'bt', 00H
	ORG $+1
$SG733	DB	'btc', 00H
$SG734	DB	'btr', 00H
$SG735	DB	'bts', 00H
$SG736	DB	'call', 00H
	ORG $+3
$SG737	DB	'cbw', 00H
$SG738	DB	'clc', 00H
$SG739	DB	'cld', 00H
$SG740	DB	'cli', 00H
$SG741	DB	'clts', 00H
	ORG $+3
$SG742	DB	'cmc', 00H
$SG743	DB	'cmp', 00H
$SG744	DB	'cmpsb', 00H
	ORG $+2
$SG745	DB	'cmps', 00H
	ORG $+3
$SG746	DB	'cs:', 00H
$SG747	DB	'cwd', 00H
$SG748	DB	'daa', 00H
$SG749	DB	'das', 00H
$SG750	DB	'dec', 00H
$SG751	DB	'div', 00H
$SG752	DB	'ds:', 00H
$SG753	DB	'enter', 00H
	ORG $+2
$SG754	DB	'es:', 00H
$SG755	DB	'esc', 00H
$SG756	DB	'fadd', 00H
	ORG $+3
$SG757	DB	'fbld', 00H
	ORG $+3
$SG758	DB	'fbstp', 00H
	ORG $+2
$SG759	DB	'fcom', 00H
	ORG $+3
$SG760	DB	'fcomp', 00H
	ORG $+2
$SG761	DB	'fdiv', 00H
	ORG $+3
$SG762	DB	'fdivr', 00H
	ORG $+2
$SG763	DB	'fiadd', 00H
	ORG $+2
$SG764	DB	'ficom', 00H
	ORG $+2
$SG765	DB	'ficomp', 00H
	ORG $+1
$SG766	DB	'fidiv', 00H
	ORG $+2
$SG767	DB	'fidivr', 00H
	ORG $+1
$SG768	DB	'fild', 00H
	ORG $+3
$SG769	DB	'fimul', 00H
	ORG $+2
$SG770	DB	'fist', 00H
	ORG $+3
$SG771	DB	'fistp', 00H
	ORG $+2
$SG772	DB	'fisub', 00H
	ORG $+2
$SG773	DB	'fisubr', 00H
	ORG $+1
$SG774	DB	'fld', 00H
$SG775	DB	'fldcw', 00H
	ORG $+2
$SG776	DB	'fldenv', 00H
	ORG $+1
$SG777	DB	'fmul', 00H
	ORG $+3
$SG778	DB	'fnsave', 00H
	ORG $+1
$SG779	DB	'fnstcw', 00H
	ORG $+1
$SG780	DB	'fnstenv', 00H
$SG781	DB	'fnstsw', 00H
	ORG $+1
$SG782	DB	'frstor', 00H
	ORG $+1
$SG783	DB	'fs:', 00H
$SG784	DB	'fst', 00H
$SG785	DB	'fstp', 00H
	ORG $+3
$SG786	DB	'fsub', 00H
	ORG $+3
$SG787	DB	'fsubr', 00H
	ORG $+2
$SG788	DB	'gbp', 00H
$SG789	DB	'gs:', 00H
$SG790	DB	'hlt', 00H
$SG791	DB	'idiv', 00H
	ORG $+3
$SG792	DB	'imul', 00H
	ORG $+3
$SG793	DB	'in', 00H
	ORG $+1
$SG794	DB	'inc', 00H
$SG795	DB	'ins', 00H
$SG796	DB	'int', 00H
$SG797	DB	'int3', 00H
	ORG $+3
$SG798	DB	'into', 00H
	ORG $+3
$SG799	DB	'iret', 00H
	ORG $+3
$SG800	DB	'jbe', 00H
$SG801	DB	'jb', 00H
	ORG $+1
$SG802	DB	'jcxz', 00H
	ORG $+3
$SG803	DB	'jecxz', 00H
	ORG $+2
$SG804	DB	'jg', 00H
	ORG $+1
$SG805	DB	'jge', 00H
$SG806	DB	'jl', 00H
	ORG $+1
$SG807	DB	'jle', 00H
$SG808	DB	'jmp', 00H
$SG809	DB	'jnb', 00H
$SG810	DB	'jnbe', 00H
	ORG $+3
$SG811	DB	'jno', 00H
$SG812	DB	'jnp', 00H
$SG813	DB	'jns', 00H
$SG814	DB	'jnz', 00H
$SG815	DB	'jo', 00H
	ORG $+1
$SG816	DB	'jp', 00H
	ORG $+1
$SG817	DB	'js', 00H
	ORG $+1
$SG818	DB	'jz', 00H
	ORG $+1
$SG819	DB	'lahf', 00H
	ORG $+3
$SG820	DB	'lar', 00H
$SG821	DB	'lds', 00H
$SG822	DB	'lea', 00H
$SG823	DB	'leave', 00H
	ORG $+2
$SG824	DB	'les', 00H
$SG825	DB	'lfs', 00H
$SG826	DB	'lgdt', 00H
	ORG $+3
$SG827	DB	'lgs', 00H
$SG828	DB	'lidt', 00H
	ORG $+3
$SG829	DB	'lldt', 00H
	ORG $+3
$SG830	DB	'lmsw', 00H
	ORG $+3
$SG831	DB	'lock', 00H
	ORG $+3
$SG832	DB	'lodsb', 00H
	ORG $+2
$SG833	DB	'lods', 00H
	ORG $+3
$SG834	DB	'loop', 00H
	ORG $+3
$SG835	DB	'loopnz', 00H
	ORG $+1
$SG836	DB	'loopz', 00H
	ORG $+2
$SG837	DB	'lsl', 00H
$SG838	DB	'lss', 00H
$SG839	DB	'ltr', 00H
$SG840	DB	'mov', 00H
$SG841	DB	'movsb', 00H
	ORG $+2
$SG842	DB	'movs', 00H
	ORG $+3
$SG843	DB	'movsx', 00H
	ORG $+2
$SG844	DB	'movzx', 00H
	ORG $+2
$SG845	DB	'mul', 00H
$SG846	DB	'neg', 00H
$SG847	DB	'nop', 00H
$SG848	DB	'not', 00H
$SG849	DB	'or', 00H
	ORG $+1
$SG850	DB	'os:', 00H
$SG851	DB	'out', 00H
$SG852	DB	'outs', 00H
	ORG $+3
$SG853	DB	'pop', 00H
$SG854	DB	'popa', 00H
	ORG $+3
$SG855	DB	'popf', 00H
	ORG $+3
$SG856	DB	'push', 00H
	ORG $+3
$SG857	DB	'pusha', 00H
	ORG $+2
$SG858	DB	'pushf', 00H
	ORG $+2
$SG859	DB	'rcl', 00H
$SG860	DB	'rcr', 00H
$SG861	DB	'repnz', 00H
	ORG $+2
$SG862	DB	'repz', 00H
	ORG $+3
$SG863	DB	'ret', 00H
$SG864	DB	'retf', 00H
	ORG $+3
$SG865	DB	'rol', 00H
$SG866	DB	'ror', 00H
$SG867	DB	'sahf', 00H
	ORG $+3
$SG868	DB	'sar', 00H
$SG869	DB	'sbb', 00H
$SG870	DB	'scasb', 00H
	ORG $+2
$SG871	DB	'scas', 00H
	ORG $+3
$SG872	DB	'setbe', 00H
	ORG $+2
$SG873	DB	'setc', 00H
	ORG $+3
$SG874	DB	'setg', 00H
	ORG $+3
$SG875	DB	'setge', 00H
	ORG $+2
$SG876	DB	'setl', 00H
	ORG $+3
$SG877	DB	'setle', 00H
	ORG $+2
$SG878	DB	'setnbe', 00H
	ORG $+1
$SG879	DB	'setnc', 00H
	ORG $+2
$SG880	DB	'setno', 00H
	ORG $+2
$SG881	DB	'setnp', 00H
	ORG $+2
$SG882	DB	'setns', 00H
	ORG $+2
$SG883	DB	'setnz', 00H
	ORG $+2
$SG884	DB	'seto', 00H
	ORG $+3
$SG885	DB	'setp', 00H
	ORG $+3
$SG886	DB	'sets', 00H
	ORG $+3
$SG887	DB	'setz', 00H
	ORG $+3
$SG888	DB	'sgdt', 00H
	ORG $+3
$SG889	DB	'shl', 00H
$SG890	DB	'shld', 00H
	ORG $+3
$SG891	DB	'shr', 00H
$SG892	DB	'shrd', 00H
	ORG $+3
$SG893	DB	'sidt', 00H
	ORG $+3
$SG894	DB	'sldt', 00H
	ORG $+3
$SG895	DB	'smsw', 00H
	ORG $+3
$SG896	DB	'ss:', 00H
$SG897	DB	'stc', 00H
$SG898	DB	'std', 00H
$SG899	DB	'sti', 00H
$SG900	DB	'stosb', 00H
	ORG $+2
$SG901	DB	'stos', 00H
	ORG $+3
$SG902	DB	'str', 00H
$SG903	DB	'sub', 00H
$SG904	DB	'test', 00H
	ORG $+3
$SG905	DB	'verr', 00H
	ORG $+3
$SG906	DB	'verw', 00H
	ORG $+3
$SG907	DB	'wait', 00H
	ORG $+3
$SG908	DB	'xchg', 00H
	ORG $+3
$SG909	DB	'xlat', 00H
	ORG $+3
$SG910	DB	'xor', 00H
_apszMnemonic DD FLAT:$SG719
	DD	FLAT:$SG720
	DD	FLAT:$SG721
	DD	FLAT:$SG722
	DD	FLAT:$SG723
	DD	FLAT:$SG724
	DD	FLAT:$SG725
	DD	FLAT:$SG726
	DD	FLAT:$SG727
	DD	FLAT:$SG728
	DD	FLAT:$SG729
	DD	FLAT:$SG730
	DD	FLAT:$SG731
	DD	FLAT:$SG732
	DD	FLAT:$SG733
	DD	FLAT:$SG734
	DD	FLAT:$SG735
	DD	FLAT:$SG736
	DD	FLAT:$SG737
	DD	FLAT:$SG738
	DD	FLAT:$SG739
	DD	FLAT:$SG740
	DD	FLAT:$SG741
	DD	FLAT:$SG742
	DD	FLAT:$SG743
	DD	FLAT:$SG744
	DD	FLAT:$SG745
	DD	FLAT:$SG746
	DD	FLAT:$SG747
	DD	FLAT:$SG748
	DD	FLAT:$SG749
	DD	FLAT:$SG750
	DD	FLAT:$SG751
	DD	FLAT:$SG752
	DD	FLAT:$SG753
	DD	FLAT:$SG754
	DD	FLAT:$SG755
	DD	FLAT:$SG756
	DD	FLAT:$SG757
	DD	FLAT:$SG758
	DD	FLAT:$SG759
	DD	FLAT:$SG760
	DD	FLAT:$SG761
	DD	FLAT:$SG762
	DD	FLAT:$SG763
	DD	FLAT:$SG764
	DD	FLAT:$SG765
	DD	FLAT:$SG766
	DD	FLAT:$SG767
	DD	FLAT:$SG768
	DD	FLAT:$SG769
	DD	FLAT:$SG770
	DD	FLAT:$SG771
	DD	FLAT:$SG772
	DD	FLAT:$SG773
	DD	FLAT:$SG774
	DD	FLAT:$SG775
	DD	FLAT:$SG776
	DD	FLAT:$SG777
	DD	FLAT:$SG778
	DD	FLAT:$SG779
	DD	FLAT:$SG780
	DD	FLAT:$SG781
	DD	FLAT:$SG782
	DD	FLAT:$SG783
	DD	FLAT:$SG784
	DD	FLAT:$SG785
	DD	FLAT:$SG786
	DD	FLAT:$SG787
	DD	FLAT:$SG788
	DD	FLAT:$SG789
	DD	FLAT:$SG790
	DD	FLAT:$SG791
	DD	FLAT:$SG792
	DD	FLAT:$SG793
	DD	FLAT:$SG794
	DD	FLAT:$SG795
	DD	FLAT:$SG796
	DD	FLAT:$SG797
	DD	FLAT:$SG798
	DD	FLAT:$SG799
	DD	FLAT:$SG800
	DD	FLAT:$SG801
	DD	FLAT:$SG802
	DD	FLAT:$SG803
	DD	FLAT:$SG804
	DD	FLAT:$SG805
	DD	FLAT:$SG806
	DD	FLAT:$SG807
	DD	FLAT:$SG808
	DD	FLAT:$SG809
	DD	FLAT:$SG810
	DD	FLAT:$SG811
	DD	FLAT:$SG812
	DD	FLAT:$SG813
	DD	FLAT:$SG814
	DD	FLAT:$SG815
	DD	FLAT:$SG816
	DD	FLAT:$SG817
	DD	FLAT:$SG818
	DD	FLAT:$SG819
	DD	FLAT:$SG820
	DD	FLAT:$SG821
	DD	FLAT:$SG822
	DD	FLAT:$SG823
	DD	FLAT:$SG824
	DD	FLAT:$SG825
	DD	FLAT:$SG826
	DD	FLAT:$SG827
	DD	FLAT:$SG828
	DD	FLAT:$SG829
	DD	FLAT:$SG830
	DD	FLAT:$SG831
	DD	FLAT:$SG832
	DD	FLAT:$SG833
	DD	FLAT:$SG834
	DD	FLAT:$SG835
	DD	FLAT:$SG836
	DD	FLAT:$SG837
	DD	FLAT:$SG838
	DD	FLAT:$SG839
	DD	FLAT:$SG840
	DD	FLAT:$SG841
	DD	FLAT:$SG842
	DD	FLAT:$SG843
	DD	FLAT:$SG844
	DD	FLAT:$SG845
	DD	FLAT:$SG846
	DD	FLAT:$SG847
	DD	FLAT:$SG848
	DD	FLAT:$SG849
	DD	FLAT:$SG850
	DD	FLAT:$SG851
	DD	FLAT:$SG852
	DD	FLAT:$SG853
	DD	FLAT:$SG854
	DD	FLAT:$SG855
	DD	FLAT:$SG856
	DD	FLAT:$SG857
	DD	FLAT:$SG858
	DD	FLAT:$SG859
	DD	FLAT:$SG860
	DD	FLAT:$SG861
	DD	FLAT:$SG862
	DD	FLAT:$SG863
	DD	FLAT:$SG864
	DD	FLAT:$SG865
	DD	FLAT:$SG866
	DD	FLAT:$SG867
	DD	FLAT:$SG868
	DD	FLAT:$SG869
	DD	FLAT:$SG870
	DD	FLAT:$SG871
	DD	FLAT:$SG872
	DD	FLAT:$SG873
	DD	FLAT:$SG874
	DD	FLAT:$SG875
	DD	FLAT:$SG876
	DD	FLAT:$SG877
	DD	FLAT:$SG878
	DD	FLAT:$SG879
	DD	FLAT:$SG880
	DD	FLAT:$SG881
	DD	FLAT:$SG882
	DD	FLAT:$SG883
	DD	FLAT:$SG884
	DD	FLAT:$SG885
	DD	FLAT:$SG886
	DD	FLAT:$SG887
	DD	FLAT:$SG888
	DD	FLAT:$SG889
	DD	FLAT:$SG890
	DD	FLAT:$SG891
	DD	FLAT:$SG892
	DD	FLAT:$SG893
	DD	FLAT:$SG894
	DD	FLAT:$SG895
	DD	FLAT:$SG896
	DD	FLAT:$SG897
	DD	FLAT:$SG898
	DD	FLAT:$SG899
	DD	FLAT:$SG900
	DD	FLAT:$SG901
	DD	FLAT:$SG902
	DD	FLAT:$SG903
	DD	FLAT:$SG904
	DD	FLAT:$SG905
	DD	FLAT:$SG906
	DD	FLAT:$SG907
	DD	FLAT:$SG908
	DD	FLAT:$SG909
	DD	FLAT:$SG910
$SG912	DB	'al', 00H
	ORG $+1
$SG913	DB	'cl', 00H
	ORG $+1
$SG914	DB	'dl', 00H
	ORG $+1
$SG915	DB	'bl', 00H
	ORG $+1
$SG916	DB	'ah', 00H
	ORG $+1
$SG917	DB	'ch', 00H
	ORG $+1
$SG918	DB	'dh', 00H
	ORG $+1
$SG919	DB	'bh', 00H
	ORG $+1
$SG920	DB	'ax', 00H
	ORG $+1
$SG921	DB	'cx', 00H
	ORG $+1
$SG922	DB	'dx', 00H
	ORG $+1
$SG923	DB	'bx', 00H
	ORG $+1
$SG924	DB	'sp', 00H
	ORG $+1
$SG925	DB	'bp', 00H
	ORG $+1
$SG926	DB	'si', 00H
	ORG $+1
$SG927	DB	'di', 00H
	ORG $+1
$SG928	DB	'es', 00H
	ORG $+1
$SG929	DB	'cs', 00H
	ORG $+1
$SG930	DB	'ss', 00H
	ORG $+1
$SG931	DB	'ds', 00H
	ORG $+1
$SG932	DB	'fs', 00H
	ORG $+1
$SG933	DB	'gs', 00H
	ORG $+1
$SG934	DB	'ip', 00H
	ORG $+1
$SG935	DB	'eip', 00H
$SG936	DB	'eax', 00H
$SG937	DB	'ecx', 00H
$SG938	DB	'edx', 00H
$SG939	DB	'ebx', 00H
$SG940	DB	'esp', 00H
$SG941	DB	'ebp', 00H
$SG942	DB	'esi', 00H
$SG943	DB	'edi', 00H
$SG944	DB	'cr0', 00H
$SG945	DB	'???', 00H
$SG946	DB	'cr2', 00H
$SG947	DB	'cr3', 00H
$SG948	DB	'???', 00H
$SG949	DB	'???', 00H
$SG950	DB	'???', 00H
$SG951	DB	'???', 00H
$SG952	DB	'dr0', 00H
$SG953	DB	'dr1', 00H
$SG954	DB	'dr2', 00H
$SG955	DB	'dr3', 00H
$SG956	DB	'???', 00H
$SG957	DB	'???', 00H
$SG958	DB	'dr6', 00H
$SG959	DB	'dr7', 00H
$SG960	DB	'???', 00H
$SG961	DB	'???', 00H
$SG962	DB	'???', 00H
$SG963	DB	'???', 00H
$SG964	DB	'???', 00H
$SG965	DB	'???', 00H
$SG966	DB	'tr6', 00H
$SG967	DB	'tr7', 00H
$SG968	DB	'flags', 00H
	ORG $+2
_ardRegs DD	FLAT:$SG912
	DB	058H
	DB	01H
	DD	FLAT:$SG913
	DB	054H
	DB	01H
	DD	FLAT:$SG914
	DB	050H
	DB	01H
	DD	FLAT:$SG915
	DB	04cH
	DB	01H
	DD	FLAT:$SG916
	DB	059H
	DB	01H
	DD	FLAT:$SG917
	DB	055H
	DB	01H
	DD	FLAT:$SG918
	DB	051H
	DB	01H
	DD	FLAT:$SG919
	DB	04dH
	DB	01H
	DD	FLAT:$SG920
	DB	058H
	DB	02H
	DD	FLAT:$SG921
	DB	054H
	DB	02H
	DD	FLAT:$SG922
	DB	050H
	DB	02H
	DD	FLAT:$SG923
	DB	04cH
	DB	02H
	DD	FLAT:$SG924
	DB	048H
	DB	02H
	DD	FLAT:$SG925
	DB	044H
	DB	02H
	DD	FLAT:$SG926
	DB	040H
	DB	02H
	DD	FLAT:$SG927
	DB	03cH
	DB	02H
	DD	FLAT:$SG928
	DB	02cH
	DB	03H
	DD	FLAT:$SG929
	DB	068H
	DB	03H
	DD	FLAT:$SG930
	DB	020H
	DB	03H
	DD	FLAT:$SG931
	DB	030H
	DB	03H
	DD	FLAT:$SG932
	DB	028H
	DB	03H
	DD	FLAT:$SG933
	DB	024H
	DB	03H
	DD	FLAT:$SG934
	DB	064H
	DB	02H
	DD	FLAT:$SG935
	DB	064H
	DB	04H
	DD	FLAT:$SG936
	DB	058H
	DB	04H
	DD	FLAT:$SG937
	DB	054H
	DB	04H
	DD	FLAT:$SG938
	DB	050H
	DB	04H
	DD	FLAT:$SG939
	DB	04cH
	DB	04H
	DD	FLAT:$SG940
	DB	048H
	DB	04H
	DD	FLAT:$SG941
	DB	044H
	DB	04H
	DD	FLAT:$SG942
	DB	040H
	DB	04H
	DD	FLAT:$SG943
	DB	03cH
	DB	04H
	DD	FLAT:$SG944
	DB	01cH
	DB	04H
	DD	FLAT:$SG945
	DB	00H
	DB	00H
	DD	FLAT:$SG946
	DB	018H
	DB	04H
	DD	FLAT:$SG947
	DB	014H
	DB	04H
	DD	FLAT:$SG948
	DB	00H
	DB	00H
	DD	FLAT:$SG949
	DB	00H
	DB	00H
	DD	FLAT:$SG950
	DB	00H
	DB	00H
	DD	FLAT:$SG951
	DB	00H
	DB	00H
	DD	FLAT:$SG952
	DB	00H
	DB	00H
	DD	FLAT:$SG953
	DB	00H
	DB	00H
	DD	FLAT:$SG954
	DB	00H
	DB	00H
	DD	FLAT:$SG955
	DB	00H
	DB	00H
	DD	FLAT:$SG956
	DB	00H
	DB	00H
	DD	FLAT:$SG957
	DB	00H
	DB	00H
	DD	FLAT:$SG958
	DB	00H
	DB	00H
	DD	FLAT:$SG959
	DB	00H
	DB	00H
	DD	FLAT:$SG960
	DB	00H
	DB	00H
	DD	FLAT:$SG961
	DB	00H
	DB	00H
	DD	FLAT:$SG962
	DB	00H
	DB	00H
	DD	FLAT:$SG963
	DB	00H
	DB	00H
	DD	FLAT:$SG964
	DB	00H
	DB	00H
	DD	FLAT:$SG965
	DB	00H
	DB	00H
	DD	FLAT:$SG966
	DB	00H
	DB	00H
	DD	FLAT:$SG967
	DB	00H
	DB	00H
	DD	FLAT:$SG968
	DB	06cH
	DB	04H
	DD	00H
	DB	00H
	DB	00H
_achScale DB	031H
	DB	032H
	DB	034H
	DB	038H
$SG971	DB	'bx+si', 00H
	ORG $+2
$SG972	DB	'bx+di', 00H
	ORG $+2
$SG973	DB	'bp+si', 00H
	ORG $+2
$SG974	DB	'bp+di', 00H
	ORG $+2
$SG975	DB	'si', 00H
	ORG $+1
$SG976	DB	'di', 00H
	ORG $+1
$SG977	DB	'bp', 00H
	ORG $+1
$SG978	DB	'bx', 00H
	ORG $+1
_apszRM	DD	FLAT:$SG971
	DD	FLAT:$SG972
	DD	FLAT:$SG973
	DD	FLAT:$SG974
	DD	FLAT:$SG975
	DD	FLAT:$SG976
	DD	FLAT:$SG977
	DD	FLAT:$SG978
_aidBase DB	06H
	DB	07H
	DW	03081H
	DW	010b1H
	ORG $+6
	DB	06H
	DB	08H
	DW	03084H
	DW	010b4H
	ORG $+6
	DB	06H
	DB	07H
	DW	030b1H
	DW	01081H
	ORG $+6
	DB	06H
	DB	08H
	DW	030b4H
	DW	01084H
	ORG $+6
	DB	06H
	DB	07H
	DW	03061H
	DW	01001H
	ORG $+6
	DB	06H
	DB	08H
	DW	03864H
	DW	01004H
	ORG $+6
	DB	089H
	DB	06aH
	DW	01073H
	DW	00H
	ORG $+6
	DB	086H
	DB	067H
	DW	02073H
	DW	00H
	ORG $+6
	DB	082H
	DB	060H
	DW	03081H
	DW	010b1H
	ORG $+6
	DB	082H
	DB	061H
	DW	03084H
	DW	010b4H
	ORG $+6
	DB	082H
	DB	060H
	DW	030b1H
	DW	01081H
	ORG $+6
	DB	082H
	DB	061H
	DW	030b4H
	DW	01084H
	ORG $+6
	DB	082H
	DB	060H
	DW	03061H
	DW	01001H
	ORG $+6
	DB	082H
	DB	061H
	DW	03864H
	DW	01004H
	ORG $+6
	DB	089H
	DB	06aH
	DW	01173H
	DW	00H
	ORG $+6
	DB	00H
	DB	00H
	DW	08000H
	ORG $+8
	DB	05H
	DB	05H
	DW	03081H
	DW	010b1H
	ORG $+6
	DB	05H
	DB	06H
	DW	03084H
	DW	010b4H
	ORG $+6
	DB	05H
	DB	05H
	DW	030b1H
	DW	01081H
	ORG $+6
	DB	05H
	DB	06H
	DW	030b4H
	DW	01084H
	ORG $+6
	DB	05H
	DB	05H
	DW	03061H
	DW	01001H
	ORG $+6
	DB	05H
	DB	06H
	DW	03864H
	DW	01004H
	ORG $+6
	DB	089H
	DB	06aH
	DW	01273H
	DW	00H
	ORG $+6
	DB	086H
	DB	067H
	DW	02273H
	DW	00H
	ORG $+6
	DB	096H
	DB	07eH
	DW	03081H
	DW	010b1H
	ORG $+6
	DB	096H
	DB	07fH
	DW	03084H
	DW	010b4H
	ORG $+6
	DB	096H
	DB	07eH
	DW	030b1H
	DW	01081H
	ORG $+6
	DB	096H
	DB	07fH
	DW	030b4H
	DW	01084H
	ORG $+6
	DB	096H
	DB	07eH
	DW	03061H
	DW	01001H
	ORG $+6
	DB	096H
	DB	07fH
	DW	03864H
	DW	01004H
	ORG $+6
	DB	089H
	DB	06aH
	DW	01373H
	DW	00H
	ORG $+6
	DB	086H
	DB	067H
	DW	02373H
	DW	00H
	ORG $+6
	DB	07H
	DB	09H
	DW	03081H
	DW	010b1H
	ORG $+6
	DB	07H
	DB	0aH
	DW	03084H
	DW	010b4H
	ORG $+6
	DB	07H
	DB	09H
	DW	030b1H
	DW	01081H
	ORG $+6
	DB	07H
	DB	0aH
	DW	030b4H
	DW	01084H
	ORG $+6
	DB	07H
	DB	09H
	DW	03061H
	DW	01001H
	ORG $+6
	DB	07H
	DB	0aH
	DW	03864H
	DW	01004H
	ORG $+6
	DB	023H
	DB	023H
	DW	030H
	ORG $+8
	DB	01dH
	DB	01bH
	DW	00H
	ORG $+8
	DB	0b8H
	DB	08cH
	DW	03081H
	DW	010b1H
	ORG $+6
	DB	0b8H
	DB	08dH
	DW	03084H
	DW	010b4H
	ORG $+6
	DB	0b8H
	DB	08cH
	DW	030b1H
	DW	01081H
	ORG $+6
	DB	0b8H
	DB	08dH
	DW	030b4H
	DW	01084H
	ORG $+6
	DB	0b8H
	DB	08cH
	DW	03061H
	DW	01001H
	ORG $+6
	DB	0b8H
	DB	08dH
	DW	03864H
	DW	01004H
	ORG $+6
	DB	01bH
	DB	019H
	DW	050H
	ORG $+8
	DB	01eH
	DB	01cH
	DW	00H
	ORG $+8
	DB	0bfH
	DB	094H
	DW	03081H
	DW	010b1H
	ORG $+6
	DB	0bfH
	DB	095H
	DW	03084H
	DW	010b4H
	ORG $+6
	DB	0bfH
	DB	094H
	DW	030b1H
	DW	01081H
	ORG $+6
	DB	0bfH
	DB	095H
	DW	030b4H
	DW	01084H
	ORG $+6
	DB	0bfH
	DB	094H
	DW	03061H
	DW	01001H
	ORG $+6
	DB	0bfH
	DB	095H
	DW	03864H
	DW	01004H
	ORG $+6
	DB	0b1H
	DB	086H
	DW	090H
	ORG $+8
	DB	01H
	DB	01H
	DW	00H
	ORG $+8
	DB	018H
	DB	015H
	DW	01081H
	DW	010b1H
	ORG $+6
	DB	018H
	DB	018H
	DW	01084H
	DW	010b4H
	ORG $+6
	DB	018H
	DB	015H
	DW	010b1H
	DW	01081H
	ORG $+6
	DB	018H
	DB	018H
	DW	010b4H
	DW	01084H
	ORG $+6
	DB	018H
	DB	015H
	DW	01061H
	DW	01001H
	ORG $+6
	DB	018H
	DB	018H
	DW	01864H
	DW	01004H
	ORG $+6
	DB	021H
	DB	021H
	DW	0110H
	ORG $+8
	DB	04H
	DB	04H
	DW	00H
	ORG $+8
	DB	04bH
	DB	02fH
	DW	03864H
	DW	00H
	ORG $+6
	DB	04bH
	DB	02fH
	DW	03964H
	DW	00H
	ORG $+6
	DB	04bH
	DB	02fH
	DW	03a64H
	DW	00H
	ORG $+6
	DB	04bH
	DB	02fH
	DW	03b64H
	DW	00H
	ORG $+6
	DB	04bH
	DB	02fH
	DW	03c64H
	DW	00H
	ORG $+6
	DB	04bH
	DB	02fH
	DW	03d64H
	DW	00H
	ORG $+6
	DB	04bH
	DB	02fH
	DW	03e64H
	DW	00H
	ORG $+6
	DB	04bH
	DB	02fH
	DW	03f64H
	DW	00H
	ORG $+6
	DB	01fH
	DB	01eH
	DW	03864H
	DW	00H
	ORG $+6
	DB	01fH
	DB	01eH
	DW	03964H
	DW	00H
	ORG $+6
	DB	01fH
	DB	01eH
	DW	03a64H
	DW	00H
	ORG $+6
	DB	01fH
	DB	01eH
	DW	03b64H
	DW	00H
	ORG $+6
	DB	01fH
	DB	01eH
	DW	03c64H
	DW	00H
	ORG $+6
	DB	01fH
	DB	01eH
	DW	03d64H
	DW	00H
	ORG $+6
	DB	01fH
	DB	01eH
	DW	03e64H
	DW	00H
	ORG $+6
	DB	01fH
	DB	01eH
	DW	03f64H
	DW	00H
	ORG $+6
	DB	089H
	DB	06aH
	DW	01864H
	DW	00H
	ORG $+6
	DB	089H
	DB	06aH
	DW	01964H
	DW	00H
	ORG $+6
	DB	089H
	DB	06aH
	DW	01a64H
	DW	00H
	ORG $+6
	DB	089H
	DB	06aH
	DW	01b64H
	DW	00H
	ORG $+6
	DB	089H
	DB	06aH
	DW	01c64H
	DW	00H
	ORG $+6
	DB	089H
	DB	06aH
	DW	01d64H
	DW	00H
	ORG $+6
	DB	089H
	DB	06aH
	DW	01e64H
	DW	00H
	ORG $+6
	DB	089H
	DB	06aH
	DW	01f64H
	DW	00H
	ORG $+6
	DB	086H
	DB	067H
	DW	02864H
	DW	00H
	ORG $+6
	DB	086H
	DB	067H
	DW	02964H
	DW	00H
	ORG $+6
	DB	086H
	DB	067H
	DW	02a64H
	DW	00H
	ORG $+6
	DB	086H
	DB	067H
	DW	02b64H
	DW	00H
	ORG $+6
	DB	086H
	DB	067H
	DW	02c64H
	DW	00H
	ORG $+6
	DB	086H
	DB	067H
	DW	02d64H
	DW	00H
	ORG $+6
	DB	086H
	DB	067H
	DW	02e64H
	DW	00H
	ORG $+6
	DB	086H
	DB	067H
	DW	02f64H
	DW	00H
	ORG $+6
	DB	08aH
	DB	06bH
	DW	08000H
	ORG $+8
	DB	087H
	DB	068H
	DW	08000H
	ORG $+8
	DB	0aH
	DB	0dH
	DW	090b4H
	DW	01095H
	ORG $+6
	DB	08H
	DB	0bH
	DW	0b083H
	DW	010b3H
	ORG $+6
	DB	040H
	DB	025H
	DW	0c210H
	ORG $+8
	DB	046H
	DB	027H
	DW	0c410H
	ORG $+8
	DB	083H
	DB	062H
	DW	0c810H
	ORG $+8
	DB	09H
	DB	0cH
	DW	0d010H
	ORG $+8
	DB	089H
	DB	06aH
	DW	09004H
	DW	00H
	ORG $+6
	DB	049H
	DB	02cH
	DW	0a0b4H
	DW	01084H
	DW	01004H
	ORG $+4
	DB	089H
	DB	06aH
	DW	09002H
	DW	00H
	ORG $+6
	DB	049H
	DB	02bH
	DW	0a0b4H
	DW	01084H
	DW	01002H
	ORG $+4
	DB	04cH
	DB	030H
	DW	0a051H
	DW	01a64H
	ORG $+6
	DB	04cH
	DB	031H
	DW	0a054H
	DW	01a64H
	ORG $+6
	DB	085H
	DB	064H
	DW	09a64H
	DW	01041H
	ORG $+6
	DB	085H
	DB	065H
	DW	09a64H
	DW	01044H
	ORG $+6
	DB	060H
	DB	046H
	DW	01031H
	DW	00H
	ORG $+6
	DB	05cH
	DB	042H
	DW	01031H
	DW	00H
	ORG $+6
	DB	052H
	DB	037H
	DW	01031H
	DW	00H
	ORG $+6
	DB	05aH
	DB	040H
	DW	01031H
	DW	00H
	ORG $+6
	DB	063H
	DB	049H
	DW	01031H
	DW	00H
	ORG $+6
	DB	05fH
	DB	045H
	DW	01031H
	DW	00H
	ORG $+6
	DB	051H
	DB	038H
	DW	01031H
	DW	00H
	ORG $+6
	DB	05bH
	DB	041H
	DW	01031H
	DW	00H
	ORG $+6
	DB	062H
	DB	048H
	DW	01031H
	DW	00H
	ORG $+6
	DB	05eH
	DB	044H
	DW	01031H
	DW	00H
	ORG $+6
	DB	061H
	DB	047H
	DW	01031H
	DW	00H
	ORG $+6
	DB	05dH
	DB	043H
	DW	01031H
	DW	00H
	ORG $+6
	DB	057H
	DB	03cH
	DW	01031H
	DW	00H
	ORG $+6
	DB	056H
	DB	03bH
	DW	01031H
	DW	00H
	ORG $+6
	DB	058H
	DB	03dH
	DW	01031H
	DW	00H
	ORG $+6
	DB	055H
	DB	03aH
	DW	01031H
	DW	00H
	ORG $+6
	DB	00H
	DB	096H
	DW	03081H
	DW	01001H
	ORG $+6
	DB	00H
	DB	097H
	DW	03084H
	DW	01004H
	ORG $+6
	DB	00H
	DB	096H
	DW	03081H
	DW	01001H
	ORG $+6
	DB	00H
	DB	098H
	DW	03084H
	DW	01001H
	ORG $+6
	DB	0b9H
	DB	08eH
	DW	01081H
	DW	010b1H
	ORG $+6
	DB	0b9H
	DB	08fH
	DW	01084H
	DW	010b4H
	ORG $+6
	DB	0bdH
	DB	091H
	DW	03081H
	DW	030b1H
	ORG $+6
	DB	0bdH
	DB	092H
	DW	03084H
	DW	030b4H
	ORG $+6
	DB	079H
	DB	055H
	DW	02081H
	DW	010b1H
	ORG $+6
	DB	079H
	DB	058H
	DW	02084H
	DW	010b4H
	ORG $+6
	DB	079H
	DB	055H
	DW	020b1H
	DW	01081H
	ORG $+6
	DB	079H
	DB	058H
	DW	020b4H
	DW	01084H
	ORG $+6
	DB	079H
	DB	058H
	DW	02083H
	DW	010c3H
	ORG $+6
	DB	067H
	DB	04cH
	DW	020b4H
	DW	094H
	ORG $+6
	DB	079H
	DB	058H
	DW	020c3H
	DW	01083H
	ORG $+6
	DB	086H
	DB	067H
	DW	02084H
	DW	00H
	ORG $+6
	DB	080H
	DB	05dH
	DW	00H
	ORG $+8
	DB	0bdH
	DB	092H
	DW	03864H
	DW	03964H
	ORG $+6
	DB	0bdH
	DB	092H
	DW	03864H
	DW	03a64H
	ORG $+6
	DB	0bdH
	DB	092H
	DW	03864H
	DW	03b64H
	ORG $+6
	DB	0bdH
	DB	092H
	DW	03864H
	DW	03c64H
	ORG $+6
	DB	0bdH
	DB	092H
	DW	03864H
	DW	03d64H
	ORG $+6
	DB	0bdH
	DB	092H
	DW	03864H
	DW	03e64H
	ORG $+6
	DB	0bdH
	DB	092H
	DW	03864H
	DW	03f64H
	ORG $+6
	DB	012H
	DB	010H
	DW	00H
	ORG $+8
	DB	01cH
	DB	01aH
	DW	00H
	ORG $+8
	DB	011H
	DB	0fH
	DW	01007H
	ORG $+8
	DB	0bcH
	DB	090H
	DW	00H
	ORG $+8
	DB	08bH
	DB	06cH
	DW	00H
	ORG $+8
	DB	088H
	DB	069H
	DW	00H
	ORG $+8
	DB	094H
	DB	07bH
	DW	00H
	ORG $+8
	DB	064H
	DB	04aH
	DW	00H
	ORG $+8
	DB	079H
	DB	055H
	DW	02061H
	DW	01021H
	ORG $+6
	DB	079H
	DB	058H
	DW	02864H
	DW	01024H
	ORG $+6
	DB	079H
	DB	055H
	DW	02021H
	DW	01061H
	ORG $+6
	DB	079H
	DB	058H
	DW	02024H
	DW	01864H
	ORG $+6
	DB	07aH
	DB	056H
	DW	02051H
	DW	01041H
	ORG $+6
	DB	07bH
	DB	057H
	DW	02054H
	DW	01044H
	ORG $+6
	DB	019H
	DB	016H
	DW	01051H
	DW	01041H
	ORG $+6
	DB	01aH
	DB	017H
	DW	01054H
	DW	01044H
	ORG $+6
	DB	0b9H
	DB	08eH
	DW	01061H
	DW	01001H
	ORG $+6
	DB	0b9H
	DB	08fH
	DW	01864H
	DW	01004H
	ORG $+6
	DB	0b5H
	DB	08aH
	DW	02051H
	DW	01061H
	ORG $+6
	DB	0b6H
	DB	08bH
	DW	02054H
	DW	01864H
	ORG $+6
	DB	071H
	DB	050H
	DW	02061H
	DW	01041H
	ORG $+6
	DB	072H
	DB	051H
	DW	02864H
	DW	01044H
	ORG $+6
	DB	097H
	DB	080H
	DW	01061H
	DW	01051H
	ORG $+6
	DB	098H
	DB	081H
	DW	01864H
	DW	01054H
	ORG $+6
	DB	079H
	DB	055H
	DW	02061H
	DW	01001H
	ORG $+6
	DB	079H
	DB	055H
	DW	02161H
	DW	01001H
	ORG $+6
	DB	079H
	DB	055H
	DW	02261H
	DW	01001H
	ORG $+6
	DB	079H
	DB	055H
	DW	02361H
	DW	01001H
	ORG $+6
	DB	079H
	DB	055H
	DW	02461H
	DW	01001H
	ORG $+6
	DB	079H
	DB	055H
	DW	02561H
	DW	01001H
	ORG $+6
	DB	079H
	DB	055H
	DW	02661H
	DW	01001H
	ORG $+6
	DB	079H
	DB	055H
	DW	02761H
	DW	01001H
	ORG $+6
	DB	079H
	DB	058H
	DW	02864H
	DW	01004H
	ORG $+6
	DB	079H
	DB	058H
	DW	02964H
	DW	01004H
	ORG $+6
	DB	079H
	DB	058H
	DW	02a64H
	DW	01004H
	ORG $+6
	DB	079H
	DB	058H
	DW	02b64H
	DW	01004H
	ORG $+6
	DB	079H
	DB	058H
	DW	02c64H
	DW	01004H
	ORG $+6
	DB	079H
	DB	058H
	DW	02d64H
	DW	01004H
	ORG $+6
	DB	079H
	DB	058H
	DW	02e64H
	DW	01004H
	ORG $+6
	DB	079H
	DB	058H
	DW	02f64H
	DW	01004H
	ORG $+6
	DB	00H
	DB	099H
	DW	0b081H
	DW	01001H
	ORG $+6
	DB	00H
	DB	09aH
	DW	0b084H
	DW	01001H
	ORG $+6
	DB	090H
	DB	076H
	DW	01003H
	DW	00H
	ORG $+6
	DB	090H
	DB	075H
	DW	00H
	ORG $+8
	DB	069H
	DB	04eH
	DW	020b4H
	DW	01097H
	ORG $+6
	DB	066H
	DB	04bH
	DW	020b4H
	DW	01097H
	ORG $+6
	DB	079H
	DB	055H
	DW	02081H
	DW	01001H
	ORG $+6
	DB	079H
	DB	058H
	DW	02084H
	DW	01004H
	ORG $+6
	DB	022H
	DB	022H
	DW	09003H
	DW	01001H
	ORG $+6
	DB	068H
	DB	04dH
	DW	08000H
	ORG $+8
	DB	091H
	DB	074H
	DW	01003H
	DW	00H
	ORG $+6
	DB	091H
	DB	073H
	DW	00H
	ORG $+8
	DB	04eH
	DB	033H
	DW	00H
	ORG $+8
	DB	04dH
	DB	032H
	DW	01001H
	DW	00H
	ORG $+6
	DB	04fH
	DB	034H
	DW	00H
	ORG $+8
	DB	050H
	DB	036H
	DW	00H
	ORG $+8
	DB	00H
	DB	09bH
	DW	03081H
	DW	01011H
	ORG $+6
	DB	00H
	DB	09cH
	DW	03084H
	DW	01011H
	ORG $+6
	DB	00H
	DB	09dH
	DW	03081H
	DW	01161H
	ORG $+6
	DB	00H
	DB	09eH
	DW	03084H
	DW	01161H
	ORG $+6
	DB	03H
	DB	03H
	DW	00H
	ORG $+8
	DB	02H
	DB	02H
	DW	00H
	ORG $+8
	DB	045H
	DB	026H
	DW	00H
	ORG $+8
	DB	0beH
	DB	093H
	DW	00H
	ORG $+8
	DB	024H
	DB	024H
	DW	00H
	ORG $+8
	DB	024H
	DB	024H
	DW	00H
	ORG $+8
	DB	024H
	DB	024H
	DW	00H
	ORG $+8
	DB	024H
	DB	024H
	DW	00H
	ORG $+8
	DB	024H
	DB	024H
	DW	00H
	ORG $+8
	DB	024H
	DB	024H
	DW	00H
	ORG $+8
	DB	024H
	DB	024H
	DW	00H
	ORG $+8
	DB	024H
	DB	024H
	DW	00H
	ORG $+8
	DB	074H
	DB	053H
	DW	01031H
	DW	00H
	ORG $+6
	DB	075H
	DB	054H
	DW	01031H
	DW	00H
	ORG $+6
	DB	073H
	DB	052H
	DW	01031H
	DW	00H
	ORG $+6
	DB	053H
	DB	039H
	DW	01031H
	DW	00H
	ORG $+6
	DB	04aH
	DB	02dH
	DW	02061H
	DW	01001H
	ORG $+6
	DB	04aH
	DB	035H
	DW	02864H
	DW	01001H
	ORG $+6
	DB	084H
	DB	063H
	DW	01001H
	DW	01061H
	ORG $+6
	DB	084H
	DB	066H
	DW	01001H
	DW	01864H
	ORG $+6
	DB	011H
	DB	0eH
	DW	01034H
	DW	00H
	ORG $+6
	DB	059H
	DB	03eH
	DW	01034H
	DW	00H
	ORG $+6
	DB	059H
	DB	03fH
	DW	01007H
	DW	00H
	ORG $+6
	DB	059H
	DB	03eH
	DW	01031H
	DW	00H
	ORG $+6
	DB	04aH
	DB	02dH
	DW	02061H
	DW	01a64H
	ORG $+6
	DB	04aH
	DB	035H
	DW	02864H
	DW	01a64H
	ORG $+6
	DB	084H
	DB	063H
	DW	01a64H
	DW	01061H
	ORG $+6
	DB	084H
	DB	066H
	DW	01a64H
	DW	01864H
	ORG $+6
	DB	070H
	DB	04fH
	DW	02010H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	08eH
	DB	071H
	DW	04010H
	ORG $+8
	DB	08fH
	DB	072H
	DW	08010H
	ORG $+8
	DB	047H
	DB	028H
	DW	00H
	ORG $+8
	DB	017H
	DB	014H
	DW	00H
	ORG $+8
	DB	00H
	DB	09fH
	DW	03081H
	DW	00H
	ORG $+6
	DB	00H
	DB	0a0H
	DW	03084H
	DW	00H
	ORG $+6
	DB	013H
	DB	011H
	DW	00H
	ORG $+8
	DB	0b2H
	DB	087H
	DW	00H
	ORG $+8
	DB	015H
	DB	013H
	DW	00H
	ORG $+8
	DB	0b4H
	DB	089H
	DW	00H
	ORG $+8
	DB	014H
	DB	012H
	DW	00H
	ORG $+8
	DB	0b3H
	DB	088H
	DW	00H
	ORG $+8
	DB	00H
	DB	0a1H
	DW	03081H
	DW	00H
	ORG $+6
	DB	00H
	DB	0a2H
	DW	03084H
	DW	00H
	ORG $+6
_aid0F	DB	00H
	DB	0a3H
	DW	03083H
	DW	00H
	ORG $+6
	DB	00H
	DB	0a4H
	DW	03083H
	DW	00H
	ORG $+6
	DB	065H
	DB	00H
	DW	020b4H
	DW	01084H
	ORG $+6
	DB	076H
	DB	00H
	DW	020b4H
	DW	01084H
	ORG $+6
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	016H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	079H
	DB	00H
	DW	020a6H
	DW	010d6H
	ORG $+6
	DB	079H
	DB	00H
	DW	020a6H
	DW	010e6H
	ORG $+6
	DB	079H
	DB	00H
	DW	020d6H
	DW	010a6H
	ORG $+6
	DB	079H
	DB	00H
	DW	020e6H
	DW	010a6H
	ORG $+6
	DB	079H
	DB	00H
	DW	020a6H
	DW	010f6H
	ORG $+6
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	079H
	DB	00H
	DW	020f6H
	DW	010a6H
	ORG $+6
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	060H
	DB	00H
	DW	01034H
	DW	00H
	ORG $+6
	DB	05cH
	DB	00H
	DW	01034H
	DW	00H
	ORG $+6
	DB	052H
	DB	00H
	DW	01034H
	DW	00H
	ORG $+6
	DB	05aH
	DB	00H
	DW	01034H
	DW	00H
	ORG $+6
	DB	063H
	DB	00H
	DW	01034H
	DW	00H
	ORG $+6
	DB	05fH
	DB	00H
	DW	01034H
	DW	00H
	ORG $+6
	DB	051H
	DB	00H
	DW	01034H
	DW	00H
	ORG $+6
	DB	05bH
	DB	00H
	DW	01034H
	DW	00H
	ORG $+6
	DB	062H
	DB	00H
	DW	01034H
	DW	00H
	ORG $+6
	DB	05eH
	DB	00H
	DW	01034H
	DW	00H
	ORG $+6
	DB	061H
	DB	00H
	DW	01034H
	DW	00H
	ORG $+6
	DB	05dH
	DB	00H
	DW	01034H
	DW	00H
	ORG $+6
	DB	057H
	DB	00H
	DW	01034H
	DW	00H
	ORG $+6
	DB	056H
	DB	00H
	DW	01034H
	DW	00H
	ORG $+6
	DB	058H
	DB	00H
	DW	01034H
	DW	00H
	ORG $+6
	DB	055H
	DB	00H
	DW	01034H
	DW	00H
	ORG $+6
	DB	0a5H
	DB	00H
	DW	02081H
	DW	00H
	ORG $+6
	DB	0a1H
	DB	00H
	DW	02081H
	DW	00H
	ORG $+6
	DB	09aH
	DB	00H
	DW	02081H
	DW	00H
	ORG $+6
	DB	0a0H
	DB	00H
	DW	02081H
	DW	00H
	ORG $+6
	DB	09cH
	DB	00H
	DW	02081H
	DW	00H
	ORG $+6
	DB	0a4H
	DB	00H
	DW	02081H
	DW	00H
	ORG $+6
	DB	099H
	DB	00H
	DW	02081H
	DW	00H
	ORG $+6
	DB	09fH
	DB	00H
	DW	02081H
	DW	00H
	ORG $+6
	DB	0a7H
	DB	00H
	DW	02081H
	DW	00H
	ORG $+6
	DB	0a3H
	DB	00H
	DW	02081H
	DW	00H
	ORG $+6
	DB	0a6H
	DB	00H
	DW	02081H
	DW	00H
	ORG $+6
	DB	0a2H
	DB	00H
	DW	02081H
	DW	00H
	ORG $+6
	DB	09dH
	DB	00H
	DW	02081H
	DW	00H
	ORG $+6
	DB	09cH
	DB	00H
	DW	02081H
	DW	00H
	ORG $+6
	DB	09eH
	DB	00H
	DW	02081H
	DW	00H
	ORG $+6
	DB	09bH
	DB	00H
	DW	02081H
	DW	00H
	ORG $+6
	DB	089H
	DB	00H
	DW	01473H
	DW	00H
	ORG $+6
	DB	086H
	DB	00H
	DW	02473H
	DW	00H
	ORG $+6
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	0dH
	DB	00H
	DW	01084H
	DW	010b4H
	ORG $+6
	DB	0abH
	DB	00H
	DW	03084H
	DW	010b4H
	DW	01001H
	ORG $+4
	DB	0abH
	DB	00H
	DW	03084H
	DW	010b4H
	DW	01161H
	ORG $+4
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	089H
	DB	00H
	DW	01573H
	DW	00H
	ORG $+6
	DB	086H
	DB	00H
	DW	02573H
	DW	00H
	ORG $+6
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	010H
	DB	00H
	DW	03084H
	DW	010b4H
	ORG $+6
	DB	0adH
	DB	00H
	DW	03084H
	DW	010b4H
	DW	01001H
	ORG $+4
	DB	0adH
	DB	00H
	DW	03084H
	DW	010b4H
	DW	01161H
	ORG $+4
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	049H
	DB	00H
	DW	030b4H
	DW	01084H
	ORG $+6
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	077H
	DB	00H
	DW	020b4H
	DW	01097H
	ORG $+6
	DB	0fH
	DB	00H
	DW	03084H
	DW	010b4H
	ORG $+6
	DB	06aH
	DB	00H
	DW	020b4H
	DW	01097H
	ORG $+6
	DB	06cH
	DB	00H
	DW	020b4H
	DW	01097H
	ORG $+6
	DB	07dH
	DB	00H
	DW	020b4H
	DW	01081H
	ORG $+6
	DB	07dH
	DB	00H
	DW	020b4H
	DW	01083H
	ORG $+6
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	0a5H
	DW	03084H
	DW	01001H
	ORG $+6
	DB	0eH
	DB	00H
	DW	03084H
	DW	010b4H
	ORG $+6
	DB	0bH
	DB	00H
	DW	020b4H
	DW	01084H
	ORG $+6
	DB	0cH
	DB	00H
	DW	020b4H
	DW	01084H
	ORG $+6
	DB	07cH
	DB	00H
	DW	020b4H
	DW	01081H
	ORG $+6
	DB	07cH
	DB	00H
	DW	020b4H
	DW	01083H
	ORG $+6
	ORG $+768
_aaidGroup DB	06H
	DB	07H
	DW	03081H
	DW	01001H
	ORG $+6
	DB	082H
	DB	060H
	DW	03081H
	DW	01001H
	ORG $+6
	DB	05H
	DB	05H
	DW	03081H
	DW	01001H
	ORG $+6
	DB	096H
	DB	07eH
	DW	03081H
	DW	01001H
	ORG $+6
	DB	07H
	DB	09H
	DW	03081H
	DW	01001H
	ORG $+6
	DB	0b8H
	DB	08cH
	DW	03081H
	DW	01001H
	ORG $+6
	DB	0bfH
	DB	094H
	DW	03081H
	DW	01001H
	ORG $+6
	DB	018H
	DB	015H
	DW	01081H
	DW	01001H
	ORG $+6
	DB	06H
	DB	08H
	DW	03084H
	DW	01004H
	ORG $+6
	DB	082H
	DB	061H
	DW	03084H
	DW	01004H
	ORG $+6
	DB	05H
	DB	06H
	DW	03084H
	DW	01004H
	ORG $+6
	DB	096H
	DB	07fH
	DW	03084H
	DW	01004H
	ORG $+6
	DB	07H
	DB	0aH
	DW	03084H
	DW	01004H
	ORG $+6
	DB	0b8H
	DB	08dH
	DW	03084H
	DW	01004H
	ORG $+6
	DB	0bfH
	DB	095H
	DW	03084H
	DW	01004H
	ORG $+6
	DB	018H
	DB	018H
	DW	01084H
	DW	01004H
	ORG $+6
	DB	06H
	DB	08H
	DW	03084H
	DW	01002H
	ORG $+6
	DB	082H
	DB	061H
	DW	03084H
	DW	01002H
	ORG $+6
	DB	05H
	DB	06H
	DW	03084H
	DW	01002H
	ORG $+6
	DB	096H
	DB	07fH
	DW	03084H
	DW	01002H
	ORG $+6
	DB	07H
	DB	0aH
	DW	03084H
	DW	01002H
	ORG $+6
	DB	0b8H
	DB	08dH
	DW	03084H
	DW	01002H
	ORG $+6
	DB	0bfH
	DB	095H
	DW	03084H
	DW	01002H
	ORG $+6
	DB	018H
	DB	018H
	DW	01084H
	DW	01002H
	ORG $+6
	DB	092H
	DB	077H
	DW	0b081H
	DW	01001H
	ORG $+6
	DB	093H
	DB	079H
	DW	0b081H
	DW	01001H
	ORG $+6
	DB	08cH
	DB	06dH
	DW	0b081H
	DW	01001H
	ORG $+6
	DB	08dH
	DB	06fH
	DW	0b081H
	DW	01001H
	ORG $+6
	DB	0aaH
	DB	082H
	DW	0b081H
	DW	01001H
	ORG $+6
	DB	0acH
	DB	084H
	DW	0b081H
	DW	01001H
	ORG $+6
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	095H
	DB	07cH
	DW	0b081H
	DW	01001H
	ORG $+6
	DB	092H
	DB	078H
	DW	0b084H
	DW	01001H
	ORG $+6
	DB	093H
	DB	07aH
	DW	0b084H
	DW	01001H
	ORG $+6
	DB	08cH
	DB	06eH
	DW	0b084H
	DW	01001H
	ORG $+6
	DB	08dH
	DB	070H
	DW	0b084H
	DW	01001H
	ORG $+6
	DB	0aaH
	DB	083H
	DW	0b084H
	DW	01001H
	ORG $+6
	DB	0acH
	DB	085H
	DW	0b084H
	DW	01001H
	ORG $+6
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	095H
	DB	07dH
	DW	0b084H
	DW	01001H
	ORG $+6
	DB	092H
	DB	077H
	DW	03081H
	DW	01011H
	ORG $+6
	DB	093H
	DB	079H
	DW	03081H
	DW	01011H
	ORG $+6
	DB	08cH
	DB	06dH
	DW	03081H
	DW	01011H
	ORG $+6
	DB	08dH
	DB	06fH
	DW	03081H
	DW	01011H
	ORG $+6
	DB	0aaH
	DB	082H
	DW	03081H
	DW	01011H
	ORG $+6
	DB	0acH
	DB	084H
	DW	03081H
	DW	01011H
	ORG $+6
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	095H
	DB	07cH
	DW	03081H
	DW	01011H
	ORG $+6
	DB	092H
	DB	078H
	DW	03084H
	DW	01011H
	ORG $+6
	DB	093H
	DB	07aH
	DW	03084H
	DW	01011H
	ORG $+6
	DB	08cH
	DB	06eH
	DW	03084H
	DW	01011H
	ORG $+6
	DB	08dH
	DB	070H
	DW	03084H
	DW	01011H
	ORG $+6
	DB	0aaH
	DB	083H
	DW	03084H
	DW	01011H
	ORG $+6
	DB	0acH
	DB	085H
	DW	03084H
	DW	01011H
	ORG $+6
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	095H
	DB	07dH
	DW	03084H
	DW	01011H
	ORG $+6
	DB	092H
	DB	077H
	DW	03081H
	DW	01161H
	ORG $+6
	DB	093H
	DB	079H
	DW	03081H
	DW	01161H
	ORG $+6
	DB	08cH
	DB	06dH
	DW	03081H
	DW	01161H
	ORG $+6
	DB	08dH
	DB	06fH
	DW	03081H
	DW	01161H
	ORG $+6
	DB	0aaH
	DB	082H
	DW	03081H
	DW	01161H
	ORG $+6
	DB	0acH
	DB	084H
	DW	03081H
	DW	01161H
	ORG $+6
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	095H
	DB	07cH
	DW	03081H
	DW	01161H
	ORG $+6
	DB	092H
	DB	078H
	DW	03084H
	DW	01161H
	ORG $+6
	DB	093H
	DB	07aH
	DW	03084H
	DW	01161H
	ORG $+6
	DB	08cH
	DB	06eH
	DW	03084H
	DW	01161H
	ORG $+6
	DB	08dH
	DB	070H
	DW	03084H
	DW	01161H
	ORG $+6
	DB	0aaH
	DB	083H
	DW	03084H
	DW	01161H
	ORG $+6
	DB	0acH
	DB	085H
	DW	03084H
	DW	01161H
	ORG $+6
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	095H
	DB	07dH
	DW	03084H
	DW	01161H
	ORG $+6
	DB	0b9H
	DB	08eH
	DW	01081H
	DW	01001H
	ORG $+6
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	081H
	DB	05eH
	DW	03081H
	DW	00H
	ORG $+6
	DB	07fH
	DB	05bH
	DW	03081H
	DW	00H
	ORG $+6
	DB	07eH
	DB	059H
	DW	01081H
	DW	00H
	ORG $+6
	DB	049H
	DB	02bH
	DW	03081H
	DW	00H
	ORG $+6
	DB	020H
	DB	01fH
	DW	01081H
	DW	00H
	ORG $+6
	DB	048H
	DB	029H
	DW	03081H
	DW	00H
	ORG $+6
	DB	0b9H
	DB	08fH
	DW	01084H
	DW	01004H
	ORG $+6
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	081H
	DB	05fH
	DW	03084H
	DW	00H
	ORG $+6
	DB	07fH
	DB	05cH
	DW	03084H
	DW	00H
	ORG $+6
	DB	07eH
	DB	05aH
	DW	01084H
	DW	00H
	ORG $+6
	DB	049H
	DB	02cH
	DW	03084H
	DW	00H
	ORG $+6
	DB	020H
	DB	020H
	DW	01084H
	DW	00H
	ORG $+6
	DB	048H
	DB	02aH
	DW	03084H
	DW	00H
	ORG $+6
	DB	04bH
	DB	02eH
	DW	03081H
	DW	00H
	ORG $+6
	DB	01fH
	DB	01dH
	DW	03081H
	DW	00H
	ORG $+6
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	04bH
	DB	02fH
	DW	03084H
	DW	00H
	ORG $+6
	DB	01fH
	DB	01eH
	DW	03084H
	DW	00H
	ORG $+6
	DB	011H
	DB	0eH
	DW	01084H
	DW	00H
	ORG $+6
	DB	011H
	DB	0fH
	DW	01097H
	DW	00H
	ORG $+6
	DB	059H
	DB	03eH
	DW	01084H
	DW	00H
	ORG $+6
	DB	059H
	DB	03fH
	DW	01097H
	DW	00H
	ORG $+6
	DB	089H
	DB	06aH
	DW	01084H
	DW	00H
	ORG $+6
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	0afH
	DB	00H
	DW	02083H
	DW	00H
	ORG $+6
	DB	0b7H
	DB	00H
	DW	02083H
	DW	00H
	ORG $+6
	DB	06eH
	DB	00H
	DW	01083H
	DW	00H
	ORG $+6
	DB	078H
	DB	00H
	DW	01083H
	DW	00H
	ORG $+6
	DB	0baH
	DB	00H
	DW	01083H
	DW	00H
	ORG $+6
	DB	0bbH
	DB	00H
	DW	01083H
	DW	00H
	ORG $+6
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	0a9H
	DB	00H
	DW	02098H
	DW	00H
	ORG $+6
	DB	0aeH
	DB	00H
	DW	02098H
	DW	00H
	ORG $+6
	DB	06bH
	DB	00H
	DW	01098H
	DW	00H
	ORG $+6
	DB	06dH
	DB	00H
	DW	01098H
	DW	00H
	ORG $+6
	DB	0b0H
	DB	00H
	DW	02083H
	DW	00H
	ORG $+6
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	06fH
	DB	00H
	DW	01083H
	DW	00H
	ORG $+6
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	00H
	DB	00H
	DW	00H
	ORG $+8
	DB	0dH
	DB	00H
	DW	01084H
	DW	01001H
	ORG $+6
	DB	010H
	DB	00H
	DW	03084H
	DW	01001H
	ORG $+6
	DB	0fH
	DB	00H
	DW	03084H
	DW	01001H
	ORG $+6
	DB	0eH
	DB	00H
	DW	03084H
	DW	01001H
	ORG $+6
_abTypeSize DB	00H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	04H
	DB	04H
	DB	04H
	DB	06H
	ORG $+7
$SG984	DB	'Divide', 00H
	ORG $+1
$SG985	DB	'Trace', 00H
	ORG $+2
$SG986	DB	'NMI', 00H
$SG987	DB	'Breakpoint', 00H
	ORG $+1
$SG988	DB	'Overflow', 00H
	ORG $+3
$SG989	DB	'Bounds', 00H
	ORG $+1
$SG990	DB	'Invalid opcode', 00H
	ORG $+1
$SG991	DB	'No coprocessor', 00H
	ORG $+1
$SG992	DB	'Double fault', 00H
	ORG $+3
$SG993	DB	'TSS', 00H
$SG994	DB	'Segment', 00H
$SG995	DB	'Stack', 00H
	ORG $+2
$SG996	DB	'General protection', 00H
	ORG $+1
$SG997	DB	'Page', 00H
	ORG $+3
$SG998	DB	'Coprocessor', 00H
$SG999	DB	'Timer', 00H
	ORG $+2
$SG1000	DB	'Keyboard', 00H
	ORG $+7
_apszIDTDesc DD	FLAT:$SG984
	DD	FLAT:$SG985
	DD	FLAT:$SG986
	DD	FLAT:$SG987
	DD	FLAT:$SG988
	DD	FLAT:$SG989
	DD	FLAT:$SG990
	DD	FLAT:$SG991
	DD	FLAT:$SG992
	DD	00H
	DD	FLAT:$SG993
	DD	FLAT:$SG994
	DD	FLAT:$SG995
	DD	FLAT:$SG996
	DD	FLAT:$SG997
	DD	00H
	DD	FLAT:$SG998
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG999
	DD	FLAT:$SG1000
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_?szTrapMsg@?1??x86DispTrapRange@@9@9$S1639 DB '     %04x trapped', 0aH, 00H
	ORG $+5
_?szTrapMsg2@?1??x86DispTrapRange@@9@9$S1641 DB '%04x-%04x trapped', 0aH, 00H
	ORG $+5
_?abTransferOp@?1??x86StepSize@@9@9$S1653 DB 070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	0c2H
	DB	0c3H
	DB	0caH
	DB	0cbH
	DB	0cfH
	DB	0e3H
	DB	0e9H
	DB	0eaH
	DB	0ebH
_DATA	ENDS
PUBLIC	_x86FindBP
PUBLIC	_x86SetBP
PUBLIC	_x86Trap
PUBLIC	_x86Debug
_TEXT	SEGMENT
; File x86debug.c
_pesf$ = 8
_flDebug$ = 12
_iNum$ = 16
_x86Trap PROC NEAR
; Line 976
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 981
	and	DWORD PTR _flTrace, -9			; fffffff7H
; Line 985
	test	BYTE PTR _flDebug$[ebp+2], 1
	je	$L1005
; Line 986
	push	DWORD PTR _iNum$[ebp]
	push	0
	push	4864					; 00001300H
	push	DWORD PTR _pesf$[ebp]
	call	_x86FindBP
	add	esp, 16					; 00000010H
	or	eax, eax
	jne	$L1006
; Line 987
	jmp	$L1004
; Line 988
$L1006:
; Line 997
$L1005:
	mov	eax, DWORD PTR _pesf$[ebp]
	cmp	DWORD PTR [eax+92], 3
	jne	$L1007
; Line 998
	mov	eax, DWORD PTR _pesf$[ebp]
	dec	DWORD PTR [eax+100]
; Line 999
	or	DWORD PTR _flTrace, 8
; Line 1001
$L1007:
	test	BYTE PTR _flDebug$[ebp+2], 2
	je	$L1008
; Line 1002
	or	DWORD PTR _flTrace, 8
; Line 1004
$L1008:
	mov	eax, DWORD PTR _pesf$[ebp]
	cmp	DWORD PTR [eax+92], 1
	jne	$L1009
; Line 1005
	test	BYTE PTR _flTrace, 1
	jne	$L1010
; Line 1006
	jmp	$L1004
; Line 1007
$L1010:
	or	DWORD PTR _flTrace, 8
; Line 1016
$L1009:
	cmp	DWORD PTR _pbpdTempDisable, 0
	je	$L1011
; Line 1017
	push	DWORD PTR _pbpdTempDisable
	push	DWORD PTR _pesf$[ebp]
	call	_x86SetBP
	add	esp, 8
; Line 1018
	mov	DWORD PTR _pbpdTempDisable, 0
; Line 1019
	mov	eax, DWORD PTR _pesf$[ebp]
	cmp	DWORD PTR [eax+92], 1
	jne	$L1012
; Line 1020
	mov	eax, DWORD PTR _pesf$[ebp]
	and	DWORD PTR [eax+108], -257		; fffffeffH
; Line 1021
	test	BYTE PTR _flTrace, 1
	jne	$L1013
; Line 1022
	jmp	$L1004
; Line 1023
$L1013:
; Line 1024
$L1012:
; Line 1029
$L1011:
	test	BYTE PTR _flTrace, 8
	jne	$L1014
; Line 1030
	and	DWORD PTR _flTrace, -65			; ffffffbfH
; Line 1031
	or	DWORD PTR _flTrace, 32			; 00000020H
; Line 1034
$L1014:
	mov	eax, DWORD PTR _flDebug$[ebp]
	or	eax, 2
	push	eax
	push	DWORD PTR _pesf$[ebp]
	call	_x86Debug
	add	esp, 8
; Line 1035
$L1004:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86Trap ENDP
_TEXT	ENDS
PUBLIC	_x86LoadFrame
PUBLIC	_x86SelDesc
_TEXT	SEGMENT
_pesf$ = 8
_i$ = -8
_pdes$ = -4
_x86LoadFrame PROC NEAR
; Line 1039
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
; Line 1046
	mov	edx, DWORD PTR _pesf$[ebp]
; Line 1047
	and	DWORD PTR [edx+104], 65535		; 0000ffffH
; Line 1048
	mov	eax, DWORD PTR [edx+56]
; Line 1049
	and	eax, 65535				; 0000ffffH
; Line 1050
	mov	DWORD PTR [edx+48], eax
; Line 1051
	mov	eax, DWORD PTR [edx+52]
; Line 1052
	and	eax, 65535				; 0000ffffH
; Line 1053
	mov	DWORD PTR [edx+44], eax
; Line 1054
	mov	ax, fs
; Line 1055
	mov	DWORD PTR [edx+40], eax
; Line 1056
	mov	ax, gs
; Line 1057
	mov	DWORD PTR [edx+36], eax
; Line 1058
	mov	ax, ss
; Line 1059
	mov	DWORD PTR [edx+32], eax
; Line 1060
	mov	eax, cr2
; Line 1061
	mov	DWORD PTR [edx+24], eax
; Line 1062
	mov	eax, cr3
; Line 1063
	mov	DWORD PTR [edx+20], eax
; Line 1069
	mov	eax, DWORD PTR _pesf$[ebp]
	add	DWORD PTR [eax+72], 20			; 00000014H
; Line 1070
	mov	eax, DWORD PTR _pesf$[ebp]
	test	BYTE PTR [eax+110], 2
	jne	$L1020
	mov	eax, DWORD PTR _pesf$[ebp]
	test	BYTE PTR [eax+104], 3
	je	$L1019
$L1020:
; Line 1071
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+116]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+32], eax
; Line 1072
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+72], eax
; Line 1075
$L1019:
	mov	DWORD PTR _i$[ebp], 0
	jmp	$L1021
$L1022:
	inc	DWORD PTR _i$[ebp]
$L1021:
	cmp	DWORD PTR _i$[ebp], 6
	jae	$L1023
; Line 1079
	mov	eax, DWORD PTR _pesf$[ebp]
	test	BYTE PTR [eax+110], 2
	je	$L1024
; Line 1081
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _aoffSel[eax*8+4]
	mov	ecx, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+ecx]
	or	eax, 65536				; 00010000H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _aoffSel[ecx*8]
	mov	edx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+edx], eax
; Line 1082
	jmp	$L1022
; Line 1087
$L1024:
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _aoffSel[eax*8]
	mov	ecx, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+ecx]
	call	_x86SelDesc
	add	esp, 4
	mov	DWORD PTR _pdes$[ebp], eax
	cmp	DWORD PTR _pdes$[ebp], 0
	je	$L1025
; Line 1088
	mov	eax, DWORD PTR _pdes$[ebp]
	movzx	eax, BYTE PTR [eax+6]
	test	al, 64					; 00000040H
	je	$L1026
; Line 1089
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _aoffSel[eax*8]
	mov	ecx, DWORD PTR _pesf$[ebp]
	or	DWORD PTR [eax+ecx], 131072		; 00020000H
; Line 1090
$L1026:
$L1025:
	jmp	$L1022
$L1023:
; Line 1091
$L1016:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86LoadFrame ENDP
_TEXT	ENDS
PUBLIC	_x86SaveFrame
_TEXT	SEGMENT
_pesf$ = 8
_x86SaveFrame PROC NEAR
; Line 1095
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 1096
	mov	eax, DWORD PTR _pesf$[ebp]
	test	BYTE PTR [eax+110], 2
	je	$L1029
; Line 1097
	mov	eax, DWORD PTR _pesf$[ebp]
	and	DWORD PTR [eax+104], -65537		; fffeffffH
; Line 1098
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+48]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+124], eax
; Line 1099
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+44]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+120], eax
; Line 1100
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+40]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+128], eax
; Line 1101
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+36]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+132], eax
; Line 1102
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+32]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+116], eax
; Line 1103
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+112], eax
; Line 1105
	jmp	$L1030
$L1029:
; Line 1107
	mov	edx, DWORD PTR _pesf$[ebp]
; Line 1108
	mov	eax, DWORD PTR [edx+48]
; Line 1109
	mov	DWORD PTR [edx+56], eax
; Line 1110
	mov	eax, DWORD PTR [edx+44]
; Line 1111
	mov	DWORD PTR [edx+52], eax
; Line 1112
	mov	eax, DWORD PTR [edx+40]
; Line 1113
	mov	fs, ax
; Line 1114
	mov	eax, DWORD PTR [edx+36]
; Line 1115
	mov	gs, ax
; Line 1125
	test	DWORD PTR [edx+104], 3
; Line 1126
	je	$Ring0$1031
; Line 1127
	mov	eax, DWORD PTR [edx+32]
; Line 1128
	mov	DWORD PTR [edx+116], eax
; Line 1129
	mov	eax, DWORD PTR [edx+72]
; Line 1130
	mov	DWORD PTR [edx+112], eax
; Line 1131
$Ring0$1031:
; Line 1133
$L1030:
; Line 1147
$L1028:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86SaveFrame ENDP
_TEXT	ENDS
PUBLIC	_x86AddrType
_TEXT	SEGMENT
_sel$ = 8
_fPrompt$ = 12
_x86AddrType PROC NEAR
; Line 1151
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 1152
	test	BYTE PTR _sel$[ebp+2], 1
	je	$L1035
; Line 1153
	cmp	DWORD PTR _fPrompt$[ebp], 0
	je	$L1036
; Line 1154
	mov	al, 45					; 0000002dH
	jmp	$L1034
; Line 1155
	jmp	$L1037
$L1036:
; Line 1156
	mov	al, 38					; 00000026H
	jmp	$L1034
$L1037:
; Line 1158
$L1035:
	test	BYTE PTR _sel$[ebp+2], 2
	je	$L1038
; Line 1159
	cmp	DWORD PTR _fPrompt$[ebp], 0
	je	$L1039
; Line 1160
	mov	al, 35					; 00000023H
	jmp	$L1034
; Line 1161
	jmp	$L1040
$L1039:
; Line 1162
	mov	al, 37					; 00000025H
	jmp	$L1034
$L1040:
; Line 1164
$L1038:
	mov	al, 35					; 00000023H
	jmp	$L1034
; Line 1165
$L1034:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86AddrType ENDP
_TEXT	ENDS
EXTRN	_dtrGDT:FWORD
EXTRN	_pGDT:DWORD
_TEXT	SEGMENT
_sel$ = 8
_x86SelDesc PROC NEAR
; Line 1169
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 1173
	test	BYTE PTR _sel$[ebp+2], 1
	je	$L1043
; Line 1174
	mov	eax, OFFSET FLAT:_desV86
	jmp	$L1042
; Line 1178
$L1043:
	movzx	eax, WORD PTR _sel$[ebp]
	mov	DWORD PTR _sel$[ebp], eax
; Line 1180
	cmp	DWORD PTR _sel$[ebp], 0
	jne	$L1044
; Line 1181
	sub	eax, eax
	jmp	$L1042
; Line 1183
$L1044:
	test	BYTE PTR _sel$[ebp], 4
	je	$L1045
; Line 1184
	sub	eax, eax
	jmp	$L1042
; Line 1186
$L1045:
	mov	eax, DWORD PTR _sel$[ebp]
	and	eax, 65528				; 0000fff8H
	movzx	ecx, WORD PTR _dtrGDT
	cmp	eax, ecx
	jle	$L1046
; Line 1187
	sub	eax, eax
	jmp	$L1042
; Line 1191
$L1046:
	mov	eax, DWORD PTR _sel$[ebp]
	and	eax, -8					; fffffff8H
	imul	eax, 1
	add	eax, DWORD PTR _pGDT
	jmp	$L1042
; Line 1192
$L1042:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86SelDesc ENDP
_TEXT	ENDS
PUBLIC	_x86IsGate
_TEXT	SEGMENT
_pdes$ = 8
_iType$ = -4
_x86IsGate PROC NEAR
; Line 1196
	push	ebp
	mov	ebp, esp
	sub	esp, 4
	push	ebx
	push	esi
	push	edi
; Line 1199
	mov	eax, DWORD PTR _pdes$[ebp]
	movzx	eax, BYTE PTR [eax+5]
	test	al, 16					; 00000010H
	jne	$L1050
; Line 1200
	mov	eax, DWORD PTR _pdes$[ebp]
	movzx	eax, BYTE PTR [eax+5]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _iType$[ebp], eax
; Line 1202
	cmp	DWORD PTR _iType$[ebp], 4
	jl	$L1053
	cmp	DWORD PTR _iType$[ebp], 7
	jle	$L1052
$L1053:
	cmp	DWORD PTR _iType$[ebp], 12		; 0000000cH
	jl	$L1051
$L1052:
; Line 1204
	mov	eax, 1
	jmp	$L1048
; Line 1206
$L1051:
; Line 1207
$L1050:
	sub	eax, eax
	jmp	$L1048
; Line 1208
$L1048:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86IsGate ENDP
_TEXT	ENDS
PUBLIC	_x86DescBase
_TEXT	SEGMENT
_pdes$ = 8
_x86DescBase PROC NEAR
; Line 1212
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 1213
	push	DWORD PTR _pdes$[ebp]
	call	_x86IsGate
	add	esp, 4
	or	eax, eax
	je	$L1056
; Line 1214
	mov	eax, DWORD PTR _pdes$[ebp]
	movzx	eax, WORD PTR [eax+6]
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pdes$[ebp]
	movzx	ecx, WORD PTR [ecx]
	add	eax, ecx
	jmp	$L1055
; Line 1216
$L1056:
	mov	eax, DWORD PTR _pdes$[ebp]
	movzx	eax, BYTE PTR [eax+4]
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pdes$[ebp]
	movzx	ecx, BYTE PTR [ecx+7]
	shl	ecx, 24					; 00000018H
	add	eax, ecx
	mov	ecx, DWORD PTR _pdes$[ebp]
	movzx	ecx, WORD PTR [ecx+2]
	add	eax, ecx
	jmp	$L1055
; Line 1217
$L1055:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86DescBase ENDP
_TEXT	ENDS
PUBLIC	_x86DescSize
_TEXT	SEGMENT
_pdes$ = 8
_dwLimit$ = -4
_x86DescSize PROC NEAR
; Line 1224
	push	ebp
	mov	ebp, esp
	sub	esp, 4
	push	ebx
	push	esi
	push	edi
; Line 1227
	cmp	DWORD PTR _pdes$[ebp], 0
	jne	$L1060
; Line 1228
	sub	eax, eax
	jmp	$L1058
; Line 1230
$L1060:
	push	DWORD PTR _pdes$[ebp]
	call	_x86IsGate
	add	esp, 4
	or	eax, eax
	je	$L1061
; Line 1231
	sub	eax, eax
	jmp	$L1058
; Line 1233
$L1061:
	mov	eax, DWORD PTR _pdes$[ebp]
	movzx	eax, BYTE PTR [eax+6]
	and	eax, 15					; 0000000fH
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pdes$[ebp]
	movzx	ecx, WORD PTR [ecx]
	add	eax, ecx
	mov	DWORD PTR _dwLimit$[ebp], eax
; Line 1234
	mov	eax, DWORD PTR _pdes$[ebp]
	movzx	eax, BYTE PTR [eax+6]
	test	al, 128					; 00000080H
	je	$L1062
; Line 1241
	mov	eax, DWORD PTR _dwLimit$[ebp]
	shl	eax, 12					; 0000000cH
	add	eax, 4094				; 00000ffeH
	mov	DWORD PTR _dwLimit$[ebp], eax
; Line 1243
$L1062:
	mov	eax, DWORD PTR _dwLimit$[ebp]
	inc	eax
	jmp	$L1058
; Line 1244
$L1058:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86DescSize ENDP
_TEXT	ENDS
PUBLIC	_x86RegValue
_TEXT	SEGMENT
_pesf$ = 8
_iReg$ = 12
_x86RegValue PROC NEAR
; Line 1248
	push	ebp
	mov	ebp, esp
	sub	esp, 4
	push	ebx
	push	esi
	push	edi
; Line 1249
	mov	eax, DWORD PTR _iReg$[ebp]
	imul	eax, 6
	movzx	eax, BYTE PTR _ardRegs[eax+5]
	mov	DWORD PTR -4+[ebp], eax
	jmp	$L1066
; Line 1250
$L1070:
; Line 1251
	mov	eax, DWORD PTR _iReg$[ebp]
	imul	eax, 6
	movzx	eax, BYTE PTR _ardRegs[eax+4]
	mov	ecx, DWORD PTR _pesf$[ebp]
	movzx	eax, BYTE PTR [eax+ecx]
	jmp	$L1065
; Line 1252
$L1071:
; Line 1254
	mov	eax, DWORD PTR _iReg$[ebp]
	imul	eax, 6
	movzx	eax, BYTE PTR _ardRegs[eax+4]
	mov	ecx, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+ecx]
	jmp	$L1065
; Line 1255
$L1072:
; Line 1256
	mov	eax, DWORD PTR _iReg$[ebp]
	imul	eax, 6
	movzx	eax, BYTE PTR _ardRegs[eax+4]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	$L1065
; Line 1257
	jmp	$L1067
$L1066:
	cmp	DWORD PTR -4+[ebp], 1
	je	$L1070
	cmp	DWORD PTR -4+[ebp], 2
	jl	$L1067
	cmp	DWORD PTR -4+[ebp], 3
	jle	$L1071
	cmp	DWORD PTR -4+[ebp], 4
	je	$L1072
	jmp	$L1067
$L1067:
; Line 1258
	sub	eax, eax
	jmp	$L1065
; Line 1259
$L1065:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86RegValue ENDP
_TEXT	ENDS
PUBLIC	_x86GetByte
EXTRN	_sel_Flat:WORD
_TEXT	SEGMENT
_sel$ = 8
_off$ = 12
_x86GetByte PROC NEAR
; Line 1263
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 1264
	push	DWORD PTR _sel$[ebp]
	call	_x86SelDesc
	add	esp, 4
	push	eax
	call	_x86DescSize
	add	esp, 4
	cmp	eax, DWORD PTR _off$[ebp]
	ja	$L1076
; Line 1265
	mov	al, 238					; 000000eeH
	jmp	$L1075
; Line 1267
$L1076:
	test	BYTE PTR _sel$[ebp+2], 1
	je	$L1077
; Line 1268
	movzx	eax, WORD PTR _sel$[ebp]
	shl	eax, 4
	add	DWORD PTR _off$[ebp], eax
; Line 1269
	movzx	eax, WORD PTR _sel_Flat
	mov	DWORD PTR _sel$[ebp], eax
; Line 1272
$L1077:
; Line 1273
	push	es
; Line 1274
	mov	es, WORD PTR _sel$[ebp]
; Line 1275
	mov	edx, DWORD PTR _off$[ebp]
; Line 1276
	movzx	eax, BYTE PTR es:[edx]
; Line 1277
	pop	es
; Line 1279
$L1075:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86GetByte ENDP
_TEXT	ENDS
PUBLIC	_x86GetWord
_TEXT	SEGMENT
_sel$ = 8
_off$ = 12
_x86GetWord PROC NEAR
; Line 1283
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 1284
	mov	eax, DWORD PTR _off$[ebp]
	inc	eax
	push	eax
	push	DWORD PTR _sel$[ebp]
	call	_x86GetByte
	add	esp, 8
	movzx	ebx, al
	shl	ebx, 8
	push	DWORD PTR _off$[ebp]
	push	DWORD PTR _sel$[ebp]
	call	_x86GetByte
	add	esp, 8
	movzx	eax, al
	or	ebx, eax
	mov	ax, bx
	jmp	$L1080
; Line 1285
$L1080:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86GetWord ENDP
_TEXT	ENDS
PUBLIC	_x86GetDWord
_TEXT	SEGMENT
_sel$ = 8
_off$ = 12
_x86GetDWord PROC NEAR
; Line 1289
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 1290
	mov	eax, DWORD PTR _off$[ebp]
	add	eax, 2
	push	eax
	push	DWORD PTR _sel$[ebp]
	call	_x86GetWord
	add	esp, 8
	movzx	ebx, ax
	shl	ebx, 16					; 00000010H
	push	DWORD PTR _off$[ebp]
	push	DWORD PTR _sel$[ebp]
	call	_x86GetWord
	add	esp, 8
	movzx	eax, ax
	or	ebx, eax
	mov	eax, ebx
	jmp	$L1083
; Line 1291
$L1083:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86GetDWord ENDP
_TEXT	ENDS
PUBLIC	_x86GetBytes
_TEXT	SEGMENT
_i$ = -4
_sel$ = 8
_off$ = 12
_n$ = 16
_p$ = 20
_x86GetBytes PROC NEAR
; Line 1295
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
; Line 1296
	mov	DWORD PTR _i$[ebp], 0
; Line 1298
$L1091:
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR -8+[ebp], eax
	dec	DWORD PTR _n$[ebp]
	cmp	DWORD PTR -8+[ebp], 0
	jle	$L1092
; Line 1299
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR -12+[ebp], eax
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _off$[ebp]
	add	eax, DWORD PTR -12+[ebp]
	push	eax
	push	DWORD PTR _sel$[ebp]
	call	_x86GetByte
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	inc	DWORD PTR _p$[ebp]
	jmp	$L1091
$L1092:
; Line 1301
	mov	eax, DWORD PTR _i$[ebp]
	jmp	$L1088
; Line 1302
$L1088:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86GetBytes ENDP
_TEXT	ENDS
PUBLIC	_x86SetByte
_TEXT	SEGMENT
_sel$ = 8
_off$ = 12
_b$ = 16
_TypeSave$ = -8
_pdes$ = -4
_x86SetByte PROC NEAR
; Line 1306
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
; Line 1307
	mov	DWORD PTR _TypeSave$[ebp], -1
; Line 1310
	push	DWORD PTR _sel$[ebp]
	call	_x86SelDesc
	add	esp, 4
	mov	DWORD PTR _pdes$[ebp], eax
; Line 1311
	push	DWORD PTR _pdes$[ebp]
	call	_x86DescSize
	add	esp, 4
	cmp	eax, DWORD PTR _off$[ebp]
	ja	$L1099
; Line 1312
	jmp	$L1096
; Line 1314
$L1099:
	test	BYTE PTR _sel$[ebp+2], 1
	je	$L1100
; Line 1315
	movzx	eax, WORD PTR _sel$[ebp]
	shl	eax, 4
	add	DWORD PTR _off$[ebp], eax
; Line 1316
	movzx	eax, WORD PTR _sel_Flat
	mov	DWORD PTR _sel$[ebp], eax
; Line 1318
$L1100:
; Line 1319
	push	es
; Line 1320
	mov	es, WORD PTR _sel$[ebp]
; Line 1321
	mov	edx, DWORD PTR _off$[ebp]
; Line 1322
	mov	al, BYTE PTR _b$[ebp]
; Line 1323
	mov	BYTE PTR es:[edx], al
; Line 1324
	pop	es
; Line 1326
$L1096:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86SetByte ENDP
_TEXT	ENDS
PUBLIC	_x86SetWord
_TEXT	SEGMENT
_sel$ = 8
_off$ = 12
_w$ = 16
_x86SetWord PROC NEAR
; Line 1330
	push	ebp
	mov	ebp, esp
	sub	esp, 4
	push	ebx
	push	esi
	push	edi
; Line 1331
	mov	eax, DWORD PTR _off$[ebp]
	mov	DWORD PTR -4+[ebp], eax
	inc	DWORD PTR _off$[ebp]
	push	DWORD PTR _w$[ebp]
	push	DWORD PTR -4+[ebp]
	push	DWORD PTR _sel$[ebp]
	call	_x86SetByte
	add	esp, 12					; 0000000cH
; Line 1332
	movzx	eax, WORD PTR _w$[ebp]
	sar	eax, 8
	push	eax
	push	DWORD PTR _off$[ebp]
	push	DWORD PTR _sel$[ebp]
	call	_x86SetByte
	add	esp, 12					; 0000000cH
; Line 1333
$L1104:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86SetWord ENDP
_TEXT	ENDS
PUBLIC	_x86TrapDump
EXTRN	_printf:NEAR
_DATA	SEGMENT
	ORG $+3
$SG1113	DB	00H
	ORG $+3
$SG1115	DB	'VMM ', 00H
	ORG $+3
$SG1116	DB	'exception', 00H
	ORG $+2
$SG1118	DB	'interrupt', 00H
	ORG $+2
$SG1119	DB	'Unknown', 00H
$SG1122	DB	'%s%s %s (%X)', 00H
	ORG $+3
$SG1124	DB	' - %08x', 00H
$SG1125	DB	0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_pesf$ = 8
_flDebug$ = 12
_iTrap$ = -4
_pszTrapType$ = -8
_pszTrapDesc$ = -12
_pszSource$ = -16
_x86TrapDump PROC NEAR
; Line 1337
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
; Line 1343
	test	BYTE PTR _flDebug$[ebp], 2
	jne	$L1112
; Line 1344
	jmp	$L1107
; Line 1346
$L1112:
	mov	DWORD PTR _pszSource$[ebp], OFFSET FLAT:$SG1113
; Line 1347
	test	BYTE PTR _flDebug$[ebp], 8
	je	$L1114
; Line 1348
	mov	DWORD PTR _pszSource$[ebp], OFFSET FLAT:$SG1115
; Line 1350
$L1114:
	mov	DWORD PTR _pszTrapType$[ebp], OFFSET FLAT:$SG1116
; Line 1351
	mov	eax, DWORD PTR _pesf$[ebp]
	cmp	DWORD PTR [eax+92], 32			; 00000020H
	jb	$L1117
; Line 1352
	mov	DWORD PTR _pszTrapType$[ebp], OFFSET FLAT:$SG1118
; Line 1354
$L1117:
	mov	DWORD PTR _pszTrapDesc$[ebp], OFFSET FLAT:$SG1119
; Line 1355
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+92]
	mov	DWORD PTR _iTrap$[ebp], eax
; Line 1356
	cmp	DWORD PTR _iTrap$[ebp], 32		; 00000020H
	jl	$L1120
; Line 1358
$L1120:
	cmp	DWORD PTR _iTrap$[ebp], 48		; 00000030H
	jae	$L1121
	mov	eax, DWORD PTR _iTrap$[ebp]
	cmp	DWORD PTR _apszIDTDesc[eax*4], 0
	je	$L1121
; Line 1359
	mov	eax, DWORD PTR _iTrap$[ebp]
	mov	eax, DWORD PTR _apszIDTDesc[eax*4]
	mov	DWORD PTR _pszTrapDesc$[ebp], eax
; Line 1361
$L1121:
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+92]
	push	DWORD PTR _pszTrapType$[ebp]
	push	DWORD PTR _pszTrapDesc$[ebp]
	push	DWORD PTR _pszSource$[ebp]
	push	OFFSET FLAT:$SG1122
	call	_printf
	add	esp, 20					; 00000014H
; Line 1363
	mov	eax, DWORD PTR _pesf$[ebp]
	cmp	DWORD PTR [eax+92], 10			; 0000000aH
	jb	$L1123
	mov	eax, DWORD PTR _pesf$[ebp]
	cmp	DWORD PTR [eax+92], 14			; 0000000eH
	ja	$L1123
; Line 1364
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+96]
	push	OFFSET FLAT:$SG1124
	call	_printf
	add	esp, 8
; Line 1366
$L1123:
	push	OFFSET FLAT:$SG1125
	call	_printf
	add	esp, 4
; Line 1367
$L1107:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86TrapDump ENDP
_TEXT	ENDS
PUBLIC	_x86RegDump
_DATA	SEGMENT
	ORG $+2
$SG1130	DB	'nv', 00H
	ORG $+1
$SG1131	DB	'OV', 00H
	ORG $+1
$SG1132	DB	'up', 00H
	ORG $+1
$SG1133	DB	'DN', 00H
	ORG $+1
$SG1134	DB	'di', 00H
	ORG $+1
$SG1135	DB	'EI', 00H
	ORG $+1
$SG1136	DB	'pl', 00H
	ORG $+1
$SG1137	DB	'NG', 00H
	ORG $+1
$SG1138	DB	'nz', 00H
	ORG $+1
$SG1139	DB	'ZR', 00H
	ORG $+1
$SG1140	DB	'na', 00H
	ORG $+1
$SG1141	DB	'AC', 00H
	ORG $+1
$SG1142	DB	'po', 00H
	ORG $+1
$SG1143	DB	'PE', 00H
	ORG $+1
$SG1144	DB	'nc', 00H
	ORG $+1
$SG1145	DB	'CY', 00H
	ORG $+5
_?apszFlags@?1??x86RegDump@@9@9$S1129 DD FLAT:$SG1130
	DD	FLAT:$SG1131
	DD	FLAT:$SG1132
	DD	FLAT:$SG1133
	DD	FLAT:$SG1134
	DD	FLAT:$SG1135
	DD	FLAT:$SG1136
	DD	FLAT:$SG1137
	DD	FLAT:$SG1138
	DD	FLAT:$SG1139
	DD	FLAT:$SG1140
	DD	FLAT:$SG1141
	DD	FLAT:$SG1142
	DD	FLAT:$SG1143
	DD	FLAT:$SG1144
	DD	FLAT:$SG1145
$SG1146	DB	'eax=%08x ebx=%08x ecx=%08x edx=%08x cr2=%08x  mm=%02x sm'
	DB	'=%02x', 0aH, 00H
	ORG $+1
$SG1147	DB	'ebp=%08x esp=%08x esi=%08x edi=%08x  ', 00H
	ORG $+2
$SG1148	DB	'%s %s %s %s %s %s %s %s', 0aH, 00H
	ORG $+3
$SG1149	DB	'eip=%08x cs=%04x ss=%04x  ds=%04x es=%04x  fs=%04x gs=%0'
	DB	'4x  flgs=%08x', 0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_pesf$ = 8
_x86RegDump PROC NEAR
; Line 1371
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 1383
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+16]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	push	eax
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+16]
	and	eax, 255				; 000000ffH
	push	eax
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+24]
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+80]
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+84]
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+76]
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+88]
	push	OFFSET FLAT:$SG1146
	call	_printf
	add	esp, 32					; 00000020H
; Line 1389
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+60]
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+64]
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+72]
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+68]
	push	OFFSET FLAT:$SG1147
	call	_printf
	add	esp, 20					; 00000014H
; Line 1399
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+108]
	and	eax, 1
	cmp	eax, 1
	sbb	eax, eax
	push	DWORD PTR _?apszFlags@?1??x86RegDump@@9@9$S1129[eax*4+60]
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+108]
	and	eax, 4
	cmp	eax, 1
	sbb	eax, eax
	push	DWORD PTR _?apszFlags@?1??x86RegDump@@9@9$S1129[eax*4+52]
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+108]
	and	eax, 16					; 00000010H
	cmp	eax, 1
	sbb	eax, eax
	push	DWORD PTR _?apszFlags@?1??x86RegDump@@9@9$S1129[eax*4+44]
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+108]
	and	eax, 64					; 00000040H
	cmp	eax, 1
	sbb	eax, eax
	push	DWORD PTR _?apszFlags@?1??x86RegDump@@9@9$S1129[eax*4+36]
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+108]
	and	eax, 128				; 00000080H
	cmp	eax, 1
	sbb	eax, eax
	push	DWORD PTR _?apszFlags@?1??x86RegDump@@9@9$S1129[eax*4+28]
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+108]
	and	eax, 512				; 00000200H
	cmp	eax, 1
	sbb	eax, eax
	push	DWORD PTR _?apszFlags@?1??x86RegDump@@9@9$S1129[eax*4+20]
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+108]
	and	eax, 1024				; 00000400H
	cmp	eax, 1
	sbb	eax, eax
	push	DWORD PTR _?apszFlags@?1??x86RegDump@@9@9$S1129[eax*4+12]
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+108]
	and	eax, 2048				; 00000800H
	cmp	eax, 1
	sbb	eax, eax
	push	DWORD PTR _?apszFlags@?1??x86RegDump@@9@9$S1129[eax*4+4]
	push	OFFSET FLAT:$SG1148
	call	_printf
	add	esp, 36					; 00000024H
; Line 1408
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+108]
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+36]
	push	eax
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+40]
	push	eax
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+44]
	push	eax
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+48]
	push	eax
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+32]
	push	eax
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+104]
	push	eax
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+100]
	push	OFFSET FLAT:$SG1149
	call	_printf
	add	esp, 36					; 00000024H
; Line 1409
$L1127:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86RegDump ENDP
_TEXT	ENDS
PUBLIC	_x86InsDump
PUBLIC	_x86Decode
EXTRN	_sel_Text:WORD
_DATA	SEGMENT
	ORG $+1
$SG1161	DB	'%%%08x ', 00H
$SG1163	DB	'%04x:%08x ', 00H
	ORG $+1
$SG1167	DB	'%02x', 00H
	ORG $+3
$SG1171	DB	' ', 00H
	ORG $+2
$SG1175	DB	' ', 00H
	ORG $+2
$SG1176	DB	'%s', 0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_off$ = 16
_i$ = -12
_cb$ = -176
_cbPrint$ = -8
_cbAdj$ = -4
_szIns$ = -172
_szData$ = -92
_pesf$ = 8
_selCode$ = 12
_x86InsDump PROC NEAR
; Line 1413
	push	ebp
	mov	ebp, esp
	sub	esp, 188				; 000000bcH
	push	ebx
	push	esi
	push	edi
; Line 1417
	push	0
	push	0
	lea	eax, DWORD PTR _szData$[ebp]
	push	eax
	lea	eax, DWORD PTR _szIns$[ebp]
	push	eax
	push	DWORD PTR _off$[ebp]
	push	DWORD PTR _selCode$[ebp]
	push	DWORD PTR _pesf$[ebp]
	call	_x86Decode
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _cb$[ebp], eax
; Line 1419
	mov	DWORD PTR _cbAdj$[ebp], 0
; Line 1420
	movzx	eax, WORD PTR _sel_Text
	movzx	ecx, WORD PTR _selCode$[ebp]
	cmp	eax, ecx
	jne	$L1160
; Line 1421
	mov	DWORD PTR _cbAdj$[ebp], 4
; Line 1422
	push	DWORD PTR _off$[ebp]
	push	OFFSET FLAT:$SG1161
	call	_printf
	add	esp, 8
	mov	DWORD PTR _cbPrint$[ebp], eax
; Line 1423
	jmp	$L1162
$L1160:
; Line 1424
	push	DWORD PTR _off$[ebp]
	movzx	eax, WORD PTR _selCode$[ebp]
	push	eax
	push	OFFSET FLAT:$SG1163
	call	_printf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cbPrint$[ebp], eax
$L1162:
; Line 1428
	mov	DWORD PTR _i$[ebp], 0
	jmp	$L1164
$L1165:
	inc	DWORD PTR _i$[ebp]
	add	DWORD PTR _cbPrint$[ebp], 2
$L1164:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _cb$[ebp], eax
	jle	$L1166
	mov	eax, 28					; 0000001cH
	sub	eax, DWORD PTR _cbAdj$[ebp]
	cmp	eax, DWORD PTR _cbPrint$[ebp]
	jle	$L1166
; Line 1429
	mov	eax, DWORD PTR _off$[ebp]
	mov	DWORD PTR -180+[ebp], eax
	inc	DWORD PTR _off$[ebp]
	push	DWORD PTR -180+[ebp]
	push	DWORD PTR _selCode$[ebp]
	call	_x86GetByte
	add	esp, 8
	movzx	eax, al
	push	eax
	push	OFFSET FLAT:$SG1167
	call	_printf
	add	esp, 8
	jmp	$L1165
$L1166:
; Line 1431
$L1169:
	mov	eax, DWORD PTR _cbPrint$[ebp]
	mov	DWORD PTR -184+[ebp], eax
	inc	DWORD PTR _cbPrint$[ebp]
	mov	eax, 30					; 0000001eH
	sub	eax, DWORD PTR _cbAdj$[ebp]
	cmp	eax, DWORD PTR -184+[ebp]
	jle	$L1170
; Line 1432
	push	OFFSET FLAT:$SG1171
	call	_printf
	add	esp, 4
	jmp	$L1169
$L1170:
; Line 1434
	lea	eax, DWORD PTR _szIns$[ebp]
	push	eax
	call	_printf
	add	esp, 4
	add	DWORD PTR _cbPrint$[ebp], eax
; Line 1436
$L1173:
	mov	eax, DWORD PTR _cbPrint$[ebp]
	mov	DWORD PTR -188+[ebp], eax
	inc	DWORD PTR _cbPrint$[ebp]
	mov	eax, 60					; 0000003cH
	sub	eax, DWORD PTR _cbAdj$[ebp]
	cmp	eax, DWORD PTR -188+[ebp]
	jle	$L1174
; Line 1437
	push	OFFSET FLAT:$SG1175
	call	_printf
	add	esp, 4
	jmp	$L1173
$L1174:
; Line 1439
	lea	eax, DWORD PTR _szData$[ebp]
	push	eax
	push	OFFSET FLAT:$SG1176
	call	_printf
	add	esp, 8
; Line 1443
	mov	eax, DWORD PTR _selCode$[ebp]
	mov	DWORD PTR _selCodeLast, eax
; Line 1444
	mov	eax, DWORD PTR _off$[ebp]
	mov	DWORD PTR _offCodeLast, eax
; Line 1446
	mov	eax, DWORD PTR _cb$[ebp]
	jmp	$L1153
; Line 1447
$L1153:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86InsDump ENDP
_TEXT	ENDS
PUBLIC	_x86DescDump
EXTRN	_flKeyEvent:DWORD
_DATA	SEGMENT
$SG1187	DB	' ', 00H
	ORG $+2
$SG1191	DB	'%s %04x: sel:offset=%04x:%08x', 0aH, 00H
	ORG $+1
$SG1193	DB	'32-bit', 00H
	ORG $+1
$SG1194	DB	'16-bit', 00H
	ORG $+1
$SG1195	DB	'%s %04x: base=%08x limit=%08x (%s)', 0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_pdesTbl$ = 8
_pdtr$ = 12
_pszTbl$ = 16
_pchCmd$ = 20
_sel$ = 24
_x86DescDump PROC NEAR
; Line 1451
	push	ebp
	mov	ebp, esp
	sub	esp, 4
	push	ebx
	push	esi
	push	edi
; Line 1454
	mov	eax, DWORD PTR _pchCmd$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	eax, eax
	jne	$L1183
; Line 1455
	mov	DWORD PTR _sel$[ebp], 0
; Line 1456
	and	DWORD PTR _flKeyEvent, -3		; fffffffdH
; Line 1457
$L1185:
	mov	eax, DWORD PTR _sel$[ebp]
	mov	DWORD PTR -4+[ebp], eax
	inc	DWORD PTR _sel$[ebp]
	mov	eax, DWORD PTR -4+[ebp]
	shl	eax, 3
	push	eax
	push	OFFSET FLAT:$SG1187
	push	DWORD PTR _pszTbl$[ebp]
	push	DWORD PTR _pdtr$[ebp]
	push	DWORD PTR _pdesTbl$[ebp]
	call	_x86DescDump
	add	esp, 20					; 00000014H
	or	eax, eax
	je	$L1186
; Line 1458
	test	BYTE PTR _flKeyEvent, 2
	je	$L1188
; Line 1459
	jmp	$L1186
; Line 1460
$L1188:
	jmp	$L1185
$L1186:
	mov	eax, 1
	jmp	$L1182
; Line 1463
$L1183:
	mov	eax, DWORD PTR _pdtr$[ebp]
	movzx	eax, WORD PTR [eax]
	mov	ecx, DWORD PTR _sel$[ebp]
	and	ecx, 65528				; 0000fff8H
	cmp	eax, ecx
	jge	$L1189
; Line 1464
	sub	eax, eax
	jmp	$L1182
; Line 1466
$L1189:
	mov	eax, DWORD PTR _sel$[ebp]
	and	eax, -8					; fffffff8H
	add	DWORD PTR _pdesTbl$[ebp], eax
; Line 1467
	push	DWORD PTR _pdesTbl$[ebp]
	call	_x86IsGate
	add	esp, 4
	or	eax, eax
	je	$L1190
; Line 1470
	push	DWORD PTR _pdesTbl$[ebp]
	call	_x86DescBase
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _pdesTbl$[ebp]
	movzx	eax, WORD PTR [eax+2]
	push	eax
	mov	eax, DWORD PTR _sel$[ebp]
	shr	eax, 3
	push	eax
	push	DWORD PTR _pszTbl$[ebp]
	push	OFFSET FLAT:$SG1191
	call	_printf
	add	esp, 20					; 00000014H
; Line 1471
	jmp	$L1192
$L1190:
; Line 1475
	mov	eax, OFFSET FLAT:$SG1193
	mov	ecx, DWORD PTR _pdesTbl$[ebp]
	movzx	ecx, BYTE PTR [ecx+6]
	test	cl, 64					; 00000040H
	jne	$L2081
	mov	eax, OFFSET FLAT:$SG1194
$L2081:
	push	eax
	push	DWORD PTR _pdesTbl$[ebp]
	call	_x86DescSize
	add	esp, 4
	dec	eax
	push	eax
	push	DWORD PTR _pdesTbl$[ebp]
	call	_x86DescBase
	add	esp, 4
	push	eax
	push	DWORD PTR _sel$[ebp]
	push	DWORD PTR _pszTbl$[ebp]
	push	OFFSET FLAT:$SG1195
	call	_printf
	add	esp, 24					; 00000018H
; Line 1476
$L1192:
; Line 1477
	mov	eax, 1
	jmp	$L1182
; Line 1478
$L1182:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86DescDump ENDP
_TEXT	ENDS
PUBLIC	_x86MemDump
_DATA	SEGMENT
$SG1207	DB	'%04x:%08x ', 00H
	ORG $+1
$SG1212	DB	'  %c %c%02x%02x%02x%02x     %02x%02x%02x%02x', 00H
	ORG $+3
$SG1218	DB	' %c %02x%02x  %02x%02x  %02x%02x  %02x%02x', 00H
	ORG $+1
$SG1223	DB	'%c%02x %02x %02x %02x %02x %02x %02x %02x', 00H
	ORG $+2
$SG1229	DB	' %s', 0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_sel$ = 8
_off$ = 12
_fSize$ = 16
_cLines$ = 20
_i$ = -8
_j$ = -4
_abTmp$ = -28
_x86MemDump PROC NEAR
; Line 1482
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	push	edi
; Line 1486
	and	DWORD PTR _flKeyEvent, -3		; fffffffdH
; Line 1487
	mov	DWORD PTR _i$[ebp], 0
	jmp	$L1204
$L1205:
	inc	DWORD PTR _i$[ebp]
$L1204:
	mov	eax, DWORD PTR _cLines$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jge	$L1206
; Line 1488
	lea	eax, DWORD PTR _abTmp$[ebp]
	push	eax
	push	16					; 00000010H
	push	DWORD PTR _off$[ebp]
	push	DWORD PTR _sel$[ebp]
	call	_x86GetBytes
	add	esp, 16					; 00000010H
; Line 1489
	push	DWORD PTR _off$[ebp]
	movzx	eax, WORD PTR _sel$[ebp]
	push	eax
	push	OFFSET FLAT:$SG1207
	call	_printf
	add	esp, 12					; 0000000cH
; Line 1490
	cmp	DWORD PTR _fSize$[ebp], 4
	jne	$L1208
; Line 1491
	mov	DWORD PTR _j$[ebp], 0
	jmp	$L1209
$L1210:
	add	DWORD PTR _j$[ebp], 8
$L1209:
	cmp	DWORD PTR _j$[ebp], 16			; 00000010H
	jge	$L1211
; Line 1496
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+4]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+5]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+6]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+7]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+1]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+2]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+3]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 8
	cmp	eax, 1
	sbb	eax, eax
	and	eax, 24					; 00000018H
	add	eax, 8
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 8
	cmp	eax, 1
	sbb	eax, eax
	and	eax, 37					; 00000025H
	add	eax, 8
	push	eax
	push	OFFSET FLAT:$SG1212
	call	_printf
	add	esp, 44					; 0000002cH
; Line 1497
	jmp	$L1210
$L1211:
; Line 1499
	jmp	$L1213
$L1208:
	cmp	DWORD PTR _fSize$[ebp], 2
	jne	$L1214
; Line 1500
	mov	DWORD PTR _j$[ebp], 0
	jmp	$L1215
$L1216:
	add	DWORD PTR _j$[ebp], 8
$L1215:
	cmp	DWORD PTR _j$[ebp], 16			; 00000010H
	jge	$L1217
; Line 1504
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+6]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+7]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+4]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+5]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+2]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+3]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+1]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 8
	cmp	eax, 1
	sbb	eax, eax
	and	eax, 37					; 00000025H
	add	eax, 8
	push	eax
	push	OFFSET FLAT:$SG1218
	call	_printf
	add	esp, 40					; 00000028H
; Line 1505
	jmp	$L1216
$L1217:
; Line 1507
	jmp	$L1219
$L1214:
; Line 1508
	mov	DWORD PTR _j$[ebp], 0
	jmp	$L1220
$L1221:
	add	DWORD PTR _j$[ebp], 8
$L1220:
	cmp	DWORD PTR _j$[ebp], 16			; 00000010H
	jge	$L1222
; Line 1512
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+7]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+6]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+5]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+4]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+3]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+2]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax+1]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax]
	push	eax
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 8
	cmp	eax, 1
	sbb	eax, eax
	and	eax, 13					; 0000000dH
	add	eax, 32					; 00000020H
	push	eax
	push	OFFSET FLAT:$SG1223
	call	_printf
	add	esp, 40					; 00000028H
; Line 1513
	jmp	$L1221
$L1222:
; Line 1514
$L1219:
$L1213:
; Line 1515
	mov	DWORD PTR _j$[ebp], 0
	jmp	$L1224
$L1225:
	inc	DWORD PTR _j$[ebp]
$L1224:
	cmp	DWORD PTR _j$[ebp], 16			; 00000010H
	jge	$L1226
; Line 1516
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax]
	cmp	eax, 32					; 00000020H
	jl	$L1228
	mov	eax, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR _abTmp$[ebp+eax]
	cmp	eax, 127				; 0000007fH
	jl	$L1227
$L1228:
; Line 1517
	mov	eax, DWORD PTR _j$[ebp]
	mov	BYTE PTR _abTmp$[ebp+eax], 46		; 0000002eH
; Line 1518
$L1227:
	jmp	$L1225
$L1226:
; Line 1519
	mov	BYTE PTR _abTmp$[ebp+16], 0
; Line 1520
	lea	eax, DWORD PTR _abTmp$[ebp]
	push	eax
	push	OFFSET FLAT:$SG1229
	call	_printf
	add	esp, 8
; Line 1521
	add	DWORD PTR _off$[ebp], 16		; 00000010H
; Line 1522
	test	BYTE PTR _flKeyEvent, 2
	je	$L1230
; Line 1523
	jmp	$L1206
; Line 1524
$L1230:
	jmp	$L1205
$L1206:
; Line 1528
	mov	eax, DWORD PTR _sel$[ebp]
	mov	DWORD PTR _selDataLast, eax
; Line 1529
	mov	eax, DWORD PTR _off$[ebp]
	mov	DWORD PTR _offDataLast, eax
; Line 1530
$L1200:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86MemDump ENDP
_TEXT	ENDS
PUBLIC	_x86StackDump
EXTRN	_dwtosz:NEAR
_DATA	SEGMENT
	ORG $+3
$SG1243	DB	'%04x:%08x  %08x  ', 00H
	ORG $+2
$SG1245	DB	'%s', 00H
	ORG $+1
$SG1246	DB	0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_sel$ = 12
_off$ = 16
_cLines$ = 20
_i$ = -40
_dw$ = -4
_fSymbol$ = -44
_szSymbol$ = -36
_x86StackDump PROC NEAR
; Line 1534
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	ebx
	push	esi
	push	edi
; Line 1540
	and	DWORD PTR _flKeyEvent, -3		; fffffffdH
; Line 1541
	mov	DWORD PTR _i$[ebp], 0
	jmp	$L1240
$L1241:
	inc	DWORD PTR _i$[ebp]
$L1240:
	mov	eax, DWORD PTR _cLines$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jge	$L1242
; Line 1542
	push	DWORD PTR _off$[ebp]
	push	DWORD PTR _sel$[ebp]
	call	_x86GetDWord
	add	esp, 8
	mov	DWORD PTR _dw$[ebp], eax
; Line 1543
	push	DWORD PTR _dw$[ebp]
	push	DWORD PTR _off$[ebp]
	movzx	eax, WORD PTR _sel$[ebp]
	push	eax
	push	OFFSET FLAT:$SG1243
	call	_printf
	add	esp, 16					; 00000010H
; Line 1544
	mov	DWORD PTR _fSymbol$[ebp], 0
; Line 1545
	push	8
	push	16					; 00000010H
	push	DWORD PTR _dw$[ebp]
	lea	eax, DWORD PTR _szSymbol$[ebp]
	push	eax
	call	_dwtosz
	add	esp, 16					; 00000010H
; Line 1546
	cmp	DWORD PTR _fSymbol$[ebp], 0
	je	$L1244
; Line 1547
	lea	eax, DWORD PTR _szSymbol$[ebp]
	push	eax
	push	OFFSET FLAT:$SG1245
	call	_printf
	add	esp, 8
; Line 1548
$L1244:
	push	OFFSET FLAT:$SG1246
	call	_printf
	add	esp, 4
; Line 1549
	add	DWORD PTR _off$[ebp], 4
; Line 1550
	test	BYTE PTR _flKeyEvent, 2
	je	$L1247
; Line 1551
	jmp	$L1242
; Line 1552
$L1247:
	jmp	$L1241
$L1242:
; Line 1556
	mov	eax, DWORD PTR _sel$[ebp]
	mov	DWORD PTR _selDataLast, eax
; Line 1557
	mov	eax, DWORD PTR _off$[ebp]
	mov	DWORD PTR _offDataLast, eax
; Line 1558
$L1235:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86StackDump ENDP
_TEXT	ENDS
PUBLIC	_x86DecodeOperand
PUBLIC	_x86CopyOperand
EXTRN	_nstrcpy:NEAR
EXTRN	_nstrcpyn:NEAR
EXTRN	_nstrlen:NEAR
_DATA	SEGMENT
	ORG $+2
$SG1292	DB	'      ', 00H
_DATA	ENDS
_TEXT	SEGMENT
_wType$1302 = -64
_pesf$ = 8
_selCode$ = 12
_off$ = 16
_pszIns$ = 20
_pszData$ = 24
_pbOp$ = 28
_pbModRM$ = 32
_bOp$ = -4
_bOp2$ = -52
_bModRM$ = -44
_cIns$ = -28
_cData$ = -56
_i$ = -36
_iFun$ = -48
_fModRM$ = -12
_pid$ = -60
_pwType$ = -40
_iSegPrefix$ = -24
_pdw$ = -20
_dw$ = -8
_offCur$ = -32
_offSave$ = -16
_x86Decode PROC NEAR
; Line 1563
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
; Line 1569
	mov	DWORD PTR _iSegPrefix$[ebp], -1
; Line 1573
	mov	DWORD PTR _cIns$[ebp], 0
; Line 1574
	mov	eax, DWORD PTR _off$[ebp]
	mov	DWORD PTR _offCur$[ebp], eax
; Line 1576
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 1577
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1578
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1580
$Refetch$1271:
; Line 1581
	push	DWORD PTR _offCur$[ebp]
	push	DWORD PTR _selCode$[ebp]
	call	_x86GetByte
	add	esp, 8
	mov	BYTE PTR _bOp$[ebp], al
; Line 1582
	inc	DWORD PTR _offCur$[ebp]
; Line 1583
	push	DWORD PTR _offCur$[ebp]
	push	DWORD PTR _selCode$[ebp]
	call	_x86GetByte
	add	esp, 8
	mov	BYTE PTR _bOp2$[ebp], al
; Line 1584
	movzx	eax, BYTE PTR _bOp$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, OFFSET FLAT:_aidBase
	mov	DWORD PTR _pid$[ebp], eax
; Line 1586
	movzx	eax, BYTE PTR _bOp$[ebp]
	cmp	eax, 15					; 0000000fH
	jne	$L1272
; Line 1587
	inc	DWORD PTR _offCur$[ebp]
; Line 1588
	mov	al, BYTE PTR _bOp2$[ebp]
	mov	BYTE PTR _bOp$[ebp], al
; Line 1594
	movzx	eax, BYTE PTR _bOp$[ebp]
	cmp	eax, 256				; 00000100H
	jb	$L1273
; Line 1595
	mov	BYTE PTR _bOp$[ebp], 15			; 0000000fH
; Line 1596
$L1273:
	movzx	eax, BYTE PTR _bOp$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, OFFSET FLAT:_aid0F
	mov	DWORD PTR _pid$[ebp], eax
; Line 1598
$L1272:
	mov	eax, DWORD PTR _pid$[ebp]
	movzx	eax, BYTE PTR [eax+1]
	mov	DWORD PTR _iFun$[ebp], eax
; Line 1600
	mov	DWORD PTR _fModRM$[ebp], 0
; Line 1601
	cmp	DWORD PTR _iFun$[ebp], 150		; 00000096H
	jl	$L1274
; Line 1602
	inc	DWORD PTR _fModRM$[ebp]
; Line 1603
	mov	eax, DWORD PTR _offCur$[ebp]
	mov	DWORD PTR -68+[ebp], eax
	inc	DWORD PTR _offCur$[ebp]
	push	DWORD PTR -68+[ebp]
	push	DWORD PTR _selCode$[ebp]
	call	_x86GetByte
	add	esp, 8
	mov	BYTE PTR _bModRM$[ebp], al
; Line 1604
	movzx	eax, BYTE PTR _bModRM$[ebp]
	and	eax, 56					; 00000038H
	shr	eax, 3
	mov	DWORD PTR _i$[ebp], eax
; Line 1605
	mov	eax, DWORD PTR _iFun$[ebp]
	sub	eax, 150				; 00000096H
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	add	eax, ecx
	add	eax, OFFSET FLAT:_aaidGroup
	mov	DWORD PTR _pid$[ebp], eax
; Line 1606
	mov	eax, DWORD PTR _pid$[ebp]
	movzx	eax, BYTE PTR [eax+1]
	mov	DWORD PTR _iFun$[ebp], eax
; Line 1609
$L1274:
	mov	eax, DWORD PTR _pid$[ebp]
	movzx	eax, WORD PTR [eax+2]
	and	al, 31					; 0000001fH
	cmp	al, 16					; 00000010H
	jne	$L1275
; Line 1615
	mov	eax, DWORD PTR _pid$[ebp]
	movzx	eax, WORD PTR [eax+2]
	and	eax, 65504				; 0000ffe0H
	mov	ecx, DWORD PTR _pesf$[ebp]
	or	DWORD PTR [ecx+12], eax
; Line 1617
	movzx	eax, BYTE PTR _bOp$[ebp]
	mov	DWORD PTR -80+[ebp], eax
	jmp	$L1276
; Line 1618
$L1280:
; Line 1619
	mov	DWORD PTR _iSegPrefix$[ebp], 0
; Line 1620
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+44]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1621
	jmp	$L1277
; Line 1622
$L1281:
; Line 1623
	mov	DWORD PTR _iSegPrefix$[ebp], 1
; Line 1624
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+104]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1625
	jmp	$L1277
; Line 1626
$L1282:
; Line 1627
	mov	DWORD PTR _iSegPrefix$[ebp], 2
; Line 1628
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1629
	jmp	$L1277
; Line 1630
$L1283:
; Line 1631
	mov	DWORD PTR _iSegPrefix$[ebp], 3
; Line 1632
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1633
	jmp	$L1277
; Line 1634
$L1284:
; Line 1635
	mov	DWORD PTR _iSegPrefix$[ebp], 4
; Line 1636
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1637
	jmp	$L1277
; Line 1638
$L1285:
; Line 1639
	mov	DWORD PTR _iSegPrefix$[ebp], 5
; Line 1640
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1641
	jmp	$L1277
; Line 1642
$L1286:
; Line 1644
	jmp	$L1277
; Line 1645
$L1287:
; Line 1646
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1288
; Line 1647
	mov	eax, DWORD PTR _pid$[ebp]
	movzx	eax, BYTE PTR [eax]
	push	DWORD PTR _apszMnemonic[eax*4]
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
	mov	DWORD PTR _i$[ebp], eax
; Line 1648
	mov	eax, DWORD PTR _i$[ebp]
	add	DWORD PTR _pszIns$[ebp], eax
; Line 1649
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 32			; 00000020H
	inc	DWORD PTR _pszIns$[ebp]
; Line 1650
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 0
; Line 1651
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	add	DWORD PTR _cIns$[ebp], eax
; Line 1653
$L1288:
	jmp	$L1277
; Line 1654
	jmp	$L1277
$L1276:
	cmp	DWORD PTR -80+[ebp], 62			; 0000003eH
	jg	$L2082
	je	$L1283
	cmp	DWORD PTR -80+[ebp], 38			; 00000026H
	je	$L1280
	cmp	DWORD PTR -80+[ebp], 46			; 0000002eH
	je	$L1281
	cmp	DWORD PTR -80+[ebp], 54			; 00000036H
	je	$L1282
	jmp	$L1287
$L2082:
	cmp	DWORD PTR -80+[ebp], 100		; 00000064H
	je	$L1284
	cmp	DWORD PTR -80+[ebp], 101		; 00000065H
	je	$L1285
	cmp	DWORD PTR -80+[ebp], 102		; 00000066H
	jl	$L1287
	cmp	DWORD PTR -80+[ebp], 103		; 00000067H
	jle	$L1277
	jmp	$L1287
$L1277:
; Line 1655
	jmp	$Refetch$1271
; Line 1657
$L1275:
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1289
; Line 1658
	mov	eax, DWORD PTR _pid$[ebp]
	movzx	eax, BYTE PTR [eax]
	mov	DWORD PTR _i$[ebp], eax
; Line 1659
	mov	eax, DWORD PTR _pid$[ebp]
	movzx	eax, BYTE PTR [eax]
	cmp	eax, 83					; 00000053H
	jne	$L1290
; Line 1660
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+12]
	and	eax, 2048				; 00000800H
	cmp	eax, 1
	sbb	eax, eax
	inc	eax
	mov	ecx, DWORD PTR _selCode$[ebp]
	and	ecx, 131072				; 00020000H
	cmp	ecx, 1
	sbb	ecx, ecx
	neg	ecx
	cmp	eax, ecx
	jne	$L1291
; Line 1661
	mov	DWORD PTR _i$[ebp], 84			; 00000054H
; Line 1662
$L1291:
$L1290:
	mov	eax, DWORD PTR _i$[ebp]
	push	DWORD PTR _apszMnemonic[eax*4]
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
	mov	DWORD PTR _i$[ebp], eax
; Line 1663
	mov	eax, DWORD PTR _i$[ebp]
	add	DWORD PTR _pszIns$[ebp], eax
; Line 1664
	mov	eax, DWORD PTR _i$[ebp]
	add	DWORD PTR _cIns$[ebp], eax
; Line 1665
	mov	eax, 8
	sub	eax, DWORD PTR _cIns$[ebp]
	cmp	eax, 1
	jg	$L2083
	mov	eax, 1
$L2083:
	push	eax
	push	OFFSET FLAT:$SG1292
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpyn
	add	esp, 12					; 0000000cH
	add	DWORD PTR _pszIns$[ebp], eax
; Line 1667
$L1289:
	cmp	DWORD PTR _pszData$[ebp], 0
	je	$L1293
; Line 1668
	mov	eax, DWORD PTR _pszData$[ebp]
	mov	BYTE PTR [eax], 0
; Line 1670
$L1293:
	cmp	DWORD PTR _iFun$[ebp], 3
	je	$L1295
	cmp	DWORD PTR _iFun$[ebp], 2
	jne	$L1294
$L1295:
; Line 1671
	inc	DWORD PTR _offCur$[ebp]
; Line 1674
$L1294:
; Line 1675
	mov	eax, DWORD PTR _pid$[ebp]
	movzx	eax, WORD PTR [eax+2]
	and	al, 240					; 000000f0H
	cmp	al, 128					; 00000080H
	jae	$L1297
	mov	eax, DWORD PTR _pid$[ebp]
	movzx	eax, WORD PTR [eax+4]
	and	al, 240					; 000000f0H
	cmp	al, 128					; 00000080H
	jb	$L1296
$L1297:
; Line 1676
	mov	eax, DWORD PTR _fModRM$[ebp]
	mov	DWORD PTR -72+[ebp], eax
	inc	DWORD PTR _fModRM$[ebp]
	cmp	DWORD PTR -72+[ebp], 0
	jne	$L1298
; Line 1677
	mov	eax, DWORD PTR _offCur$[ebp]
	mov	DWORD PTR -76+[ebp], eax
	inc	DWORD PTR _offCur$[ebp]
	push	DWORD PTR -76+[ebp]
	push	DWORD PTR _selCode$[ebp]
	call	_x86GetByte
	add	esp, 8
	mov	BYTE PTR _bModRM$[ebp], al
; Line 1678
$L1298:
; Line 1680
$L1296:
	mov	DWORD PTR _cData$[ebp], 0
	mov	eax, DWORD PTR _cData$[ebp]
	mov	DWORD PTR _cIns$[ebp], eax
; Line 1681
	mov	eax, DWORD PTR _pid$[ebp]
	add	eax, 2
	mov	DWORD PTR _pwType$[ebp], eax
; Line 1683
$L1300:
	mov	eax, DWORD PTR _pid$[ebp]
	add	eax, 6
	cmp	eax, DWORD PTR _pwType$[ebp]
	jb	$L1301
; Line 1685
	mov	eax, DWORD PTR _pwType$[ebp]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR _wType$1302[ebp], ax
	add	DWORD PTR _pwType$[ebp], 2
; Line 1687
	movzx	eax, WORD PTR _wType$1302[ebp]
	test	al, 15					; 0000000fH
	je	$L1303
; Line 1688
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1304
	cmp	DWORD PTR _cIns$[ebp], 0
	je	$L1304
; Line 1689
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 44			; 0000002cH
	inc	DWORD PTR _pszIns$[ebp]
; Line 1690
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 0
; Line 1692
$L1304:
	mov	eax, DWORD PTR _offCur$[ebp]
	mov	DWORD PTR _offSave$[ebp], eax
; Line 1694
	push	DWORD PTR _pszIns$[ebp]
	lea	eax, DWORD PTR _offCur$[ebp]
	push	eax
	push	DWORD PTR _selCode$[ebp]
	push	DWORD PTR _pesf$[ebp]
	lea	eax, DWORD PTR _iSegPrefix$[ebp]
	push	eax
	push	DWORD PTR _bModRM$[ebp]
	push	DWORD PTR _wType$1302[ebp]
	call	_x86DecodeOperand
	add	esp, 28					; 0000001cH
	or	eax, eax
	jne	$L1305
; Line 1695
	jmp	$Exit$1306
; Line 1697
$L1305:
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1307
; Line 1698
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrlen
	add	esp, 4
	add	DWORD PTR _pszIns$[ebp], eax
; Line 1699
$L1307:
	cmp	DWORD PTR _pszData$[ebp], 0
	je	$L1308
; Line 1700
	lea	eax, DWORD PTR _dw$[ebp]
	mov	DWORD PTR _pdw$[ebp], eax
; Line 1701
	lea	eax, DWORD PTR _pdw$[ebp]
	push	eax
	lea	eax, DWORD PTR _i$[ebp]
	push	eax
	push	DWORD PTR _offSave$[ebp]
	push	DWORD PTR _selCode$[ebp]
	push	DWORD PTR _pesf$[ebp]
	push	DWORD PTR _bModRM$[ebp]
	push	DWORD PTR _wType$1302[ebp]
	call	_x86CopyOperand
	add	esp, 28					; 0000001cH
	cmp	eax, 1
	jne	$L1309
; Line 1702
	cmp	DWORD PTR _cData$[ebp], 0
	jne	$L1310
; Line 1703
	mov	eax, DWORD PTR _pszData$[ebp]
	mov	BYTE PTR [eax], 40			; 00000028H
	inc	DWORD PTR _pszData$[ebp]
; Line 1704
	jmp	$L1311
$L1310:
; Line 1705
	mov	eax, DWORD PTR _pszData$[ebp]
	mov	BYTE PTR [eax], 44			; 0000002cH
	inc	DWORD PTR _pszData$[ebp]
$L1311:
; Line 1706
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR -84+[ebp], eax
	jmp	$L1312
; Line 1707
$L1316:
; Line 1708
	mov	eax, DWORD PTR _pdw$[ebp]
	movzx	eax, BYTE PTR [eax]
	mov	DWORD PTR _dw$[ebp], eax
; Line 1709
	movzx	eax, WORD PTR _wType$1302[ebp]
	test	al, 240					; 000000f0H
	jne	$L1317
; Line 1710
	mov	eax, DWORD PTR _pszData$[ebp]
	mov	BYTE PTR [eax], 39			; 00000027H
	inc	DWORD PTR _pszData$[ebp]
; Line 1711
	mov	al, BYTE PTR _dw$[ebp]
	mov	ecx, DWORD PTR _pszData$[ebp]
	mov	BYTE PTR [ecx], al
	inc	DWORD PTR _pszData$[ebp]
; Line 1712
	mov	eax, DWORD PTR _pszData$[ebp]
	mov	BYTE PTR [eax], 39			; 00000027H
	inc	DWORD PTR _pszData$[ebp]
; Line 1713
	jmp	$FinishOp$1318
; Line 1715
$L1317:
	jmp	$L1313
; Line 1716
$L1319:
; Line 1717
	mov	eax, DWORD PTR _pdw$[ebp]
	movzx	eax, WORD PTR [eax]
	mov	DWORD PTR _dw$[ebp], eax
; Line 1718
	jmp	$L1313
; Line 1719
$L1320:
; Line 1723
	mov	eax, DWORD PTR _pdw$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _dw$[ebp], eax
; Line 1724
	jmp	$L1313
; Line 1725
	jmp	$L1313
$L1312:
	cmp	DWORD PTR -84+[ebp], 1
	je	$L1316
	cmp	DWORD PTR -84+[ebp], 2
	je	$L1319
	jmp	$L1320
$L1313:
; Line 1726
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, eax
	push	eax
	push	-16					; fffffff0H
	push	DWORD PTR _dw$[ebp]
	push	DWORD PTR _pszData$[ebp]
	call	_dwtosz
	add	esp, 16					; 00000010H
	add	DWORD PTR _pszData$[ebp], eax
; Line 1727
$FinishOp$1318:
; Line 1728
	mov	eax, DWORD PTR _pszData$[ebp]
	mov	BYTE PTR [eax], 41			; 00000029H
; Line 1729
	mov	eax, DWORD PTR _pszData$[ebp]
	mov	BYTE PTR [eax+1], 0
; Line 1730
	inc	DWORD PTR _cData$[ebp]
; Line 1732
$L1309:
; Line 1733
$L1308:
	inc	DWORD PTR _cIns$[ebp]
; Line 1735
$L1303:
	jmp	$L1300
$L1301:
; Line 1770
$Exit$1306:
; Line 1771
	cmp	DWORD PTR _pbOp$[ebp], 0
	je	$L1321
; Line 1772
	mov	al, BYTE PTR _bOp$[ebp]
	mov	ecx, DWORD PTR _pbOp$[ebp]
	mov	BYTE PTR [ecx], al
; Line 1773
$L1321:
	cmp	DWORD PTR _pbModRM$[ebp], 0
	je	$L1322
; Line 1774
	mov	al, BYTE PTR _bModRM$[ebp]
	mov	ecx, DWORD PTR _pbModRM$[ebp]
	mov	BYTE PTR [ecx], al
; Line 1775
$L1322:
	mov	eax, DWORD PTR _offCur$[ebp]
	sub	eax, DWORD PTR _off$[ebp]
	jmp	$L1255
; Line 1776
$L1255:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86Decode ENDP
_TEXT	ENDS
EXTRN	_szAssert:BYTE
_DATA	SEGMENT
	ORG $+1
$SG1374	DB	'[si]', 00H
	ORG $+3
$SG1376	DB	'[esi]', 00H
	ORG $+2
$SG1380	DB	'es:[di]', 00H
$SG1382	DB	'es:[edi]', 00H
	ORG $+3
$SG1430	DB	'???', 00H
_DATA	ENDS
_TEXT	SEGMENT
_wType$ = 8
_bModRM$ = 12
_piSegPrefix$ = 16
_pesf$ = 20
_selCode$ = 24
_poffCur$ = 28
_pszIns$ = 32
_dw$ = -12
_i$ = -24
_m$ = -40
_n$ = -16
_a$ = -20
_r$ = -36
_s$ = -4
_sib$ = -28
_w$ = -32
_x86DecodeOperand PROC NEAR
; Line 1781
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	ebx
	push	esi
	push	edi
; Line 1785
	movzx	eax, WORD PTR _wType$[ebp]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _i$[ebp], eax
; Line 1786
	mov	eax, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _abTypeSize[eax]
	mov	DWORD PTR _n$[ebp], eax
	cmp	DWORD PTR _n$[ebp], 0
	jne	$L1340
; Line 1787
	jmp	$Error$1341
; Line 1789
$L1340:
	movzx	eax, WORD PTR _wType$[ebp]
	and	eax, 240				; 000000f0H
	mov	DWORD PTR _w$[ebp], eax
; Line 1790
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+12]
	and	eax, 2048				; 00000800H
	cmp	eax, 1
	sbb	eax, eax
	inc	eax
	mov	ecx, DWORD PTR _selCode$[ebp]
	and	ecx, 131072				; 00020000H
	cmp	ecx, 1
	sbb	ecx, ecx
	neg	ecx
	cmp	eax, ecx
	jne	$L1342
; Line 1791
	cmp	DWORD PTR _i$[ebp], 4
	jne	$L1343
; Line 1792
	shl	DWORD PTR _n$[ebp], 1
; Line 1793
$L1343:
	cmp	DWORD PTR _i$[ebp], 7
	jne	$L1344
; Line 1794
	mov	DWORD PTR _n$[ebp], 6
; Line 1795
	cmp	DWORD PTR _w$[ebp], 0
	je	$L1345
	cmp	DWORD PTR _w$[ebp], 144			; 00000090H
	je	$L1345
	push	1795					; 00000703H
	push	OFFSET FLAT:_szModule$S696
	push	OFFSET FLAT:_szAssert
	call	_printf
	add	esp, 12					; 0000000cH
$L1345:
; Line 1797
$L1344:
; Line 1798
$L1342:
	mov	DWORD PTR _a$[ebp], 2
; Line 1799
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+12]
	and	eax, 4096				; 00001000H
	cmp	eax, 1
	sbb	eax, eax
	inc	eax
	mov	ecx, DWORD PTR _selCode$[ebp]
	and	ecx, 131072				; 00020000H
	cmp	ecx, 1
	sbb	ecx, ecx
	neg	ecx
	cmp	eax, ecx
	jne	$L1346
; Line 1800
	mov	DWORD PTR _a$[ebp], 4
; Line 1802
$L1346:
	cmp	DWORD PTR _w$[ebp], 176			; 000000b0H
	jl	$L1347
; Line 1803
	movzx	eax, BYTE PTR _bModRM$[ebp]
	and	eax, 56					; 00000038H
	shr	eax, 3
	mov	DWORD PTR _r$[ebp], eax
; Line 1805
$L1347:
	mov	DWORD PTR _dw$[ebp+4], 0
	mov	eax, DWORD PTR _dw$[ebp+4]
	mov	DWORD PTR _dw$[ebp], eax
; Line 1806
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR -44+[ebp], eax
	jmp	$L1348
; Line 1808
$L1352:
; Line 1809
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1353
; Line 1810
	lea	eax, DWORD PTR _dw$[ebp]
	push	eax
	push	DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _poffCur$[ebp]
	push	DWORD PTR [eax]
	push	DWORD PTR _selCode$[ebp]
	call	_x86GetBytes
	add	esp, 16					; 00000010H
; Line 1811
	cmp	DWORD PTR _i$[ebp], 2
	jne	$L1354
; Line 1812
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 43			; 0000002bH
	inc	DWORD PTR _pszIns$[ebp]
; Line 1813
$L1354:
	cmp	DWORD PTR _n$[ebp], 6
	jne	$L1355
; Line 1815
	push	4
	push	-16					; fffffff0H
	push	DWORD PTR _dw$[ebp+4]
	push	DWORD PTR _pszIns$[ebp]
	call	_dwtosz
	add	esp, 16					; 00000010H
	add	DWORD PTR _pszIns$[ebp], eax
; Line 1816
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 58			; 0000003aH
	inc	DWORD PTR _pszIns$[ebp]
; Line 1817
	push	8
	push	-16					; fffffff0H
	push	DWORD PTR _dw$[ebp]
	push	DWORD PTR _pszIns$[ebp]
	call	_dwtosz
	add	esp, 16					; 00000010H
; Line 1819
	jmp	$L1356
$L1355:
; Line 1820
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 7
	cmp	eax, 1
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [eax+ecx*2]
	push	eax
	push	-16					; fffffff0H
	push	DWORD PTR _dw$[ebp]
	push	DWORD PTR _pszIns$[ebp]
	call	_dwtosz
	add	esp, 16					; 00000010H
$L1356:
; Line 1822
$L1353:
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _poffCur$[ebp]
	add	DWORD PTR [ecx], eax
; Line 1823
	jmp	$L1349
; Line 1825
$L1357:
; Line 1826
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1358
; Line 1827
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 49			; 00000031H
	inc	DWORD PTR _pszIns$[ebp]
; Line 1828
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 0
; Line 1830
$L1358:
	jmp	$L1349
; Line 1832
$L1359:
; Line 1833
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1360
; Line 1834
	lea	eax, DWORD PTR _dw$[ebp]
	push	eax
	push	DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _poffCur$[ebp]
	push	DWORD PTR [eax]
	push	DWORD PTR _selCode$[ebp]
	call	_x86GetBytes
	add	esp, 16					; 00000010H
; Line 1835
	mov	eax, DWORD PTR _piSegPrefix$[ebp]
	cmp	DWORD PTR [eax], 0
	jl	$L1361
; Line 1836
	mov	eax, DWORD PTR _piSegPrefix$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, 16					; 00000010H
	imul	eax, 6
	push	DWORD PTR _ardRegs[eax]
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
	add	DWORD PTR _pszIns$[ebp], eax
; Line 1837
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 58			; 0000003aH
	inc	DWORD PTR _pszIns$[ebp]
; Line 1838
	mov	eax, DWORD PTR _piSegPrefix$[ebp]
	mov	DWORD PTR [eax], -1
; Line 1840
$L1361:
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 91			; 0000005bH
	inc	DWORD PTR _pszIns$[ebp]
; Line 1841
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, eax
	push	eax
	push	-16					; fffffff0H
	push	DWORD PTR _dw$[ebp]
	push	DWORD PTR _pszIns$[ebp]
	call	_dwtosz
	add	esp, 16					; 00000010H
	add	DWORD PTR _pszIns$[ebp], eax
; Line 1842
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 93			; 0000005dH
	inc	DWORD PTR _pszIns$[ebp]
; Line 1843
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 0
; Line 1845
$L1360:
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _poffCur$[ebp]
	add	DWORD PTR [ecx], eax
; Line 1846
	jmp	$L1349
; Line 1848
$L1362:
; Line 1849
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1363
; Line 1850
	lea	eax, DWORD PTR _dw$[ebp]
	push	eax
	push	DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _poffCur$[ebp]
	push	DWORD PTR [eax]
	push	DWORD PTR _selCode$[ebp]
	call	_x86GetBytes
	add	esp, 16					; 00000010H
; Line 1851
$L1363:
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _poffCur$[ebp]
	add	DWORD PTR [ecx], eax
; Line 1852
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1364
; Line 1853
	cmp	DWORD PTR _n$[ebp], 1
	jne	$L1365
; Line 1854
	movsx	eax, BYTE PTR _dw$[ebp]
	mov	DWORD PTR _dw$[ebp], eax
; Line 1855
$L1365:
	cmp	DWORD PTR _a$[ebp], 4
	jne	$L1366
; Line 1856
	mov	eax, DWORD PTR _poffCur$[ebp]
	mov	eax, DWORD PTR [eax]
	add	DWORD PTR _dw$[ebp], eax
; Line 1857
	jmp	$L1367
$L1366:
; Line 1858
	mov	eax, DWORD PTR _dw$[ebp]
	mov	ecx, DWORD PTR _poffCur$[ebp]
	add	eax, DWORD PTR [ecx]
	movzx	eax, ax
	mov	DWORD PTR _dw$[ebp], eax
$L1367:
; Line 1859
	cmp	DWORD PTR _n$[ebp], 1
	jne	$L1368
; Line 1860
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, eax
	push	eax
	push	-16					; fffffff0H
	push	DWORD PTR _dw$[ebp]
	push	DWORD PTR _pszIns$[ebp]
	call	_dwtosz
	add	esp, 16					; 00000010H
; Line 1861
	jmp	$L1369
$L1368:
; Line 1862
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, eax
	push	eax
	push	-16					; fffffff0H
	push	DWORD PTR _dw$[ebp]
	push	DWORD PTR _pszIns$[ebp]
	call	_dwtosz
	add	esp, 16					; 00000010H
$L1369:
; Line 1864
$L1364:
	jmp	$L1349
; Line 1866
$L1370:
; Line 1867
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1371
; Line 1868
	mov	eax, DWORD PTR _piSegPrefix$[ebp]
	cmp	DWORD PTR [eax], 0
	jl	$L1372
; Line 1869
	mov	eax, DWORD PTR _piSegPrefix$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, 16					; 00000010H
	imul	eax, 6
	push	DWORD PTR _ardRegs[eax]
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
	add	DWORD PTR _pszIns$[ebp], eax
; Line 1870
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 58			; 0000003aH
	inc	DWORD PTR _pszIns$[ebp]
; Line 1871
	mov	eax, DWORD PTR _piSegPrefix$[ebp]
	mov	DWORD PTR [eax], -1
; Line 1873
$L1372:
	cmp	DWORD PTR _a$[ebp], 2
	jne	$L1373
; Line 1874
	push	OFFSET FLAT:$SG1374
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
; Line 1875
	jmp	$L1375
$L1373:
; Line 1876
	push	OFFSET FLAT:$SG1376
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
$L1375:
; Line 1878
$L1371:
	jmp	$L1349
; Line 1880
$L1377:
; Line 1881
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1378
; Line 1882
	cmp	DWORD PTR _a$[ebp], 2
	jne	$L1379
; Line 1883
	push	OFFSET FLAT:$SG1380
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
; Line 1884
	jmp	$L1381
$L1379:
; Line 1885
	push	OFFSET FLAT:$SG1382
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
$L1381:
; Line 1887
$L1378:
	jmp	$L1349
; Line 1889
$L1383:
; Line 1890
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1384
; Line 1891
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 4
	cmp	eax, 1
	sbb	eax, eax
	neg	eax
	shl	eax, 4
	movzx	ecx, WORD PTR _wType$[ebp]
	and	ecx, 3840				; 00000f00H
	shr	ecx, 8
	add	eax, ecx
	mov	DWORD PTR _i$[ebp], eax
; Line 1892
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 6
	push	DWORD PTR _ardRegs[eax]
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
; Line 1894
$L1384:
	jmp	$L1349
; Line 1896
$L1385:
; Line 1897
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1386
; Line 1898
	movzx	eax, WORD PTR _wType$[ebp]
	and	eax, 3840				; 00000f00H
	shr	eax, 8
	mov	DWORD PTR _i$[ebp], eax
; Line 1899
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 16					; 00000010H
	imul	eax, 6
	push	DWORD PTR _ardRegs[eax]
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
; Line 1901
$L1386:
	jmp	$L1349
; Line 1903
$L1387:
; Line 1904
	movzx	eax, BYTE PTR _bModRM$[ebp]
	and	eax, 192				; 000000c0H
	mov	ecx, 192				; 000000c0H
	and	ecx, -64				; ffffffc0H
	cmp	eax, ecx
	jne	$L1388
; Line 1905
	jmp	$Error$1341
; Line 1907
$L1388:
	jmp	$ModRM$1389
; Line 1909
$L1390:
; Line 1910
	movzx	eax, BYTE PTR _bModRM$[ebp]
	and	eax, 192				; 000000c0H
	mov	ecx, 192				; 000000c0H
	and	ecx, -64				; ffffffc0H
	cmp	eax, ecx
	je	$L1391
; Line 1911
	jmp	$Error$1341
; Line 1914
$L1391:
$L1392:
; Line 1915
$ModRM$1389:
; Line 1916
	movzx	eax, BYTE PTR _bModRM$[ebp]
	and	eax, 7
	mov	DWORD PTR _i$[ebp], eax
; Line 1917
	movzx	eax, BYTE PTR _bModRM$[ebp]
	and	eax, 192				; 000000c0H
	shr	eax, 6
	mov	DWORD PTR _m$[ebp], eax
; Line 1918
	cmp	DWORD PTR _m$[ebp], 3
	jne	$L1393
; Line 1919
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1394
; Line 1920
	mov	eax, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [eax*8-8]
	add	eax, DWORD PTR _i$[ebp]
	imul	eax, 6
	push	DWORD PTR _ardRegs[eax]
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
	add	DWORD PTR _pszIns$[ebp], eax
; Line 1921
$L1394:
	jmp	$L1349
; Line 1923
$L1393:
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1395
; Line 1924
	mov	eax, DWORD PTR _piSegPrefix$[ebp]
	cmp	DWORD PTR [eax], 0
	jl	$L1396
; Line 1925
	mov	eax, DWORD PTR _piSegPrefix$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, 16					; 00000010H
	imul	eax, 6
	push	DWORD PTR _ardRegs[eax]
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
	add	DWORD PTR _pszIns$[ebp], eax
; Line 1926
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 58			; 0000003aH
	inc	DWORD PTR _pszIns$[ebp]
; Line 1927
	mov	eax, DWORD PTR _piSegPrefix$[ebp]
	mov	DWORD PTR [eax], -1
; Line 1929
$L1396:
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 91			; 0000005bH
	inc	DWORD PTR _pszIns$[ebp]
; Line 1930
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 0
; Line 1932
$L1395:
	cmp	DWORD PTR _a$[ebp], 2
	jne	$L1397
; Line 1933
	cmp	DWORD PTR _m$[ebp], 0
	jne	$L1398
	cmp	DWORD PTR _i$[ebp], 6
	jne	$L1398
; Line 1934
	mov	DWORD PTR _m$[ebp], 2
; Line 1935
	jmp	$L1399
$L1398:
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1400
; Line 1936
	mov	eax, DWORD PTR _i$[ebp]
	push	DWORD PTR _apszRM[eax*4]
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
	add	DWORD PTR _pszIns$[ebp], eax
; Line 1937
	cmp	DWORD PTR _m$[ebp], 0
	jle	$L1401
; Line 1938
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 43			; 0000002bH
	inc	DWORD PTR _pszIns$[ebp]
; Line 1939
$L1401:
; Line 1940
$L1400:
$L1399:
; Line 1941
	jmp	$L1402
$L1397:
; Line 1942
	cmp	DWORD PTR _i$[ebp], 4
	jne	$L1403
; Line 1943
	mov	eax, DWORD PTR _poffCur$[ebp]
	push	DWORD PTR [eax]
	push	DWORD PTR _selCode$[ebp]
	call	_x86GetByte
	add	esp, 8
	movzx	eax, al
	mov	DWORD PTR _sib$[ebp], eax
; Line 1944
	mov	eax, DWORD PTR _poffCur$[ebp]
	inc	DWORD PTR [eax]
; Line 1946
	mov	eax, DWORD PTR _sib$[ebp]
	and	eax, 56					; 00000038H
	shr	eax, 3
	mov	DWORD PTR _i$[ebp], eax
; Line 1954
	cmp	DWORD PTR _i$[ebp], 4
	je	$L1404
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1404
; Line 1956
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 24					; 00000018H
	imul	eax, 6
	push	DWORD PTR _ardRegs[eax]
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
	add	DWORD PTR _pszIns$[ebp], eax
; Line 1959
	mov	eax, DWORD PTR _sib$[ebp]
	and	eax, 192				; 000000c0H
	shr	eax, 6
	mov	DWORD PTR _s$[ebp], eax
; Line 1960
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 42			; 0000002aH
	inc	DWORD PTR _pszIns$[ebp]
; Line 1961
	mov	eax, DWORD PTR _s$[ebp]
	mov	al, BYTE PTR _achScale[eax]
	mov	ecx, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [ecx], al
	inc	DWORD PTR _pszIns$[ebp]
; Line 1962
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 43			; 0000002bH
	inc	DWORD PTR _pszIns$[ebp]
; Line 1964
$L1404:
	mov	eax, DWORD PTR _sib$[ebp]
	and	eax, 7
	mov	DWORD PTR _i$[ebp], eax
; Line 1966
$L1403:
	cmp	DWORD PTR _m$[ebp], 0
	jne	$L1405
	cmp	DWORD PTR _i$[ebp], 5
	jne	$L1405
; Line 1967
	mov	DWORD PTR _m$[ebp], 2
; Line 1968
	jmp	$L1406
$L1405:
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1407
; Line 1969
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 24					; 00000018H
	imul	eax, 6
	push	DWORD PTR _ardRegs[eax]
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
	add	DWORD PTR _pszIns$[ebp], eax
; Line 1970
	cmp	DWORD PTR _m$[ebp], 0
	jle	$L1408
; Line 1971
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 43			; 0000002bH
	inc	DWORD PTR _pszIns$[ebp]
; Line 1972
$L1408:
; Line 1973
$L1407:
$L1406:
	cmp	DWORD PTR _m$[ebp], 2
	jne	$L1409
; Line 1974
	mov	DWORD PTR _m$[ebp], 4
; Line 1975
$L1409:
$L1402:
; Line 1976
	cmp	DWORD PTR _m$[ebp], 0
	jle	$L1410
; Line 1977
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1411
; Line 1978
	lea	eax, DWORD PTR _dw$[ebp]
	push	eax
	push	DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _poffCur$[ebp]
	push	DWORD PTR [eax]
	push	DWORD PTR _selCode$[ebp]
	call	_x86GetBytes
	add	esp, 16					; 00000010H
; Line 1981
	mov	eax, DWORD PTR _m$[ebp]
	add	eax, eax
	push	eax
	push	-16					; fffffff0H
	push	DWORD PTR _dw$[ebp]
	push	DWORD PTR _pszIns$[ebp]
	call	_dwtosz
	add	esp, 16					; 00000010H
	add	DWORD PTR _pszIns$[ebp], eax
; Line 1983
$L1411:
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _poffCur$[ebp]
	add	DWORD PTR [ecx], eax
; Line 1985
$L1410:
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1412
; Line 1986
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 93			; 0000005dH
	inc	DWORD PTR _pszIns$[ebp]
; Line 1987
	mov	eax, DWORD PTR _pszIns$[ebp]
	mov	BYTE PTR [eax], 0
; Line 1989
$L1412:
	jmp	$L1349
; Line 1991
$L1413:
; Line 1992
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1414
; Line 1993
	mov	eax, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [eax*8-8]
	add	eax, DWORD PTR _r$[ebp]
	imul	eax, 6
	push	DWORD PTR _ardRegs[eax]
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
; Line 1994
$L1414:
	jmp	$L1349
; Line 1996
$L1415:
; Line 1997
	cmp	DWORD PTR _r$[ebp], 5
	jle	$L1416
; Line 1998
	jmp	$Error$1341
; Line 1999
$L1416:
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1417
; Line 2000
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, 16					; 00000010H
	imul	eax, 6
	push	DWORD PTR _ardRegs[eax]
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
; Line 2001
$L1417:
	jmp	$L1349
; Line 2003
$L1418:
; Line 2004
	cmp	DWORD PTR _r$[ebp], 0
	je	$L1419
	cmp	DWORD PTR _r$[ebp], 2
	je	$L1419
	cmp	DWORD PTR _r$[ebp], 3
	je	$L1419
; Line 2005
	jmp	$Error$1341
; Line 2006
$L1419:
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1420
; Line 2007
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, 32					; 00000020H
	imul	eax, 6
	push	DWORD PTR _ardRegs[eax]
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
; Line 2008
$L1420:
	jmp	$L1349
; Line 2010
$L1421:
; Line 2011
	cmp	DWORD PTR _r$[ebp], 4
	je	$L1423
	cmp	DWORD PTR _r$[ebp], 5
	jne	$L1422
$L1423:
; Line 2012
	jmp	$Error$1341
; Line 2013
$L1422:
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1424
; Line 2014
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, 40					; 00000028H
	imul	eax, 6
	push	DWORD PTR _ardRegs[eax]
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
; Line 2015
$L1424:
	jmp	$L1349
; Line 2017
$L1425:
; Line 2018
	cmp	DWORD PTR _r$[ebp], 6
	je	$L1426
	cmp	DWORD PTR _r$[ebp], 7
	je	$L1426
; Line 2019
	jmp	$Error$1341
; Line 2020
$L1426:
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1427
; Line 2021
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, 48					; 00000030H
	imul	eax, 6
	push	DWORD PTR _ardRegs[eax]
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
; Line 2022
$L1427:
	jmp	$L1349
; Line 2024
$L1428:
; Line 2025
$Error$1341:
; Line 2026
	cmp	DWORD PTR _pszIns$[ebp], 0
	je	$L1429
; Line 2027
	push	OFFSET FLAT:$SG1430
	push	DWORD PTR _pszIns$[ebp]
	call	_nstrcpy
	add	esp, 8
; Line 2028
$L1429:
	sub	eax, eax
	jmp	$L1330
; Line 2029
	jmp	$L1349
$L1348:
	cmp	DWORD PTR -44+[ebp], 128		; 00000080H
	jg	$L2084
	je	$L1392
	cmp	DWORD PTR -44+[ebp], 64			; 00000040H
	jg	$L2085
	je	$L1370
	cmp	DWORD PTR -44+[ebp], 0
	je	$L1352
	cmp	DWORD PTR -44+[ebp], 16			; 00000010H
	je	$L1357
	cmp	DWORD PTR -44+[ebp], 32			; 00000020H
	je	$L1359
	cmp	DWORD PTR -44+[ebp], 48			; 00000030H
	je	$L1362
	jmp	$L1428
$L2085:
	cmp	DWORD PTR -44+[ebp], 80			; 00000050H
	je	$L1377
	cmp	DWORD PTR -44+[ebp], 96			; 00000060H
	je	$L1383
	cmp	DWORD PTR -44+[ebp], 112		; 00000070H
	je	$L1385
	jmp	$L1428
$L2084:
	cmp	DWORD PTR -44+[ebp], 192		; 000000c0H
	jg	$L2086
	je	$L1415
	cmp	DWORD PTR -44+[ebp], 144		; 00000090H
	je	$L1387
	cmp	DWORD PTR -44+[ebp], 160		; 000000a0H
	je	$L1390
	cmp	DWORD PTR -44+[ebp], 176		; 000000b0H
	je	$L1413
	jmp	$L1428
$L2086:
	cmp	DWORD PTR -44+[ebp], 208		; 000000d0H
	je	$L1418
	cmp	DWORD PTR -44+[ebp], 224		; 000000e0H
	je	$L1421
	cmp	DWORD PTR -44+[ebp], 240		; 000000f0H
	je	$L1425
	jmp	$L1428
$L1349:
; Line 2030
	mov	eax, 1
	jmp	$L1330
; Line 2031
$L1330:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86DecodeOperand ENDP
_wType$ = 8
_bModRM$ = 12
_pesf$ = 16
_selCode$ = 20
_offCur$ = 24
_pSize$ = 28
_ppdw$ = 32
_fSuccess$ = -24
_i$ = -28
_m$ = -48
_n$ = -12
_a$ = -20
_r$ = -40
_s$ = -8
_sib$ = -32
_w$ = -36
_dwEA$ = -4
_dwTmp$ = -44
_pdw$ = -16
_x86CopyOperand PROC NEAR
; Line 2036
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
; Line 2037
	mov	DWORD PTR _fSuccess$[ebp], 1
; Line 2040
	mov	eax, DWORD PTR _ppdw$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pdw$[ebp], eax
; Line 2042
	movzx	eax, WORD PTR _wType$[ebp]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _i$[ebp], eax
; Line 2043
	mov	eax, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _abTypeSize[eax]
	mov	DWORD PTR _n$[ebp], eax
; Line 2046
	cmp	DWORD PTR _n$[ebp], 0
	jne	$L1451
; Line 2047
	sub	eax, eax
	jmp	$L1438
; Line 2049
$L1451:
	movzx	eax, WORD PTR _wType$[ebp]
	and	eax, 240				; 000000f0H
	mov	DWORD PTR _w$[ebp], eax
; Line 2050
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+12]
	and	eax, 2048				; 00000800H
	cmp	eax, 1
	sbb	eax, eax
	inc	eax
	mov	ecx, DWORD PTR _selCode$[ebp]
	and	ecx, 131072				; 00020000H
	cmp	ecx, 1
	sbb	ecx, ecx
	neg	ecx
	cmp	eax, ecx
	jne	$L1452
; Line 2051
	cmp	DWORD PTR _i$[ebp], 4
	jne	$L1453
; Line 2052
	shl	DWORD PTR _n$[ebp], 1
; Line 2053
$L1453:
	cmp	DWORD PTR _i$[ebp], 7
	jne	$L1454
; Line 2054
	mov	DWORD PTR _n$[ebp], 6
; Line 2055
	cmp	DWORD PTR _w$[ebp], 0
	je	$L1455
	cmp	DWORD PTR _w$[ebp], 144			; 00000090H
	je	$L1455
	push	2055					; 00000807H
	push	OFFSET FLAT:_szModule$S696
	push	OFFSET FLAT:_szAssert
	call	_printf
	add	esp, 12					; 0000000cH
$L1455:
; Line 2057
$L1454:
; Line 2059
$L1452:
	cmp	DWORD PTR _n$[ebp], 6
	jne	$L1456
; Line 2060
	mov	DWORD PTR _n$[ebp], 4
; Line 2062
$L1456:
	mov	DWORD PTR _a$[ebp], 2
; Line 2063
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+12]
	and	eax, 4096				; 00001000H
	cmp	eax, 1
	sbb	eax, eax
	inc	eax
	mov	ecx, DWORD PTR _selCode$[ebp]
	and	ecx, 131072				; 00020000H
	cmp	ecx, 1
	sbb	ecx, ecx
	neg	ecx
	cmp	eax, ecx
	jne	$L1457
; Line 2064
	mov	DWORD PTR _a$[ebp], 4
; Line 2066
$L1457:
	cmp	DWORD PTR _w$[ebp], 176			; 000000b0H
	jl	$L1458
; Line 2067
	movzx	eax, BYTE PTR _bModRM$[ebp]
	and	eax, 56					; 00000038H
	shr	eax, 3
	mov	DWORD PTR _r$[ebp], eax
; Line 2069
$L1458:
	mov	eax, DWORD PTR _pdw$[ebp]
	mov	DWORD PTR [eax], 0
; Line 2070
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR -52+[ebp], eax
	jmp	$L1459
; Line 2072
$L1463:
; Line 2073
	push	DWORD PTR _pdw$[ebp]
	push	DWORD PTR _n$[ebp]
	push	DWORD PTR _offCur$[ebp]
	push	DWORD PTR _selCode$[ebp]
	call	_x86GetBytes
	add	esp, 16					; 00000010H
; Line 2074
	cmp	DWORD PTR _i$[ebp], 2
	jne	$L1464
; Line 2075
	mov	eax, DWORD PTR _pdw$[ebp]
	movsx	eax, BYTE PTR [eax]
	mov	ecx, DWORD PTR _pdw$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2076
$L1464:
	cmp	DWORD PTR _n$[ebp], 1
	jg	$L1466
	mov	eax, DWORD PTR _pdw$[ebp]
	cmp	DWORD PTR [eax], 32			; 00000020H
	jb	$L1467
	mov	eax, DWORD PTR _pdw$[ebp]
	cmp	DWORD PTR [eax], 127			; 0000007fH
	jb	$L1465
$L1467:
$L1466:
; Line 2077
	inc	DWORD PTR _fSuccess$[ebp]
; Line 2078
$L1465:
	jmp	$L1460
; Line 2080
$L1468:
; Line 2081
	inc	DWORD PTR _fSuccess$[ebp]
; Line 2082
	mov	eax, DWORD PTR _pdw$[ebp]
	mov	BYTE PTR [eax], 1
; Line 2083
	jmp	$L1460
; Line 2085
$L1469:
; Line 2086
	lea	eax, DWORD PTR _dwEA$[ebp]
	push	eax
	push	DWORD PTR _a$[ebp]
	push	DWORD PTR _offCur$[ebp]
	push	DWORD PTR _selCode$[ebp]
	call	_x86GetBytes
	add	esp, 16					; 00000010H
; Line 2087
	push	DWORD PTR _pdw$[ebp]
	push	DWORD PTR _n$[ebp]
	push	DWORD PTR _dwEA$[ebp]
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+4]
	call	_x86GetBytes
	add	esp, 16					; 00000010H
; Line 2088
	jmp	$L1460
; Line 2090
$L1470:
; Line 2091
	inc	DWORD PTR _fSuccess$[ebp]
; Line 2092
	push	DWORD PTR _pdw$[ebp]
	push	DWORD PTR _n$[ebp]
	push	DWORD PTR _offCur$[ebp]
	push	DWORD PTR _selCode$[ebp]
	call	_x86GetBytes
	add	esp, 16					; 00000010H
; Line 2093
	cmp	DWORD PTR _n$[ebp], 1
	jne	$L1471
; Line 2094
	mov	eax, DWORD PTR _pdw$[ebp]
	movsx	eax, BYTE PTR [eax]
	mov	ecx, DWORD PTR _pdw$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2095
$L1471:
	mov	eax, DWORD PTR _offCur$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _pdw$[ebp]
	add	DWORD PTR [ecx], eax
; Line 2096
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _n$[ebp], eax
; Line 2097
	jmp	$L1460
; Line 2099
$L1472:
; Line 2100
	cmp	DWORD PTR _a$[ebp], 2
	jne	$L1473
; Line 2101
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+64]
	mov	DWORD PTR _dwEA$[ebp], eax
; Line 2102
	jmp	$L1474
$L1473:
; Line 2103
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+64]
	mov	DWORD PTR _dwEA$[ebp], eax
$L1474:
; Line 2104
	push	DWORD PTR _pdw$[ebp]
	push	DWORD PTR _n$[ebp]
	push	DWORD PTR _dwEA$[ebp]
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+4]
	call	_x86GetBytes
	add	esp, 16					; 00000010H
; Line 2105
	jmp	$L1460
; Line 2107
$L1475:
; Line 2108
	cmp	DWORD PTR _a$[ebp], 2
	jne	$L1476
; Line 2109
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+60]
	mov	DWORD PTR _dwEA$[ebp], eax
; Line 2110
	jmp	$L1477
$L1476:
; Line 2111
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+60]
	mov	DWORD PTR _dwEA$[ebp], eax
$L1477:
; Line 2112
	push	DWORD PTR _pdw$[ebp]
	push	DWORD PTR _n$[ebp]
	push	DWORD PTR _dwEA$[ebp]
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+44]
	call	_x86GetBytes
	add	esp, 16					; 00000010H
; Line 2113
	jmp	$L1460
; Line 2115
$L1478:
; Line 2116
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 4
	cmp	eax, 1
	sbb	eax, eax
	neg	eax
	shl	eax, 4
	movzx	ecx, WORD PTR _wType$[ebp]
	and	ecx, 3840				; 00000f00H
	shr	ecx, 8
	add	eax, ecx
	mov	DWORD PTR _i$[ebp], eax
; Line 2117
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 6
	movzx	eax, BYTE PTR _ardRegs[eax+4]
	add	eax, DWORD PTR _pesf$[ebp]
	mov	ecx, DWORD PTR _ppdw$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2118
	jmp	$L1460
; Line 2120
$L1479:
; Line 2121
	movzx	eax, WORD PTR _wType$[ebp]
	and	eax, 3840				; 00000f00H
	shr	eax, 8
	mov	DWORD PTR _i$[ebp], eax
; Line 2122
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 16					; 00000010H
	imul	eax, 6
	movzx	eax, BYTE PTR _ardRegs[eax+4]
	add	eax, DWORD PTR _pesf$[ebp]
	mov	ecx, DWORD PTR _ppdw$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2123
	jmp	$L1460
; Line 2125
$L1480:
; Line 2126
	movzx	eax, BYTE PTR _bModRM$[ebp]
	and	eax, 192				; 000000c0H
	mov	ecx, 192				; 000000c0H
	and	ecx, -64				; ffffffc0H
	cmp	eax, ecx
	jne	$L1481
; Line 2127
	sub	eax, eax
	jmp	$L1438
; Line 2130
$L1481:
$L1482:
; Line 2131
	movzx	eax, BYTE PTR _bModRM$[ebp]
	and	eax, 7
	mov	DWORD PTR _i$[ebp], eax
; Line 2132
	movzx	eax, BYTE PTR _bModRM$[ebp]
	and	eax, 192				; 000000c0H
	shr	eax, 6
	mov	DWORD PTR _m$[ebp], eax
; Line 2133
	cmp	DWORD PTR _m$[ebp], 3
	jne	$L1483
; Line 2134
	mov	eax, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [eax*8-8]
	add	eax, DWORD PTR _i$[ebp]
	imul	eax, 6
	movzx	eax, BYTE PTR _ardRegs[eax+4]
	add	eax, DWORD PTR _pesf$[ebp]
	mov	ecx, DWORD PTR _ppdw$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2135
	jmp	$L1460
; Line 2137
$L1483:
	cmp	DWORD PTR _a$[ebp], 2
	jne	$L1484
; Line 2138
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR -56+[ebp], eax
	jmp	$L1485
; Line 2139
$L1489:
; Line 2140
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+64]
	mov	DWORD PTR _dwEA$[ebp], eax
; Line 2141
	jmp	$L1486
; Line 2142
$L1490:
; Line 2143
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+60]
	mov	DWORD PTR _dwEA$[ebp], eax
; Line 2144
	jmp	$L1486
; Line 2145
$L1491:
; Line 2146
	cmp	DWORD PTR _m$[ebp], 0
	jne	$L1492
; Line 2147
	mov	DWORD PTR _m$[ebp], 2
; Line 2148
	mov	DWORD PTR _dwEA$[ebp], 0
; Line 2149
	jmp	$L1486
; Line 2151
$L1492:
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+68]
	mov	DWORD PTR _dwEA$[ebp], eax
; Line 2152
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 2153
	jmp	$L1486
; Line 2154
$L1493:
; Line 2155
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+76]
	mov	DWORD PTR _dwEA$[ebp], eax
; Line 2156
	jmp	$L1486
; Line 2157
$L1494:
; Line 2158
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+76]
	mov	ecx, DWORD PTR _pesf$[ebp]
	movzx	ecx, WORD PTR [ecx+64]
	add	eax, ecx
	movzx	eax, ax
	mov	DWORD PTR _dwEA$[ebp], eax
; Line 2159
	jmp	$L1486
; Line 2160
$L1495:
; Line 2161
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+76]
	mov	ecx, DWORD PTR _pesf$[ebp]
	movzx	ecx, WORD PTR [ecx+60]
	add	eax, ecx
	movzx	eax, ax
	mov	DWORD PTR _dwEA$[ebp], eax
; Line 2162
	jmp	$L1486
; Line 2163
$L1496:
; Line 2164
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+64]
	mov	ecx, DWORD PTR _pesf$[ebp]
	movzx	ecx, WORD PTR [ecx+68]
	add	eax, ecx
	movzx	eax, ax
	mov	DWORD PTR _dwEA$[ebp], eax
; Line 2165
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 2166
	jmp	$L1486
; Line 2167
$L1497:
; Line 2168
	mov	eax, DWORD PTR _pesf$[ebp]
	movzx	eax, WORD PTR [eax+60]
	mov	ecx, DWORD PTR _pesf$[ebp]
	movzx	ecx, WORD PTR [ecx+68]
	add	eax, ecx
	movzx	eax, ax
	mov	DWORD PTR _dwEA$[ebp], eax
; Line 2169
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 2170
	jmp	$L1486
; Line 2171
	jmp	$L1486
$L1485:
	cmp	DWORD PTR -56+[ebp], 7
	ja	$L1486
	shl	DWORD PTR -56+[ebp], 2
	mov	eax, DWORD PTR -56+[ebp]
	jmp	DWORD PTR CS:$L2090[eax]
$L2090:
	DD	OFFSET FLAT:$L1494
	DD	OFFSET FLAT:$L1495
	DD	OFFSET FLAT:$L1496
	DD	OFFSET FLAT:$L1497
	DD	OFFSET FLAT:$L1489
	DD	OFFSET FLAT:$L1490
	DD	OFFSET FLAT:$L1491
	DD	OFFSET FLAT:$L1493
$L1486:
; Line 2172
	jmp	$L1498
$L1484:
; Line 2173
	mov	DWORD PTR _dwEA$[ebp], 0
; Line 2174
	cmp	DWORD PTR _i$[ebp], 4
	jne	$L1499
; Line 2175
	push	DWORD PTR _offCur$[ebp]
	push	DWORD PTR _selCode$[ebp]
	call	_x86GetByte
	add	esp, 8
	movzx	eax, al
	mov	DWORD PTR _sib$[ebp], eax
; Line 2176
	inc	DWORD PTR _offCur$[ebp]
; Line 2178
	mov	eax, DWORD PTR _sib$[ebp]
	and	eax, 56					; 00000038H
	shr	eax, 3
	mov	DWORD PTR _i$[ebp], eax
; Line 2186
	cmp	DWORD PTR _i$[ebp], 4
	je	$L1500
; Line 2189
	mov	eax, 1
	mov	edx, DWORD PTR _sib$[ebp]
	and	edx, 192				; 000000c0H
	shr	edx, 6
	mov	cl, dl
	shl	eax, cl
	mov	DWORD PTR _s$[ebp], eax
; Line 2191
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 24					; 00000018H
	imul	eax, 6
	movzx	eax, BYTE PTR _ardRegs[eax+4]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+ecx]
	imul	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _dwEA$[ebp], eax
; Line 2193
$L1500:
	mov	eax, DWORD PTR _sib$[ebp]
	and	eax, 7
	mov	DWORD PTR _i$[ebp], eax
; Line 2195
$L1499:
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR -60+[ebp], eax
	jmp	$L1501
; Line 2196
$L1505:
; Line 2202
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 24					; 00000018H
	imul	eax, 6
	movzx	eax, BYTE PTR _ardRegs[eax+4]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+ecx]
	add	DWORD PTR _dwEA$[ebp], eax
; Line 2203
	jmp	$L1502
; Line 2204
$L1506:
; Line 2205
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+72]
	add	DWORD PTR _dwEA$[ebp], eax
; Line 2206
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 2207
	jmp	$L1502
; Line 2208
$L1507:
; Line 2209
	cmp	DWORD PTR _m$[ebp], 0
	jne	$L1508
; Line 2210
	mov	DWORD PTR _m$[ebp], 2
; Line 2211
	jmp	$L1502
; Line 2213
$L1508:
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+68]
	add	DWORD PTR _dwEA$[ebp], eax
; Line 2214
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 2215
	jmp	$L1502
; Line 2216
	jmp	$L1502
$L1501:
	cmp	DWORD PTR -60+[ebp], 7
	ja	$L1502
	shl	DWORD PTR -60+[ebp], 2
	mov	eax, DWORD PTR -60+[ebp]
	jmp	DWORD PTR CS:$L2091[eax]
$L2091:
	DD	OFFSET FLAT:$L1505
	DD	OFFSET FLAT:$L1505
	DD	OFFSET FLAT:$L1505
	DD	OFFSET FLAT:$L1505
	DD	OFFSET FLAT:$L1506
	DD	OFFSET FLAT:$L1507
	DD	OFFSET FLAT:$L1505
	DD	OFFSET FLAT:$L1505
$L1502:
; Line 2217
$L1498:
; Line 2218
	mov	DWORD PTR _dwTmp$[ebp], 0
; Line 2219
	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR -64+[ebp], eax
	jmp	$L1509
; Line 2220
$L1513:
; Line 2221
	lea	eax, DWORD PTR _dwTmp$[ebp]
	push	eax
	push	1
	push	DWORD PTR _offCur$[ebp]
	push	DWORD PTR _selCode$[ebp]
	call	_x86GetBytes
	add	esp, 16					; 00000010H
; Line 2222
	movsx	eax, BYTE PTR _dwTmp$[ebp]
	add	DWORD PTR _dwEA$[ebp], eax
; Line 2223
	jmp	$L1510
; Line 2224
$L1514:
; Line 2225
	lea	eax, DWORD PTR _dwTmp$[ebp]
	push	eax
	push	DWORD PTR _a$[ebp]
	push	DWORD PTR _offCur$[ebp]
	push	DWORD PTR _selCode$[ebp]
	call	_x86GetBytes
	add	esp, 16					; 00000010H
; Line 2226
	mov	eax, DWORD PTR _dwTmp$[ebp]
	add	DWORD PTR _dwEA$[ebp], eax
; Line 2227
	jmp	$L1510
; Line 2228
	jmp	$L1510
$L1509:
	cmp	DWORD PTR -64+[ebp], 1
	je	$L1513
	cmp	DWORD PTR -64+[ebp], 2
	je	$L1514
	jmp	$L1510
$L1510:
; Line 2229
	cmp	DWORD PTR _a$[ebp], 2
	jne	$L1515
; Line 2230
	movzx	eax, WORD PTR _dwEA$[ebp]
	mov	DWORD PTR _dwEA$[ebp], eax
; Line 2231
$L1515:
	movzx	eax, WORD PTR _wType$[ebp]
	test	ah, 48					; 00000030H
	jne	$L1516
; Line 2232
	mov	eax, DWORD PTR _dwEA$[ebp]
	mov	ecx, DWORD PTR _pdw$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2233
	jmp	$L1517
$L1516:
; Line 2234
	push	DWORD PTR _pdw$[ebp]
	push	DWORD PTR _n$[ebp]
	push	DWORD PTR _dwEA$[ebp]
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+4]
	call	_x86GetBytes
	add	esp, 16					; 00000010H
$L1517:
; Line 2235
	jmp	$L1460
; Line 2237
$L1518:
; Line 2238
	mov	eax, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [eax*8-8]
	add	eax, DWORD PTR _r$[ebp]
	imul	eax, 6
	movzx	eax, BYTE PTR _ardRegs[eax+4]
	add	eax, DWORD PTR _pesf$[ebp]
	mov	ecx, DWORD PTR _ppdw$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2239
	jmp	$L1460
; Line 2241
$L1519:
; Line 2242
	cmp	DWORD PTR _r$[ebp], 5
	jle	$L1520
; Line 2243
	sub	eax, eax
	jmp	$L1438
; Line 2244
$L1520:
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, 16					; 00000010H
	imul	eax, 6
	movzx	eax, BYTE PTR _ardRegs[eax+4]
	add	eax, DWORD PTR _pesf$[ebp]
	mov	ecx, DWORD PTR _ppdw$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2245
	jmp	$L1460
; Line 2247
$L1521:
; Line 2248
	cmp	DWORD PTR _r$[ebp], 0
	je	$L1522
	cmp	DWORD PTR _r$[ebp], 2
	je	$L1522
	cmp	DWORD PTR _r$[ebp], 3
	je	$L1522
; Line 2249
	sub	eax, eax
	jmp	$L1438
; Line 2250
$L1522:
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, 32					; 00000020H
	imul	eax, 6
	movzx	eax, BYTE PTR _ardRegs[eax+4]
	add	eax, DWORD PTR _pesf$[ebp]
	mov	ecx, DWORD PTR _ppdw$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2251
	jmp	$L1460
; Line 2253
$L1523:
; Line 2254
	cmp	DWORD PTR _r$[ebp], 4
	je	$L1525
	cmp	DWORD PTR _r$[ebp], 5
	jne	$L1524
$L1525:
; Line 2255
	sub	eax, eax
	jmp	$L1438
; Line 2256
$L1524:
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, 40					; 00000028H
	imul	eax, 6
	movzx	eax, BYTE PTR _ardRegs[eax+4]
	add	eax, DWORD PTR _pesf$[ebp]
	mov	ecx, DWORD PTR _ppdw$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2257
	jmp	$L1460
; Line 2259
$L1526:
; Line 2260
	cmp	DWORD PTR _r$[ebp], 6
	je	$L1527
	cmp	DWORD PTR _r$[ebp], 7
	je	$L1527
; Line 2261
	sub	eax, eax
	jmp	$L1438
; Line 2262
$L1527:
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, 48					; 00000030H
	imul	eax, 6
	movzx	eax, BYTE PTR _ardRegs[eax+4]
	add	eax, DWORD PTR _pesf$[ebp]
	mov	ecx, DWORD PTR _ppdw$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2263
	jmp	$L1460
; Line 2265
$L1528:
; Line 2266
	sub	eax, eax
	jmp	$L1438
; Line 2267
	jmp	$L1460
$L1459:
	cmp	DWORD PTR -52+[ebp], 112		; 00000070H
	jg	$L2087
	je	$L1479
	cmp	DWORD PTR -52+[ebp], 48			; 00000030H
	jg	$L2088
	je	$L1470
	cmp	DWORD PTR -52+[ebp], 0
	je	$L1463
	cmp	DWORD PTR -52+[ebp], 16			; 00000010H
	je	$L1468
	cmp	DWORD PTR -52+[ebp], 32			; 00000020H
	je	$L1469
	jmp	$L1528
$L2088:
	cmp	DWORD PTR -52+[ebp], 64			; 00000040H
	je	$L1472
	cmp	DWORD PTR -52+[ebp], 80			; 00000050H
	je	$L1475
	cmp	DWORD PTR -52+[ebp], 96			; 00000060H
	je	$L1478
	jmp	$L1528
$L2087:
	cmp	DWORD PTR -52+[ebp], 192		; 000000c0H
	jg	$L2089
	je	$L1519
	cmp	DWORD PTR -52+[ebp], 128		; 00000080H
	je	$L1482
	cmp	DWORD PTR -52+[ebp], 144		; 00000090H
	je	$L1480
	cmp	DWORD PTR -52+[ebp], 176		; 000000b0H
	je	$L1518
	jmp	$L1528
$L2089:
	cmp	DWORD PTR -52+[ebp], 208		; 000000d0H
	je	$L1521
	cmp	DWORD PTR -52+[ebp], 224		; 000000e0H
	je	$L1523
	cmp	DWORD PTR -52+[ebp], 240		; 000000f0H
	je	$L1526
	jmp	$L1528
$L1460:
; Line 2268
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _pSize$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2269
	mov	eax, DWORD PTR _fSuccess$[ebp]
	jmp	$L1438
; Line 2270
$L1438:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86CopyOperand ENDP
_TEXT	ENDS
PUBLIC	_x86AllocBP
_DATA	SEGMENT
$SG1544	DB	'Out of breakpoints', 0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_flBP$ = 8
_sel$ = 12
_off$ = 16
_i$ = -4
_pbpdCandidate$ = -8
_pbpd$ = -12
_x86AllocBP PROC NEAR
; Line 2274
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
; Line 2276
	mov	DWORD PTR _pbpdCandidate$[ebp], 0
; Line 2277
	mov	DWORD PTR _pbpd$[ebp], OFFSET FLAT:_abpdGlobal
; Line 2279
	mov	DWORD PTR _i$[ebp], 0
	jmp	$L1536
$L1537:
	inc	DWORD PTR _i$[ebp]
	add	DWORD PTR _pbpd$[ebp], 20		; 00000014H
$L1536:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jae	$L1538
; Line 2280
	mov	eax, DWORD PTR _pbpd$[ebp]
	test	BYTE PTR [eax+17], 1
	jne	$L1539
	cmp	DWORD PTR _pbpdCandidate$[ebp], 0
	jne	$L1539
; Line 2281
	mov	eax, DWORD PTR _pbpd$[ebp]
	mov	DWORD PTR _pbpdCandidate$[ebp], eax
; Line 2282
$L1539:
	mov	eax, DWORD PTR _pbpd$[ebp]
	mov	eax, DWORD PTR [eax+16]
	and	eax, DWORD PTR _flBP$[ebp]
	cmp	eax, DWORD PTR _flBP$[ebp]
	jne	$L1540
; Line 2283
	mov	eax, DWORD PTR _pbpd$[ebp]
	mov	ecx, DWORD PTR _sel$[ebp]
	cmp	DWORD PTR [eax], ecx
	jne	$L1541
	mov	eax, DWORD PTR _pbpd$[ebp]
	mov	ecx, DWORD PTR _off$[ebp]
	cmp	DWORD PTR [eax+4], ecx
	jne	$L1541
; Line 2284
	mov	eax, DWORD PTR _pbpd$[ebp]
	mov	DWORD PTR _pbpdCandidate$[ebp], eax
; Line 2285
	jmp	$L1538
; Line 2287
$L1541:
; Line 2288
$L1540:
	jmp	$L1537
$L1538:
; Line 2289
	cmp	DWORD PTR _pbpdCandidate$[ebp], 0
	je	$L1542
; Line 2290
	inc	DWORD PTR _cbpdGlobal
; Line 2291
	mov	eax, DWORD PTR _pbpdCandidate$[ebp]
	mov	DWORD PTR _pbpd$[ebp], eax
; Line 2292
	mov	eax, DWORD PTR _flBP$[ebp]
	or	eax, 768				; 00000300H
	mov	ecx, DWORD PTR _pbpd$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 2293
	mov	eax, DWORD PTR _sel$[ebp]
	mov	ecx, DWORD PTR _pbpd$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2294
	mov	eax, DWORD PTR _off$[ebp]
	mov	ecx, DWORD PTR _pbpd$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 2295
	mov	eax, DWORD PTR _pbpd$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 2297
	jmp	$L1543
$L1542:
; Line 2298
	push	OFFSET FLAT:$SG1544
	call	_printf
	add	esp, 4
$L1543:
; Line 2299
	mov	eax, DWORD PTR _pbpdCandidate$[ebp]
	jmp	$L1532
; Line 2300
$L1532:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86AllocBP ENDP
_TEXT	ENDS
PUBLIC	_x86DisableBP
_DATA	SEGMENT
$SG1551	DB	'Breakpoint %d disabled', 0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_i$ = 8
_x86DisableBP PROC NEAR
; Line 2304
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 2305
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jae	$L1548
; Line 2306
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	test	BYTE PTR _abpdGlobal[eax+17], 1
	je	$L1549
; Line 2307
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	test	BYTE PTR _abpdGlobal[eax+17], 2
	je	$L1550
; Line 2308
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	and	DWORD PTR _abpdGlobal[eax+16], -513	; fffffdffH
; Line 2309
	push	DWORD PTR _i$[ebp]
	push	OFFSET FLAT:$SG1551
	call	_printf
	add	esp, 8
; Line 2311
$L1550:
; Line 2312
$L1549:
	mov	eax, 1
	jmp	$L1547
; Line 2314
$L1548:
	sub	eax, eax
	jmp	$L1547
; Line 2315
$L1547:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86DisableBP ENDP
_TEXT	ENDS
PUBLIC	_x86EnableBP
_DATA	SEGMENT
$SG1558	DB	'Breakpoint %d enabled', 0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_i$ = 8
_x86EnableBP PROC NEAR
; Line 2319
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 2320
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jae	$L1555
; Line 2321
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	test	BYTE PTR _abpdGlobal[eax+17], 1
	je	$L1556
; Line 2322
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	test	BYTE PTR _abpdGlobal[eax+17], 2
	jne	$L1557
; Line 2323
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	or	DWORD PTR _abpdGlobal[eax+16], 512	; 00000200H
; Line 2324
	push	DWORD PTR _i$[ebp]
	push	OFFSET FLAT:$SG1558
	call	_printf
	add	esp, 8
; Line 2326
$L1557:
; Line 2327
$L1556:
	mov	eax, 1
	jmp	$L1554
; Line 2329
$L1555:
	sub	eax, eax
	jmp	$L1554
; Line 2330
$L1554:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86EnableBP ENDP
_TEXT	ENDS
PUBLIC	_x86FreeBP
_DATA	SEGMENT
	ORG $+1
$SG1564	DB	'Breakpoint %d cleared', 0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_i$ = 8
_x86FreeBP PROC NEAR
; Line 2334
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 2335
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jae	$L1561
; Line 2336
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	test	BYTE PTR _abpdGlobal[eax+17], 1
	je	$L1562
; Line 2337
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	and	DWORD PTR _abpdGlobal[eax+16], -257	; fffffeffH
; Line 2338
	dec	DWORD PTR _cbpdGlobal
; Line 2339
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	test	BYTE PTR _abpdGlobal[eax+17], 4
	jne	$L1563
; Line 2340
	push	DWORD PTR _i$[ebp]
	push	OFFSET FLAT:$SG1564
	call	_printf
	add	esp, 8
; Line 2341
$L1563:
; Line 2342
$L1562:
	mov	eax, 1
	jmp	$L1560
; Line 2344
$L1561:
	sub	eax, eax
	jmp	$L1560
; Line 2345
$L1560:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86FreeBP ENDP
_TEXT	ENDS
PUBLIC	_x86ListBPs
_DATA	SEGMENT
	ORG $+1
$SG1574	DB	'%2x:   INT:%08x', 00H
$SG1576	DB	'%2x: %c%04x:%08x', 00H
	ORG $+3
$SG1578	DB	' OFF ', 00H
	ORG $+2
$SG1581	DB	' TMP ', 00H
	ORG $+2
$SG1583	DB	'     ', 00H
	ORG $+2
$SG1585	DB	'(%s=%x)', 00H
$SG1586	DB	0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_i$ = -4
_pbpd$ = -8
_x86ListBPs PROC NEAR
; Line 2349
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
; Line 2351
	mov	DWORD PTR _pbpd$[ebp], OFFSET FLAT:_abpdGlobal
; Line 2353
	mov	DWORD PTR _i$[ebp], 0
	jmp	$L1569
$L1570:
	inc	DWORD PTR _i$[ebp]
	add	DWORD PTR _pbpd$[ebp], 20		; 00000014H
$L1569:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jae	$L1571
; Line 2354
	mov	eax, DWORD PTR _pbpd$[ebp]
	test	BYTE PTR [eax+17], 1
	je	$L1572
; Line 2355
	mov	eax, DWORD PTR _pbpd$[ebp]
	test	BYTE PTR [eax+17], 16			; 00000010H
	je	$L1573
; Line 2356
	mov	eax, DWORD PTR _pbpd$[ebp]
	push	DWORD PTR [eax+4]
	push	DWORD PTR _i$[ebp]
	push	OFFSET FLAT:$SG1574
	call	_printf
	add	esp, 12					; 0000000cH
; Line 2357
	jmp	$L1575
$L1573:
; Line 2360
	mov	eax, DWORD PTR _pbpd$[ebp]
	push	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _pbpd$[ebp]
	movzx	eax, WORD PTR [eax]
	push	eax
	push	0
	mov	eax, DWORD PTR _pbpd$[ebp]
	push	DWORD PTR [eax]
	call	_x86AddrType
	add	esp, 8
	movsx	eax, al
	push	eax
	push	DWORD PTR _i$[ebp]
	push	OFFSET FLAT:$SG1576
	call	_printf
	add	esp, 20					; 00000014H
$L1575:
; Line 2361
	mov	eax, DWORD PTR _pbpd$[ebp]
	test	BYTE PTR [eax+17], 2
	jne	$L1577
; Line 2362
	push	OFFSET FLAT:$SG1578
	call	_printf
	add	esp, 4
; Line 2363
	jmp	$L1579
$L1577:
	mov	eax, DWORD PTR _pbpd$[ebp]
	test	BYTE PTR [eax+17], 4
	je	$L1580
; Line 2364
	push	OFFSET FLAT:$SG1581
	call	_printf
	add	esp, 4
; Line 2365
	jmp	$L1582
$L1580:
; Line 2366
	push	OFFSET FLAT:$SG1583
	call	_printf
	add	esp, 4
$L1582:
$L1579:
; Line 2367
	mov	eax, DWORD PTR _pbpd$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$L1584
; Line 2368
	mov	eax, DWORD PTR _pbpd$[ebp]
	push	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _pbpd$[ebp]
	mov	eax, DWORD PTR [eax+8]
	dec	eax
	imul	eax, 6
	push	DWORD PTR _ardRegs[eax]
	push	OFFSET FLAT:$SG1585
	call	_printf
	add	esp, 12					; 0000000cH
; Line 2369
$L1584:
	push	OFFSET FLAT:$SG1586
	call	_printf
	add	esp, 4
; Line 2371
$L1572:
	jmp	$L1570
$L1571:
; Line 2372
$L1566:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86ListBPs ENDP
_pesf$ = 8
_flBP$ = 12
_sel$ = 16
_off$ = 20
_i$ = -4
_pbpd$ = -8
_x86FindBP PROC NEAR
; Line 2376
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
; Line 2378
	mov	DWORD PTR _pbpd$[ebp], OFFSET FLAT:_abpdGlobal
; Line 2380
	mov	DWORD PTR _i$[ebp], 0
	jmp	$L1594
$L1595:
	inc	DWORD PTR _i$[ebp]
	add	DWORD PTR _pbpd$[ebp], 20		; 00000014H
$L1594:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jae	$L1596
; Line 2381
	mov	eax, DWORD PTR _pbpd$[ebp]
	mov	eax, DWORD PTR [eax+16]
	and	eax, DWORD PTR _flBP$[ebp]
	cmp	eax, DWORD PTR _flBP$[ebp]
	jne	$L1597
; Line 2382
	mov	eax, DWORD PTR _pbpd$[ebp]
	mov	ecx, DWORD PTR _sel$[ebp]
	cmp	DWORD PTR [eax], ecx
	jne	$L1598
	mov	eax, DWORD PTR _pbpd$[ebp]
	mov	ecx, DWORD PTR _off$[ebp]
	cmp	DWORD PTR [eax+4], ecx
	jne	$L1598
; Line 2383
	mov	eax, DWORD PTR _pbpd$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	$L1599
; Line 2384
	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	jmp	$L1591
; Line 2385
	jmp	$L1600
$L1599:
	mov	eax, DWORD PTR _pbpd$[ebp]
	mov	eax, DWORD PTR [eax+8]
	dec	eax
	push	eax
	push	DWORD PTR _pesf$[ebp]
	call	_x86RegValue
	add	esp, 8
	mov	ecx, DWORD PTR _pbpd$[ebp]
	cmp	eax, DWORD PTR [ecx+12]
	jne	$L1601
; Line 2386
	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	jmp	$L1591
; Line 2387
$L1601:
$L1600:
$L1598:
$L1597:
	jmp	$L1595
$L1596:
; Line 2388
	sub	eax, eax
	jmp	$L1591
; Line 2389
$L1591:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86FindBP ENDP
_TEXT	ENDS
PUBLIC	_x86ApplyBPs
_TEXT	SEGMENT
_pesf$ = 8
_i$ = -4
_pbpd$ = -8
_x86ApplyBPs PROC NEAR
; Line 2402
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
; Line 2404
	mov	DWORD PTR _pbpd$[ebp], OFFSET FLAT:_abpdGlobal
; Line 2406
	mov	DWORD PTR _i$[ebp], 0
	jmp	$L1606
$L1607:
	inc	DWORD PTR _i$[ebp]
	add	DWORD PTR _pbpd$[ebp], 20		; 00000014H
$L1606:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jae	$L1608
; Line 2407
	push	DWORD PTR _pbpd$[ebp]
	push	DWORD PTR _pesf$[ebp]
	call	_x86SetBP
	add	esp, 8
	jmp	$L1607
$L1608:
; Line 2408
$L1603:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86ApplyBPs ENDP
_pesf$ = 8
_pbpd$ = 12
_x86SetBP PROC NEAR
; Line 2427
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 2428
	mov	eax, DWORD PTR _pbpd$[ebp]
	mov	eax, DWORD PTR [eax+16]
	and	ah, 11					; 0000000bH
	cmp	ah, 3
	jne	$L1612
; Line 2429
	cmp	DWORD PTR _pbpdTempDisable, 0
	jne	$L1613
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	ecx, DWORD PTR _pbpd$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	DWORD PTR [eax+104], ecx
	jne	$L1613
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	ecx, DWORD PTR _pbpd$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [eax+100], ecx
	jne	$L1613
; Line 2430
	mov	eax, DWORD PTR _pbpd$[ebp]
	mov	DWORD PTR _pbpdTempDisable, eax
; Line 2431
	mov	eax, DWORD PTR _pesf$[ebp]
	or	DWORD PTR [eax+108], 256		; 00000100H
; Line 2433
	jmp	$L1614
$L1613:
; Line 2434
	mov	eax, DWORD PTR _pbpd$[ebp]
	and	DWORD PTR [eax+16], -256		; ffffff00H
; Line 2435
	mov	eax, DWORD PTR _pbpd$[ebp]
	push	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _pbpd$[ebp]
	push	DWORD PTR [eax]
	call	_x86GetByte
	add	esp, 8
	movzx	eax, al
	or	eax, 2048				; 00000800H
	mov	ecx, DWORD PTR _pbpd$[ebp]
	or	DWORD PTR [ecx+16], eax
; Line 2436
	push	204					; 000000ccH
	mov	eax, DWORD PTR _pbpd$[ebp]
	push	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _pbpd$[ebp]
	push	DWORD PTR [eax]
	call	_x86SetByte
	add	esp, 12					; 0000000cH
; Line 2437
$L1614:
; Line 2439
$L1612:
$L1611:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86SetBP ENDP
_TEXT	ENDS
PUBLIC	_x86RemoveBPs
_TEXT	SEGMENT
_pesf$ = 8
_i$ = -4
_pbpd$ = -8
_x86RemoveBPs PROC NEAR
; Line 2459
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
; Line 2461
	mov	DWORD PTR _pbpd$[ebp], OFFSET FLAT:_abpdGlobal
; Line 2463
	mov	DWORD PTR _i$[ebp], 0
	jmp	$L1619
$L1620:
	inc	DWORD PTR _i$[ebp]
	add	DWORD PTR _pbpd$[ebp], 20		; 00000014H
$L1619:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jae	$L1621
; Line 2464
	mov	eax, DWORD PTR _pbpd$[ebp]
	mov	eax, DWORD PTR [eax+16]
	and	ah, 9
	cmp	ah, 9
	jne	$L1622
; Line 2465
	mov	eax, DWORD PTR _pbpd$[ebp]
	and	DWORD PTR [eax+16], -2049		; fffff7ffH
; Line 2466
	mov	eax, DWORD PTR _pbpd$[ebp]
	push	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _pbpd$[ebp]
	push	DWORD PTR [eax]
	call	_x86GetByte
	add	esp, 8
	movzx	eax, al
	cmp	eax, 204				; 000000ccH
	jne	$L1623
; Line 2467
	mov	eax, DWORD PTR _pbpd$[ebp]
	push	DWORD PTR [eax+16]
	mov	eax, DWORD PTR _pbpd$[ebp]
	push	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _pbpd$[ebp]
	push	DWORD PTR [eax]
	call	_x86SetByte
	add	esp, 12					; 0000000cH
; Line 2468
$L1623:
	mov	eax, DWORD PTR _pbpd$[ebp]
	test	BYTE PTR [eax+17], 4
	je	$L1624
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	ecx, DWORD PTR _pbpd$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	DWORD PTR [eax+104], ecx
	jne	$L1624
	mov	eax, DWORD PTR _pbpd$[ebp]
	mov	ecx, DWORD PTR _pesf$[ebp]
	mov	ecx, DWORD PTR [ecx+100]
	cmp	DWORD PTR [eax+4], ecx
	jne	$L1624
; Line 2469
	push	DWORD PTR _i$[ebp]
	call	_x86FreeBP
	add	esp, 4
; Line 2470
$L1624:
; Line 2471
$L1622:
	jmp	$L1620
$L1621:
; Line 2472
$L1616:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86RemoveBPs ENDP
_TEXT	ENDS
PUBLIC	_x86PortTrap
_TEXT	SEGMENT
_piopm$ = 8
_wPort$ = 12
_x86PortTrap PROC NEAR
; Line 2476
	push	ebp
	mov	ebp, esp
	sub	esp, 4
	push	ebx
	push	esi
	push	edi
; Line 2477
	movzx	eax, WORD PTR _wPort$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR _piopm$[ebp]
	movzx	ebx, BYTE PTR [eax+ecx]
	mov	DWORD PTR -4+[ebp], ebx
	mov	ebx, 1
	movzx	eax, WORD PTR _wPort$[ebp]
	cdq
	xor	eax, edx
	sub	eax, edx
	and	eax, 7
	xor	eax, edx
	sub	eax, edx
	mov	cl, al
	shl	ebx, cl
	mov	eax, DWORD PTR -4+[ebp]
	or	al, bl
	movzx	ecx, WORD PTR _wPort$[ebp]
	sar	ecx, 3
	mov	edx, DWORD PTR _piopm$[ebp]
	mov	BYTE PTR [ecx+edx], al
; Line 2478
$L1627:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86PortTrap ENDP
_TEXT	ENDS
PUBLIC	_x86PortUntrap
_TEXT	SEGMENT
_piopm$ = 8
_wPort$ = 12
_x86PortUntrap PROC NEAR
; Line 2482
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 2483
	movzx	eax, WORD PTR _wPort$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR _piopm$[ebp]
	movzx	ebx, BYTE PTR [eax+ecx]
	mov	esi, 1
	movzx	eax, WORD PTR _wPort$[ebp]
	cdq
	xor	eax, edx
	sub	eax, edx
	and	eax, 7
	xor	eax, edx
	sub	eax, edx
	mov	cl, al
	shl	esi, cl
	not	esi
	and	ebx, esi
	movzx	eax, WORD PTR _wPort$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR _piopm$[ebp]
	mov	BYTE PTR [eax+ecx], bl
; Line 2484
$L1630:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86PortUntrap ENDP
_TEXT	ENDS
PUBLIC	_x86PortTrapped
_TEXT	SEGMENT
_piopm$ = 8
_wPort$ = 12
_x86PortTrapped PROC NEAR
; Line 2488
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 2497
	movzx	eax, WORD PTR _wPort$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR _piopm$[ebp]
	movzx	ebx, BYTE PTR [eax+ecx]
	mov	esi, 1
	movzx	eax, WORD PTR _wPort$[ebp]
	cdq
	xor	eax, edx
	sub	eax, edx
	and	eax, 7
	xor	eax, edx
	sub	eax, edx
	mov	cl, al
	shl	esi, cl
	and	ebx, esi
	cmp	ebx, 1
	sbb	eax, eax
	inc	eax
	jmp	$L1633
; Line 2498
$L1633:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86PortTrapped ENDP
_TEXT	ENDS
PUBLIC	_x86DispTrapRange
_TEXT	SEGMENT
_dwFirst$ = 8
_dwLast$ = 12
_pszMsg$ = -4
_x86DispTrapRange PROC NEAR
; Line 2502
	push	ebp
	mov	ebp, esp
	sub	esp, 4
	push	ebx
	push	esi
	push	edi
; Line 2507
	mov	DWORD PTR _pszMsg$[ebp], OFFSET FLAT:_?szTrapMsg@?1??x86DispTrapRange@@9@9$S1639
; Line 2508
	mov	eax, DWORD PTR _dwLast$[ebp]
	dec	eax
	cmp	eax, DWORD PTR _dwFirst$[ebp]
	je	$L1642
; Line 2509
	mov	DWORD PTR _pszMsg$[ebp], OFFSET FLAT:_?szTrapMsg2@?1??x86DispTrapRange@@9@9$S1641
; Line 2510
$L1642:
	mov	eax, DWORD PTR _dwLast$[ebp]
	dec	eax
	push	eax
	push	DWORD PTR _dwFirst$[ebp]
	push	DWORD PTR _pszMsg$[ebp]
	call	_printf
	add	esp, 12					; 0000000cH
; Line 2511
$L1636:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86DispTrapRange ENDP
_TEXT	ENDS
PUBLIC	_x86StepSize
_TEXT	SEGMENT
_pesf$ = 8
_selCode$ = 12
_off$ = 16
_i$ = -12
_n$ = -8
_bOp$ = -4
_bModRM$ = -16
_x86StepSize PROC NEAR
; Line 2515
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
; Line 2525
	lea	eax, DWORD PTR _bModRM$[ebp]
	push	eax
	lea	eax, DWORD PTR _bOp$[ebp]
	push	eax
	push	0
	push	0
	push	DWORD PTR _off$[ebp]
	push	DWORD PTR _selCode$[ebp]
	push	DWORD PTR _pesf$[ebp]
	call	_x86Decode
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _n$[ebp], eax
; Line 2530
	mov	DWORD PTR _i$[ebp], 0
	jmp	$L1654
$L1655:
	inc	DWORD PTR _i$[ebp]
$L1654:
	cmp	DWORD PTR _i$[ebp], 25			; 00000019H
	jae	$L1656
; Line 2531
	mov	eax, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _?abTransferOp@?1??x86StepSize@@9@9$S1653[eax]
	movzx	ecx, BYTE PTR _bOp$[ebp]
	cmp	eax, ecx
	jne	$L1657
; Line 2532
	sub	eax, eax
	jmp	$L1647
; Line 2534
$L1657:
	jmp	$L1655
$L1656:
; Line 2535
	movzx	eax, BYTE PTR _bOp$[ebp]
	cmp	eax, 255				; 000000ffH
	jne	$L1658
	movzx	eax, BYTE PTR _bModRM$[ebp]
	and	eax, 56					; 00000038H
	mov	ecx, 32					; 00000020H
	and	ecx, -8					; fffffff8H
	cmp	eax, ecx
	je	$L1659
	movzx	eax, BYTE PTR _bModRM$[ebp]
	and	eax, 56					; 00000038H
	mov	ecx, 40					; 00000028H
	and	ecx, -8					; fffffff8H
	cmp	eax, ecx
	jne	$L1658
$L1659:
; Line 2536
	sub	eax, eax
	jmp	$L1647
; Line 2538
$L1658:
	mov	eax, DWORD PTR _n$[ebp]
	jmp	$L1647
; Line 2539
$L1647:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86StepSize ENDP
_TEXT	ENDS
PUBLIC	_x86Trace
_TEXT	SEGMENT
_bOp$ = -4
_pesf$ = 8
_fl$ = 12
_i$ = -8
_x86Trace PROC NEAR
; Line 2543
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
; Line 2545
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+100]
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+104]
	call	_x86GetByte
	add	esp, 8
	mov	BYTE PTR _bOp$[ebp], al
; Line 2547
	mov	eax, DWORD PTR _pesf$[ebp]
	or	DWORD PTR [eax+108], 256		; 00000100H
; Line 2548
	mov	eax, DWORD PTR _fl$[ebp]
	or	eax, 5
	or	DWORD PTR _flTrace, eax
; Line 2549
	movzx	eax, BYTE PTR _bOp$[ebp]
	cmp	eax, 99					; 00000063H
	jne	$L1665
	mov	eax, DWORD PTR _pesf$[ebp]
	test	BYTE PTR [eax+106], 1
	je	$L1665
; Line 2550
	and	DWORD PTR _flTrace, -5			; fffffffbH
; Line 2552
$L1665:
	test	BYTE PTR _flTrace, 2
	je	$L1666
; Line 2553
	and	DWORD PTR _flKeyEvent, -3		; fffffffdH
; Line 2555
$L1666:
	test	BYTE PTR _flTrace, 128			; 00000080H
	jne	$L1668
	movzx	eax, BYTE PTR _bOp$[ebp]
	cmp	eax, 156				; 0000009cH
	jne	$L1667
$L1668:
; Line 2556
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+100]
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+104]
	push	DWORD PTR _pesf$[ebp]
	call	_x86StepSize
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR _i$[ebp], 0
	je	$L1669
; Line 2557
	mov	eax, DWORD PTR _pesf$[ebp]
	and	DWORD PTR [eax+108], -257		; fffffeffH
; Line 2558
	movzx	eax, BYTE PTR _bOp$[ebp]
	cmp	eax, 156				; 0000009cH
	je	$L1670
	test	BYTE PTR _flTrace+1, 1
	jne	$L1670
; Line 2559
	and	DWORD PTR _flTrace, -5			; fffffffbH
; Line 2560
$L1670:
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+100]
	add	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+104]
	push	1024					; 00000400H
	call	_x86AllocBP
	add	esp, 12					; 0000000cH
	or	eax, eax
	jne	$L1671
; Line 2561
	and	DWORD PTR _flTrace, -488		; fffffe18H
; Line 2562
	sub	eax, eax
	jmp	$L1662
; Line 2564
$L1671:
; Line 2565
$L1669:
; Line 2566
$L1667:
	test	BYTE PTR _flTrace, 64			; 00000040H
	je	$L1672
; Line 2567
	and	DWORD PTR _flTrace, -33			; ffffffdfH
; Line 2569
$L1672:
	test	BYTE PTR _flTrace, 32			; 00000020H
	je	$L1673
; Line 2570
	and	DWORD PTR _flTrace, -65			; ffffffbfH
; Line 2572
$L1673:
	movzx	eax, BYTE PTR _bOp$[ebp]
	cmp	eax, 204				; 000000ccH
	jne	$L1674
; Line 2573
	mov	eax, DWORD PTR _pesf$[ebp]
	inc	DWORD PTR [eax+100]
; Line 2574
	test	BYTE PTR _flTrace, 32			; 00000020H
	je	$L1675
; Line 2575
	push	DWORD PTR _pesf$[ebp]
	call	_x86RegDump
	add	esp, 4
; Line 2576
$L1675:
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+100]
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+104]
	push	DWORD PTR _pesf$[ebp]
	call	_x86InsDump
	add	esp, 12					; 0000000cH
; Line 2577
	and	DWORD PTR _flTrace, -488		; fffffe18H
; Line 2578
	sub	eax, eax
	jmp	$L1662
; Line 2580
$L1674:
	mov	eax, 1
	jmp	$L1662
; Line 2581
$L1662:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86Trace ENDP
_TEXT	ENDS
PUBLIC	_x86BPCommand
EXTRN	_ParseValue:NEAR
EXTRN	_ParseReg:NEAR
_DATA	SEGMENT
	ORG $+2
$SG1700	DB	'Breakpoint commands', 0aH, 09H, 'bc', 09H, 'clear breakp'
	DB	'oint', 0aH, 09H, 'bd', 09H, 'disable breakpoint', 0aH, 09H, 'b'
	DB	'e', 09H, 'enable breakpoint', 0aH, 09H, 'bl', 09H, 'list brea'
	DB	'kpoints', 0aH, 09H, 'bt', 09H, 'set breakpoint (eg, BT 70:100'
	DB	')', 0aH, 09H, 'bi', 09H, 'set int breakpoint (eg, BI 10 AH=0)'
	DB	0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_pesf$ = 8
_pchCmd$ = 12
_sel$ = 16
_off$ = 20
_pchAddr$ = 24
_pchArgs$ = 28
_ch$ = -12
_i$ = -8
_flBP$ = -4
_pbpd$ = -16
_x86BPCommand PROC NEAR
; Line 2585
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	push	edi
; Line 2587
	mov	DWORD PTR _flBP$[ebp], 0
; Line 2590
	mov	eax, DWORD PTR _pchCmd$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	al, 32					; 00000020H
	mov	BYTE PTR _ch$[ebp], al
	inc	DWORD PTR _pchCmd$[ebp]
; Line 2592
	movsx	eax, BYTE PTR _ch$[ebp]
	mov	DWORD PTR -24+[ebp], eax
	jmp	$L1687
; Line 2593
$L1691:
; Line 2596
	mov	eax, DWORD PTR _pchAddr$[ebp]
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 42					; 0000002aH
	jne	$L1692
; Line 2597
	jmp	$L1688
; Line 2598
$L1692:
$L1693:
; Line 2600
	mov	eax, DWORD PTR _pchAddr$[ebp]
	cmp	DWORD PTR _pchArgs$[ebp], eax
	jne	$L1694
; Line 2601
	sub	eax, eax
	jmp	$L1682
; Line 2602
$L1694:
	jmp	$L1688
; Line 2603
	jmp	$L1688
$L1687:
	cmp	DWORD PTR -24+[ebp], 99			; 00000063H
	jl	$L1688
	cmp	DWORD PTR -24+[ebp], 101		; 00000065H
	jle	$L1691
	cmp	DWORD PTR -24+[ebp], 105		; 00000069H
	je	$L1693
	cmp	DWORD PTR -24+[ebp], 112		; 00000070H
	je	$L1693
	jmp	$L1688
$L1688:
; Line 2605
	movsx	eax, BYTE PTR _ch$[ebp]
	mov	DWORD PTR -28+[ebp], eax
	jmp	$L1695
; Line 2606
$L1699:
; Line 2614
	push	OFFSET FLAT:$SG1700
	call	_printf
	add	esp, 4
; Line 2615
	jmp	$L1696
; Line 2617
$L1701:
; Line 2618
	mov	eax, DWORD PTR _pchAddr$[ebp]
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 42					; 0000002aH
	jne	$L1702
; Line 2619
	mov	DWORD PTR _i$[ebp], 0
	jmp	$L1703
$L1704:
	inc	DWORD PTR _i$[ebp]
$L1703:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jge	$L1705
; Line 2620
	push	DWORD PTR _i$[ebp]
	call	_x86FreeBP
	add	esp, 4
	jmp	$L1704
$L1705:
; Line 2621
	jmp	$L1696
; Line 2623
$L1702:
	push	DWORD PTR _off$[ebp]
	call	_x86FreeBP
	add	esp, 4
	jmp	$L1682
; Line 2625
$L1706:
; Line 2626
	mov	eax, DWORD PTR _pchAddr$[ebp]
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 42					; 0000002aH
	jne	$L1707
; Line 2627
	mov	DWORD PTR _i$[ebp], 0
	jmp	$L1708
$L1709:
	inc	DWORD PTR _i$[ebp]
$L1708:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jge	$L1710
; Line 2628
	push	DWORD PTR _i$[ebp]
	call	_x86DisableBP
	add	esp, 4
	jmp	$L1709
$L1710:
; Line 2629
	jmp	$L1696
; Line 2631
$L1707:
	push	DWORD PTR _off$[ebp]
	call	_x86DisableBP
	add	esp, 4
	jmp	$L1682
; Line 2633
$L1711:
; Line 2634
	mov	eax, DWORD PTR _pchAddr$[ebp]
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 42					; 0000002aH
	jne	$L1712
; Line 2635
	mov	DWORD PTR _i$[ebp], 0
	jmp	$L1713
$L1714:
	inc	DWORD PTR _i$[ebp]
$L1713:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jge	$L1715
; Line 2636
	push	DWORD PTR _i$[ebp]
	call	_x86EnableBP
	add	esp, 4
	jmp	$L1714
$L1715:
; Line 2637
	jmp	$L1696
; Line 2639
$L1712:
	push	DWORD PTR _off$[ebp]
	call	_x86EnableBP
	add	esp, 4
	jmp	$L1682
; Line 2641
$L1716:
; Line 2642
	push	DWORD PTR _pesf$[ebp]
	call	_x86ListBPs
	add	esp, 4
; Line 2643
	jmp	$L1696
; Line 2645
$L1717:
; Line 2646
	mov	DWORD PTR _sel$[ebp], 0
; Line 2647
	mov	DWORD PTR _flBP$[ebp], 4096		; 00001000H
; Line 2650
$L1718:
; Line 2652
	push	DWORD PTR _off$[ebp]
	push	DWORD PTR _sel$[ebp]
	push	DWORD PTR _flBP$[ebp]
	call	_x86AllocBP
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pbpd$[ebp], eax
; Line 2653
	cmp	DWORD PTR _pbpd$[ebp], 0
	jne	$L1719
; Line 2654
	sub	eax, eax
	jmp	$L1682
; Line 2655
$L1719:
	push	DWORD PTR _pchArgs$[ebp]
	call	_ParseReg
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR _i$[ebp], 0
	je	$L1720
	mov	eax, DWORD PTR _i$[ebp]
	dec	eax
	imul	eax, 6
	movzx	eax, BYTE PTR _ardRegs[eax+5]
	or	eax, eax
	je	$L1720
; Line 2656
	mov	eax, DWORD PTR _i$[ebp]
	dec	eax
	imul	eax, 6
	push	DWORD PTR _ardRegs[eax]
	call	_nstrlen
	add	esp, 4
	add	DWORD PTR _pchArgs$[ebp], eax
; Line 2657
	mov	eax, DWORD PTR _pchArgs$[ebp]
	mov	DWORD PTR -20+[ebp], eax
	inc	DWORD PTR _pchArgs$[ebp]
	mov	eax, DWORD PTR -20+[ebp]
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 61					; 0000003dH
	je	$L1721
; Line 2658
	sub	eax, eax
	jmp	$L1682
; Line 2659
$L1721:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pbpd$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 2660
	push	1
	mov	eax, DWORD PTR _pbpd$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	0
	push	DWORD PTR _pchArgs$[ebp]
	push	DWORD PTR _pesf$[ebp]
	call	_ParseValue
	add	esp, 20					; 00000014H
; Line 2662
$L1720:
	jmp	$L1696
; Line 2664
$L1722:
; Line 2665
	sub	eax, eax
	jmp	$L1682
; Line 2666
	jmp	$L1696
$L1695:
	cmp	DWORD PTR -28+[ebp], 105		; 00000069H
	jg	$L2092
	je	$L1717
	cmp	DWORD PTR -28+[ebp], 63			; 0000003fH
	je	$L1699
	cmp	DWORD PTR -28+[ebp], 99			; 00000063H
	je	$L1701
	cmp	DWORD PTR -28+[ebp], 100		; 00000064H
	je	$L1706
	cmp	DWORD PTR -28+[ebp], 101		; 00000065H
	je	$L1711
	jmp	$L1722
$L2092:
	cmp	DWORD PTR -28+[ebp], 108		; 0000006cH
	je	$L1716
	cmp	DWORD PTR -28+[ebp], 112		; 00000070H
	je	$L1718
	cmp	DWORD PTR -28+[ebp], 116		; 00000074H
	je	$L1718
	jmp	$L1722
$L1696:
; Line 2667
	mov	eax, 1
	jmp	$L1682
; Line 2668
$L1682:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86BPCommand ENDP
_TEXT	ENDS
PUBLIC	_x86DumpCommand
EXTRN	_dtrIDT:FWORD
EXTRN	_pIDT:DWORD
EXTRN	_pTSS:DWORD
EXTRN	_mystrcmpi:NEAR
EXTRN	_sel_Data:WORD
EXTRN	_DOSDumpCommand:NEAR
_DATA	SEGMENT
	ORG $+1
$SG1732	DB	'Dump commands', 0aH, 09H, 'db', 09H, 'dump bytes', 0aH, 09H
	DB	'dw', 09H, 'dump words', 0aH, 09H, 'dd', 09H, 'dump dwords', 0aH
	DB	09H, 'dg', 09H, 'dump GDT info', 0aH, 09H, 'di', 09H, 'dump ID'
	DB	'T info', 0aH, 09H, 'dtss', 09H, 'dump TSS', 0aH, 09H, 'diopm', 09H
	DB	'dump IOPM bitmap', 0aH, 09H, 'dos?', 09H, 'DOS dump commands', 0aH
	DB	00H
$SG1734	DB	'os', 00H
	ORG $+1
$SG1740	DB	'tss', 00H
$SG1743	DB	'iopm', 00H
	ORG $+3
$SG1754	DB	'GDT', 00H
$SG1756	DB	'IDT', 00H
_DATA	ENDS
_TEXT	SEGMENT
_pchArgs$ = 28
_cLines$ = -4
_pesf$ = 8
_pchCmd$ = 12
_sel$ = 16
_off$ = 20
_pchAddr$ = 24
_x86DumpCommand PROC NEAR
; Line 2672
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
; Line 2673
	mov	DWORD PTR _cLines$[ebp], 0
; Line 2675
	mov	eax, DWORD PTR _pchCmd$[ebp]
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 63					; 0000003fH
	jne	$L1731
; Line 2685
	push	OFFSET FLAT:$SG1732
	call	_printf
	add	esp, 4
; Line 2686
	mov	eax, 1
	jmp	$L1729
; Line 2688
$L1731:
	push	OFFSET FLAT:$SG1734
	push	DWORD PTR _pchCmd$[ebp]
	call	_mystrcmpi
	add	esp, 8
	or	eax, eax
	jne	$L1733
; Line 2689
	mov	eax, DWORD PTR _pchCmd$[ebp]
	add	eax, 2
	push	eax
	push	DWORD PTR _pesf$[ebp]
	call	_DOSDumpCommand
	add	esp, 8
	jmp	$L1729
; Line 2694
$L1733:
	mov	eax, DWORD PTR _pchArgs$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	eax, 32					; 00000020H
	movsx	eax, al
	cmp	eax, 108				; 0000006cH
	jne	$L1735
; Line 2695
	inc	DWORD PTR _pchArgs$[ebp]
; Line 2696
	push	1
	lea	eax, DWORD PTR _cLines$[ebp]
	push	eax
	push	0
	push	DWORD PTR _pchArgs$[ebp]
	push	DWORD PTR _pesf$[ebp]
	call	_ParseValue
	add	esp, 20					; 00000014H
	add	DWORD PTR _pchArgs$[ebp], eax
; Line 2698
	jmp	$L1736
$L1735:
	mov	eax, DWORD PTR _pchArgs$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	eax, eax
	je	$L1737
	mov	eax, DWORD PTR _pchArgs$[ebp]
	cmp	DWORD PTR _pchCmd$[ebp], eax
	je	$L1737
; Line 2699
	sub	eax, eax
	jmp	$L1729
; Line 2701
$L1737:
$L1736:
	cmp	DWORD PTR _cLines$[ebp], 0
	jne	$L1738
; Line 2702
	mov	DWORD PTR _cLines$[ebp], 8
; Line 2704
$L1738:
	push	OFFSET FLAT:$SG1740
	push	DWORD PTR _pchCmd$[ebp]
	call	_mystrcmpi
	add	esp, 8
	or	eax, eax
	jne	$L1739
; Line 2705
	push	DWORD PTR _cLines$[ebp]
	push	4
	push	DWORD PTR _pTSS
	movzx	eax, WORD PTR _sel_Data
	push	eax
	call	_x86MemDump
	add	esp, 16					; 00000010H
; Line 2707
	jmp	$L1741
$L1739:
	push	OFFSET FLAT:$SG1743
	push	DWORD PTR _pchCmd$[ebp]
	call	_mystrcmpi
	add	esp, 8
	or	eax, eax
	jne	$L1742
; Line 2708
	push	DWORD PTR _cLines$[ebp]
	push	1
	mov	eax, DWORD PTR _pTSS
	add	eax, 104				; 00000068H
	push	eax
	movzx	eax, WORD PTR _sel_Data
	push	eax
	call	_x86MemDump
	add	esp, 16					; 00000010H
; Line 2710
	jmp	$L1744
$L1742:
; Line 2713
	mov	eax, DWORD PTR _pchCmd$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	eax, 32					; 00000020H
	movsx	eax, al
	mov	DWORD PTR -8+[ebp], eax
	jmp	$L1745
; Line 2715
$L1749:
; Line 2716
	push	DWORD PTR _cLines$[ebp]
	push	1
	push	DWORD PTR _off$[ebp]
	push	DWORD PTR _sel$[ebp]
	call	_x86MemDump
	add	esp, 16					; 00000010H
; Line 2717
	mov	DWORD PTR _iSizeLast, 1
; Line 2718
	jmp	$L1746
; Line 2719
$L1750:
; Line 2720
	push	DWORD PTR _cLines$[ebp]
	push	2
	push	DWORD PTR _off$[ebp]
	push	DWORD PTR _sel$[ebp]
	call	_x86MemDump
	add	esp, 16					; 00000010H
; Line 2721
	mov	DWORD PTR _iSizeLast, 2
; Line 2722
	jmp	$L1746
; Line 2723
$L1751:
; Line 2724
	push	DWORD PTR _cLines$[ebp]
	push	4
	push	DWORD PTR _off$[ebp]
	push	DWORD PTR _sel$[ebp]
	call	_x86MemDump
	add	esp, 16					; 00000010H
; Line 2725
	mov	DWORD PTR _iSizeLast, 4
; Line 2726
	jmp	$L1746
; Line 2727
$L1752:
; Line 2728
	push	DWORD PTR _cLines$[ebp]
	push	DWORD PTR _iSizeLast
	push	DWORD PTR _off$[ebp]
	push	DWORD PTR _sel$[ebp]
	call	_x86MemDump
	add	esp, 16					; 00000010H
; Line 2729
	jmp	$L1746
; Line 2737
$L1753:
; Line 2738
	inc	DWORD PTR _pchCmd$[ebp]
	movzx	eax, WORD PTR _off$[ebp]
	push	eax
	push	DWORD PTR _pchCmd$[ebp]
	push	OFFSET FLAT:$SG1754
	push	OFFSET FLAT:_dtrGDT
	push	DWORD PTR _pGDT
	call	_x86DescDump
	add	esp, 20					; 00000014H
; Line 2739
	jmp	$L1746
; Line 2741
$L1755:
; Line 2742
	inc	DWORD PTR _pchCmd$[ebp]
	movzx	eax, WORD PTR _off$[ebp]
	push	eax
	push	DWORD PTR _pchCmd$[ebp]
	push	OFFSET FLAT:$SG1756
	push	OFFSET FLAT:_dtrIDT
	push	DWORD PTR _pIDT
	call	_x86DescDump
	add	esp, 20					; 00000014H
; Line 2743
	jmp	$L1746
; Line 2745
$L1757:
; Line 2747
	mov	eax, DWORD PTR _pchAddr$[ebp]
	cmp	DWORD PTR _pchCmd$[ebp], eax
	jne	$L1758
	mov	eax, DWORD PTR _pchAddr$[ebp]
	cmp	DWORD PTR _pchArgs$[ebp], eax
	je	$L1758
; Line 2748
	push	DWORD PTR _cLines$[ebp]
	push	DWORD PTR _iSizeLast
	push	DWORD PTR _off$[ebp]
	push	DWORD PTR _sel$[ebp]
	call	_x86MemDump
	add	esp, 16					; 00000010H
; Line 2749
	jmp	$L1759
$L1758:
; Line 2750
	sub	eax, eax
	jmp	$L1729
$L1759:
; Line 2751
	jmp	$L1746
$L1745:
	cmp	DWORD PTR -8+[ebp], 103			; 00000067H
	jg	$L2093
	je	$L1753
	cmp	DWORD PTR -8+[ebp], 32			; 00000020H
	je	$L1752
	cmp	DWORD PTR -8+[ebp], 98			; 00000062H
	je	$L1749
	cmp	DWORD PTR -8+[ebp], 100			; 00000064H
	je	$L1751
	jmp	$L1757
$L2093:
	cmp	DWORD PTR -8+[ebp], 105			; 00000069H
	je	$L1755
	cmp	DWORD PTR -8+[ebp], 119			; 00000077H
	je	$L1750
	jmp	$L1757
$L1746:
; Line 2752
$L1744:
$L1741:
; Line 2753
	mov	eax, 1
	jmp	$L1729
; Line 2754
$L1729:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86DumpCommand ENDP
_TEXT	ENDS
PUBLIC	_x86EditCommand
EXTRN	_nstrskip:NEAR
_DATA	SEGMENT
$SG1776	DB	0aH, 00H
	ORG $+2
$SG1778	DB	'%04x:%08x ', 00H
	ORG $+1
$SG1780	DB	' %04x..%04x ', 00H
	ORG $+3
$SG1782	DB	' %02x..%02x', 00H
$SG1783	DB	0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_pesf$ = 8
_pchCmd$ = 12
_sel$ = 16
_off$ = 20
_pchArgs$ = 28
_dw$ = -4
_i$ = -12
_n$ = -8
_fWord$ = -16
_x86EditCommand PROC NEAR
; Line 2758
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
; Line 2760
	mov	DWORD PTR _i$[ebp], 0
; Line 2761
	mov	eax, DWORD PTR _pchCmd$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	eax, 32					; 00000020H
	movsx	eax, al
	sub	eax, 119				; 00000077H
	cmp	eax, 1
	sbb	eax, eax
	neg	eax
	mov	DWORD PTR _fWord$[ebp], eax
; Line 2763
$L1772:
	mov	eax, DWORD PTR _pchArgs$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	eax, eax
	je	$L1773
; Line 2764
	push	1
	lea	eax, DWORD PTR _dw$[ebp]
	push	eax
	push	0
	push	DWORD PTR _pchArgs$[ebp]
	push	DWORD PTR _pesf$[ebp]
	call	_ParseValue
	add	esp, 20					; 00000014H
	mov	DWORD PTR _n$[ebp], eax
; Line 2765
	cmp	DWORD PTR _n$[ebp], 0
	jne	$L1774
; Line 2766
	jmp	$L1773
; Line 2767
$L1774:
	mov	eax, DWORD PTR _n$[ebp]
	add	DWORD PTR _pchArgs$[ebp], eax
; Line 2768
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR -20+[ebp], eax
	inc	DWORD PTR _i$[ebp]
	mov	eax, 8
	mov	ecx, DWORD PTR _fWord$[ebp]
	shl	ecx, 2
	sub	eax, ecx
	cmp	eax, DWORD PTR -20+[ebp]
	jne	$L1775
; Line 2769
	mov	DWORD PTR _i$[ebp], 1
; Line 2770
	push	OFFSET FLAT:$SG1776
	call	_printf
	add	esp, 4
; Line 2772
$L1775:
	cmp	DWORD PTR _i$[ebp], 1
	jne	$L1777
; Line 2773
	push	DWORD PTR _off$[ebp]
	movzx	eax, WORD PTR _sel$[ebp]
	push	eax
	push	OFFSET FLAT:$SG1778
	call	_printf
	add	esp, 12					; 0000000cH
; Line 2774
$L1777:
	cmp	DWORD PTR _fWord$[ebp], 0
	je	$L1779
; Line 2775
	movzx	eax, WORD PTR _dw$[ebp]
	push	eax
	push	DWORD PTR _off$[ebp]
	push	DWORD PTR _sel$[ebp]
	call	_x86GetWord
	add	esp, 8
	movzx	eax, ax
	push	eax
	push	OFFSET FLAT:$SG1780
	call	_printf
	add	esp, 12					; 0000000cH
; Line 2776
	push	DWORD PTR _dw$[ebp]
	push	DWORD PTR _off$[ebp]
	push	DWORD PTR _sel$[ebp]
	call	_x86SetWord
	add	esp, 12					; 0000000cH
; Line 2778
	jmp	$L1781
$L1779:
; Line 2779
	movzx	eax, BYTE PTR _dw$[ebp]
	push	eax
	push	DWORD PTR _off$[ebp]
	push	DWORD PTR _sel$[ebp]
	call	_x86GetByte
	add	esp, 8
	movzx	eax, al
	push	eax
	push	OFFSET FLAT:$SG1782
	call	_printf
	add	esp, 12					; 0000000cH
; Line 2780
	push	DWORD PTR _dw$[ebp]
	push	DWORD PTR _off$[ebp]
	push	DWORD PTR _sel$[ebp]
	call	_x86SetByte
	add	esp, 12					; 0000000cH
; Line 2781
$L1781:
; Line 2782
	mov	eax, DWORD PTR _fWord$[ebp]
	inc	eax
	add	DWORD PTR _off$[ebp], eax
; Line 2783
	push	32					; 00000020H
	push	DWORD PTR _pchArgs$[ebp]
	call	_nstrskip
	add	esp, 8
	add	DWORD PTR _pchArgs$[ebp], eax
; Line 2784
	jmp	$L1772
$L1773:
; Line 2785
	push	OFFSET FLAT:$SG1783
	call	_printf
	add	esp, 4
; Line 2786
	mov	eax, 1
	jmp	$L1766
; Line 2787
$L1766:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86EditCommand ENDP
_TEXT	ENDS
PUBLIC	_x86PortCommand
EXTRN	_ParseRange:NEAR
_DATA	SEGMENT
	ORG $+2
$SG1802	DB	'Port commands', 0aH, 09H, 'pc', 09H, 'untrap port or ran'
	DB	'ge', 0aH, 09H, 'pd', 09H, 'toggle debugger notification', 0aH
	DB	09H, 'pi', 09H, 'input from port', 0aH, 09H, 'po', 09H, 'outpu'
	DB	't to port', 0aH, 09H, 'pl', 09H, 'list trapped ports', 0aH, 09H
	DB	'pt', 09H, 'trap port or range (eg, PP 40..43)', 0aH, 00H
	ORG $+2
$SG1812	DB	'%9d ports trapped', 0aH, 00H
	ORG $+1
$SG1815	DB	'Port trap notification ON', 0aH, 00H
	ORG $+1
$SG1817	DB	'Port trap notification OFF', 0aH, 00H
$SG1828	DB	'%9d modifications', 0aH, 00H
	ORG $+1
$SG1830	DB	'Port or range required', 0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_dwPort$ = -20
_dwFirst$ = -24
_dwLower$ = -12
_dwUpper$ = -4
_pesf$ = 8
_pchCmd$ = 12
_pchOp$ = 16
_piopm$ = 20
_ch$ = -16
_cch$ = -8
_iTotal$ = -28
_x86PortCommand PROC NEAR
; Line 2791
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
; Line 2796
	mov	DWORD PTR _dwLower$[ebp], 0
; Line 2797
	mov	DWORD PTR _dwUpper$[ebp], 65535		; 0000ffffH
; Line 2798
	lea	eax, DWORD PTR _dwUpper$[ebp]
	push	eax
	lea	eax, DWORD PTR _dwLower$[ebp]
	push	eax
	push	DWORD PTR _pchOp$[ebp]
	push	DWORD PTR _pesf$[ebp]
	call	_ParseRange
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cch$[ebp], eax
; Line 2799
	cmp	DWORD PTR _dwUpper$[ebp], 65535		; 0000ffffH
	jbe	$L1796
; Line 2800
	mov	DWORD PTR _dwUpper$[ebp], 65535		; 0000ffffH
; Line 2802
$L1796:
	mov	eax, DWORD PTR _pchCmd$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	al, 32					; 00000020H
	mov	BYTE PTR _ch$[ebp], al
	inc	DWORD PTR _pchCmd$[ebp]
	movsx	eax, BYTE PTR _ch$[ebp]
	mov	DWORD PTR -32+[ebp], eax
	jmp	$L1797
; Line 2803
$L1801:
; Line 2811
	push	OFFSET FLAT:$SG1802
	call	_printf
	add	esp, 4
; Line 2812
	jmp	$L1798
; Line 2814
$L1803:
; Line 2815
	mov	DWORD PTR _iTotal$[ebp], 0
; Line 2816
	mov	DWORD PTR _dwFirst$[ebp], -1
; Line 2817
	mov	eax, DWORD PTR _dwLower$[ebp]
	mov	DWORD PTR _dwPort$[ebp], eax
	jmp	$L1804
$L1805:
	inc	DWORD PTR _dwPort$[ebp]
$L1804:
	mov	eax, DWORD PTR _dwPort$[ebp]
	cmp	DWORD PTR _dwUpper$[ebp], eax
	jb	$L1806
; Line 2818
	push	DWORD PTR _dwPort$[ebp]
	push	DWORD PTR _piopm$[ebp]
	call	_x86PortTrapped
	add	esp, 8
	or	eax, eax
	jne	$L1807
; Line 2819
	cmp	DWORD PTR _dwFirst$[ebp], -1
	je	$L1808
; Line 2820
	push	DWORD PTR _dwPort$[ebp]
	push	DWORD PTR _dwFirst$[ebp]
	call	_x86DispTrapRange
	add	esp, 8
; Line 2821
	mov	eax, DWORD PTR _dwPort$[ebp]
	sub	eax, DWORD PTR _dwFirst$[ebp]
	add	eax, DWORD PTR _iTotal$[ebp]
	mov	DWORD PTR _iTotal$[ebp], eax
; Line 2822
	mov	DWORD PTR _dwFirst$[ebp], -1
; Line 2824
$L1808:
; Line 2825
	jmp	$L1809
$L1807:
; Line 2826
	cmp	DWORD PTR _dwFirst$[ebp], -1
	jne	$L1810
; Line 2827
	mov	eax, DWORD PTR _dwPort$[ebp]
	mov	DWORD PTR _dwFirst$[ebp], eax
; Line 2828
$L1810:
$L1809:
; Line 2829
	jmp	$L1805
$L1806:
; Line 2830
	cmp	DWORD PTR _dwFirst$[ebp], -1
	je	$L1811
; Line 2831
	push	DWORD PTR _dwPort$[ebp]
	push	DWORD PTR _dwFirst$[ebp]
	call	_x86DispTrapRange
	add	esp, 8
; Line 2832
	mov	eax, DWORD PTR _dwPort$[ebp]
	sub	eax, DWORD PTR _dwFirst$[ebp]
	add	eax, DWORD PTR _iTotal$[ebp]
	mov	DWORD PTR _iTotal$[ebp], eax
; Line 2834
$L1811:
	push	DWORD PTR _iTotal$[ebp]
	push	OFFSET FLAT:$SG1812
	call	_printf
	add	esp, 8
; Line 2835
	jmp	$L1798
; Line 2837
$L1813:
; Line 2838
	test	BYTE PTR _flTrace, 16			; 00000010H
	jne	$L1814
; Line 2839
	or	DWORD PTR _flTrace, 16			; 00000010H
; Line 2840
	push	OFFSET FLAT:$SG1815
	call	_printf
	add	esp, 4
; Line 2842
	jmp	$L1816
$L1814:
; Line 2843
	and	DWORD PTR _flTrace, -17			; ffffffefH
; Line 2844
	push	OFFSET FLAT:$SG1817
	call	_printf
	add	esp, 4
; Line 2845
$L1816:
; Line 2846
	jmp	$L1798
; Line 2848
$L1818:
; Line 2854
	mov	DWORD PTR _iTotal$[ebp], 0
; Line 2855
	cmp	DWORD PTR _cch$[ebp], 0
	jne	$L1820
	mov	eax, DWORD PTR _pchOp$[ebp]
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 42					; 0000002aH
	jne	$L1819
$L1820:
; Line 2856
	mov	eax, DWORD PTR _dwLower$[ebp]
	mov	DWORD PTR _dwPort$[ebp], eax
	jmp	$L1821
$L1822:
	inc	DWORD PTR _dwPort$[ebp]
$L1821:
	mov	eax, DWORD PTR _dwPort$[ebp]
	cmp	DWORD PTR _dwUpper$[ebp], eax
	jb	$L1823
; Line 2857
	movsx	eax, BYTE PTR _ch$[ebp]
	cmp	eax, 99					; 00000063H
	jne	$L1824
; Line 2858
	push	DWORD PTR _dwPort$[ebp]
	push	DWORD PTR _piopm$[ebp]
	call	_x86PortTrapped
	add	esp, 8
	or	eax, eax
	je	$L1825
; Line 2859
	inc	DWORD PTR _iTotal$[ebp]
; Line 2860
	push	DWORD PTR _dwPort$[ebp]
	push	DWORD PTR _piopm$[ebp]
	call	_x86PortUntrap
	add	esp, 8
; Line 2862
$L1825:
; Line 2863
	jmp	$L1826
$L1824:
; Line 2864
	push	DWORD PTR _dwPort$[ebp]
	push	DWORD PTR _piopm$[ebp]
	call	_x86PortTrapped
	add	esp, 8
	or	eax, eax
	jne	$L1827
; Line 2865
	inc	DWORD PTR _iTotal$[ebp]
; Line 2866
	push	DWORD PTR _dwPort$[ebp]
	push	DWORD PTR _piopm$[ebp]
	call	_x86PortTrap
	add	esp, 8
; Line 2868
$L1827:
$L1826:
; Line 2869
	jmp	$L1822
$L1823:
; Line 2870
	push	DWORD PTR _iTotal$[ebp]
	push	OFFSET FLAT:$SG1828
	call	_printf
	add	esp, 8
; Line 2872
	jmp	$L1829
$L1819:
; Line 2873
	push	OFFSET FLAT:$SG1830
	call	_printf
	add	esp, 4
$L1829:
; Line 2874
	jmp	$L1798
; Line 2876
$L1831:
; Line 2877
	sub	eax, eax
	jmp	$L1788
; Line 2878
	jmp	$L1798
$L1797:
	cmp	DWORD PTR -32+[ebp], 108		; 0000006cH
	jg	$L2094
	je	$L1803
	cmp	DWORD PTR -32+[ebp], 63			; 0000003fH
	je	$L1801
	cmp	DWORD PTR -32+[ebp], 99			; 00000063H
	je	$L1818
	cmp	DWORD PTR -32+[ebp], 100		; 00000064H
	je	$L1813
	jmp	$L1831
$L2094:
	cmp	DWORD PTR -32+[ebp], 112		; 00000070H
	je	$L1818
	cmp	DWORD PTR -32+[ebp], 116		; 00000074H
	je	$L1818
	jmp	$L1831
$L1798:
; Line 2879
	mov	eax, 1
	jmp	$L1788
; Line 2880
$L1788:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86PortCommand ENDP
_TEXT	ENDS
PUBLIC	_x86VGACommand
EXTRN	_SaveVS:NEAR
EXTRN	_RestoreVS:NEAR
EXTRN	_vsMonitor:BYTE
EXTRN	_vsVM:BYTE
EXTRN	__getch:NEAR
_DATA	SEGMENT
$SG1843	DB	'VGA commands', 0aH, 09H, 'v', 09H, 'view output', 0aH, 09H
	DB	'vp', 09H, 'dump plane buffers', 0aH, 09H, 'vr*', 09H, 'dump r'
	DB	'egister sets', 0aH, 00H
$SG1847	DB	'Virtual plane buffer #%d:', 0aH, 00H
	ORG $+1
$SG1853	DB	'SEQ regs:  ', 00H
$SG1857	DB	'%02x%c ', 00H
$SG1858	DB	0aH, 00H
	ORG $+2
$SG1861	DB	'GDC regs:  ', 00H
$SG1865	DB	'%02x%c ', 00H
$SG1866	DB	0aH, 00H
	ORG $+2
$SG1869	DB	'ATC regs:  ', 00H
$SG1874	DB	0aH, '           ', 00H
	ORG $+3
$SG1875	DB	'%02x%c ', 00H
$SG1876	DB	0aH, 00H
	ORG $+2
$SG1879	DB	'Misc reg:  %02x', 0aH, 00H
	ORG $+3
$SG1880	DB	'Feat reg:  %02x', 0aH, 00H
	ORG $+3
$SG1881	DB	'CRTC regs: ', 00H
$SG1886	DB	0aH, '           ', 00H
	ORG $+3
$SG1887	DB	'%02x%c ', 00H
$SG1888	DB	0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_pchCmd$ = 12
_i$ = -4
_ch$ = -8
_x86VGACommand PROC NEAR
; Line 2884
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
; Line 2888
	mov	eax, DWORD PTR _pchCmd$[ebp]
	mov	DWORD PTR -12+[ebp], eax
	inc	DWORD PTR _pchCmd$[ebp]
	mov	eax, DWORD PTR -12+[ebp]
	movsx	eax, BYTE PTR [eax]
	or	eax, 32					; 00000020H
	movsx	eax, al
	mov	DWORD PTR -16+[ebp], eax
	jmp	$L1838
; Line 2889
$L1842:
; Line 2894
	push	OFFSET FLAT:$SG1843
	call	_printf
	add	esp, 4
; Line 2895
	jmp	$L1839
; Line 2897
$L1844:
; Line 2898
	push	0
	push	OFFSET FLAT:_vsMonitor
	call	_SaveVS
	add	esp, 8
; Line 2899
	push	OFFSET FLAT:_vsVM
	call	_RestoreVS
	add	esp, 4
; Line 2900
	call	__getch
; Line 2901
	push	0
	push	OFFSET FLAT:_vsVM
	call	_SaveVS
	add	esp, 8
; Line 2902
	push	OFFSET FLAT:_vsMonitor
	call	_RestoreVS
	add	esp, 4
; Line 2903
	jmp	$L1839
; Line 2905
$L1845:
; Line 2906
	mov	DWORD PTR _i$[ebp], 0
; Line 2907
	mov	eax, DWORD PTR _pchCmd$[ebp]
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 48					; 00000030H
	jl	$L1846
	mov	eax, DWORD PTR _pchCmd$[ebp]
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 51					; 00000033H
	jg	$L1846
; Line 2908
	mov	eax, DWORD PTR _pchCmd$[ebp]
	movsx	eax, BYTE PTR [eax]
	sub	eax, 48					; 00000030H
	mov	DWORD PTR _i$[ebp], eax
; Line 2909
$L1846:
	push	DWORD PTR _i$[ebp]
	push	OFFSET FLAT:$SG1847
	call	_printf
	add	esp, 8
; Line 2910
	push	8
	push	1
	mov	eax, DWORD PTR _i$[ebp]
	push	DWORD PTR _vsVM[eax*4+24]
	movzx	eax, WORD PTR _sel_Data
	push	eax
	call	_x86MemDump
	add	esp, 16					; 00000010H
; Line 2911
	jmp	$L1839
; Line 2922
$L1848:
; Line 2923
	mov	eax, DWORD PTR _pchCmd$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	al, 32					; 00000020H
	mov	BYTE PTR _ch$[ebp], al
; Line 2924
	movsx	eax, BYTE PTR _ch$[ebp]
	or	eax, eax
	je	$L1850
	movsx	eax, BYTE PTR _ch$[ebp]
	cmp	eax, 32					; 00000020H
	jne	$L1849
$L1850:
; Line 2925
	mov	BYTE PTR _ch$[ebp], 42			; 0000002aH
; Line 2926
$L1849:
	movsx	eax, BYTE PTR _ch$[ebp]
	cmp	eax, 115				; 00000073H
	je	$L1852
	movsx	eax, BYTE PTR _ch$[ebp]
	cmp	eax, 42					; 0000002aH
	jne	$L1851
$L1852:
; Line 2927
	push	OFFSET FLAT:$SG1853
	call	_printf
	add	esp, 4
; Line 2928
	mov	DWORD PTR _i$[ebp], 0
	jmp	$L1854
$L1855:
	inc	DWORD PTR _i$[ebp]
$L1854:
	cmp	DWORD PTR _i$[ebp], 5
	jge	$L1856
; Line 2929
	movzx	eax, BYTE PTR _vsVM+130
	movzx	ecx, BYTE PTR _i$[ebp]
	sub	eax, ecx
	cmp	eax, 1
	sbb	eax, eax
	and	eax, 10					; 0000000aH
	add	eax, 32					; 00000020H
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _vsVM[eax+131]
	push	eax
	push	OFFSET FLAT:$SG1857
	call	_printf
	add	esp, 12					; 0000000cH
	jmp	$L1855
$L1856:
; Line 2930
	push	OFFSET FLAT:$SG1858
	call	_printf
	add	esp, 4
; Line 2932
$L1851:
	movsx	eax, BYTE PTR _ch$[ebp]
	cmp	eax, 103				; 00000067H
	je	$L1860
	movsx	eax, BYTE PTR _ch$[ebp]
	cmp	eax, 42					; 0000002aH
	jne	$L1859
$L1860:
; Line 2933
	push	OFFSET FLAT:$SG1861
	call	_printf
	add	esp, 4
; Line 2934
	mov	DWORD PTR _i$[ebp], 0
	jmp	$L1862
$L1863:
	inc	DWORD PTR _i$[ebp]
$L1862:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	$L1864
; Line 2935
	movzx	eax, BYTE PTR _vsVM+138
	movzx	ecx, BYTE PTR _i$[ebp]
	sub	eax, ecx
	cmp	eax, 1
	sbb	eax, eax
	and	eax, 10					; 0000000aH
	add	eax, 32					; 00000020H
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _vsVM[eax+139]
	push	eax
	push	OFFSET FLAT:$SG1865
	call	_printf
	add	esp, 12					; 0000000cH
	jmp	$L1863
$L1864:
; Line 2936
	push	OFFSET FLAT:$SG1866
	call	_printf
	add	esp, 4
; Line 2938
$L1859:
	movsx	eax, BYTE PTR _ch$[ebp]
	cmp	eax, 97					; 00000061H
	je	$L1868
	movsx	eax, BYTE PTR _ch$[ebp]
	cmp	eax, 42					; 0000002aH
	jne	$L1867
$L1868:
; Line 2939
	push	OFFSET FLAT:$SG1869
	call	_printf
	add	esp, 4
; Line 2940
	mov	DWORD PTR _i$[ebp], 0
	jmp	$L1870
$L1871:
	inc	DWORD PTR _i$[ebp]
$L1870:
	cmp	DWORD PTR _i$[ebp], 21			; 00000015H
	jge	$L1872
; Line 2941
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jne	$L1873
; Line 2942
	push	OFFSET FLAT:$SG1874
	call	_printf
	add	esp, 4
; Line 2943
$L1873:
	movzx	eax, BYTE PTR _vsVM+108
	and	eax, -33				; ffffffdfH
	sub	eax, DWORD PTR _i$[ebp]
	cmp	eax, 1
	sbb	eax, eax
	and	eax, 10					; 0000000aH
	add	eax, 32					; 00000020H
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _vsVM[eax+109]
	push	eax
	push	OFFSET FLAT:$SG1875
	call	_printf
	add	esp, 12					; 0000000cH
; Line 2944
	jmp	$L1871
$L1872:
; Line 2945
	push	OFFSET FLAT:$SG1876
	call	_printf
	add	esp, 4
; Line 2947
$L1867:
	movsx	eax, BYTE PTR _ch$[ebp]
	cmp	eax, 99					; 00000063H
	je	$L1878
	movsx	eax, BYTE PTR _ch$[ebp]
	cmp	eax, 42					; 0000002aH
	jne	$L1877
$L1878:
; Line 2948
	movzx	eax, BYTE PTR _vsVM+107
	push	eax
	push	OFFSET FLAT:$SG1879
	call	_printf
	add	esp, 8
; Line 2949
	movzx	eax, BYTE PTR _vsVM+106
	push	eax
	push	OFFSET FLAT:$SG1880
	call	_printf
	add	esp, 8
; Line 2950
	push	OFFSET FLAT:$SG1881
	call	_printf
	add	esp, 4
; Line 2951
	mov	DWORD PTR _i$[ebp], 0
	jmp	$L1882
$L1883:
	inc	DWORD PTR _i$[ebp]
$L1882:
	cmp	DWORD PTR _i$[ebp], 53			; 00000035H
	jge	$L1884
; Line 2952
	cmp	DWORD PTR _i$[ebp], 0
	jle	$L1885
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	xor	eax, edx
	sub	eax, edx
	and	eax, 15					; 0000000fH
	xor	eax, edx
	sub	eax, edx
	jne	$L1885
; Line 2953
	push	OFFSET FLAT:$SG1886
	call	_printf
	add	esp, 4
; Line 2954
$L1885:
	movzx	eax, BYTE PTR _vsVM+48
	movzx	ecx, BYTE PTR _i$[ebp]
	sub	eax, ecx
	cmp	eax, 1
	sbb	eax, eax
	and	eax, 10					; 0000000aH
	add	eax, 32					; 00000020H
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _vsVM[eax+49]
	push	eax
	push	OFFSET FLAT:$SG1887
	call	_printf
	add	esp, 12					; 0000000cH
; Line 2955
	jmp	$L1883
$L1884:
; Line 2956
	push	OFFSET FLAT:$SG1888
	call	_printf
	add	esp, 4
; Line 2958
$L1877:
	jmp	$L1839
; Line 2960
$L1889:
; Line 2961
	sub	eax, eax
	jmp	$L1835
; Line 2962
	jmp	$L1839
$L1838:
	cmp	DWORD PTR -16+[ebp], 32			; 00000020H
	je	$L1844
	cmp	DWORD PTR -16+[ebp], 63			; 0000003fH
	je	$L1842
	cmp	DWORD PTR -16+[ebp], 112		; 00000070H
	je	$L1845
	cmp	DWORD PTR -16+[ebp], 114		; 00000072H
	je	$L1848
	jmp	$L1889
$L1839:
; Line 2963
	mov	eax, 1
	jmp	$L1835
; Line 2964
$L1835:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86VGACommand ENDP
_TEXT	ENDS
PUBLIC	_x86Command
EXTRN	_nstrskipto:NEAR
EXTRN	__scroll:NEAR
EXTRN	__setcursor:NEAR
EXTRN	__setvistop:NEAR
EXTRN	_ParseCommand:NEAR
EXTRN	_pmbZero:DWORD
EXTRN	_bDefColor:BYTE
EXTRN	_Reboot:NEAR
EXTRN	_ParseAddr:NEAR
EXTRN	_istrtoken:NEAR
EXTRN	_COMInit:NEAR
_DATA	SEGMENT
	ORG $+2
$SG1939	DB	'Options', 0aH, 09H, 'com#', 09H, 'use COM# for output', 0aH
	DB	09H, 'idt', 09H, 'enable IDT', 0aH, 09H, 'vga', 09H, 'use VGA '
	DB	'for output (default)', 0aH, 00H
	ORG $+3
$SG1946	DB	'COM port not found', 0aH, 00H
$SG1949	DB	'COM mode enabled', 0aH, 00H
	ORG $+2
$SG1951	DB	'COM mode already enabled', 0aH, 00H
	ORG $+2
$SG1959	DB	'IDT trapping enabled', 0aH, 00H
	ORG $+2
$SG1961	DB	'IDT trapping already enabled', 0aH, 00H
	ORG $+2
$SG1964	DB	'IDT trapping disabled', 0aH, 00H
	ORG $+1
$SG1966	DB	'IDT trapping already disabled', 0aH, 00H
	ORG $+1
$SG1969	DB	'VGA mode restored', 0aH, 00H
	ORG $+1
$SG1971	DB	'VGA mode already restored', 0aH, 00H
	ORG $+1
$SG1982	DB	'Unknown register: "%s"', 0aH, 00H
$SG1987	DB	'Not a valid selector: %04x', 0aH, 00H
$SG1996	DB	'Unsupported register', 0aH, 00H
	ORG $+2
$SG2001	DB	'Trace commands', 0aH, 09H, 't', 09H, 'trace one instruct'
	DB	'ion', 0aH, 09H, 'tg', 09H, 'trace until breakpoint', 0aH, 09H
	DB	'ts', 09H, 'step one instruction', 0aH, 09H, 'tq', 09H, 'trace'
	DB	' quiet (no instructions)', 0aH, 09H, 'tv', 09H, 'trace verbos'
	DB	'e (includes registers)', 0aH, 00H
	ORG $+2
$SG2028	DB	'Debugger commands', 0aH, 09H, 'b?', 09H, 'breakpoint com'
	DB	'mands', 0aH, 09H, 'd?', 09H, 'dump commands', 0aH, 09H, 'e', 09H
	DB	'edit memory', 0aH, 09H, 'g', 09H, 'go until breakpoint', 0aH, 09H
	DB	'i', 09H, 'display next instruction', 0aH, 09H, 'o?', 09H, 'op'
	DB	'tions', 0aH, 09H, 'p?', 09H, 'port commands', 0aH, 09H, 'q', 09H
	DB	'quit', 0aH, 09H, 'r', 09H, 'display/edit registers', 0aH, 09H
	DB	't?', 09H, 'trace commands', 0aH, 09H, 'u', 09H, 'disassemble '
	DB	'instructions', 0aH, 09H, 'v?', 09H, 'VGA commands', 0aH, 09H, '?'
	DB	'?', 09H, 'expression operators', 0aH, 'Use F12 to enter the d'
	DB	'ebugger at any time', 0aH, 00H
	ORG $+2
$SG2031	DB	'Value:  ', 00H
	ORG $+3
$SG2033	DB	'%c%04x:', 00H
$SG2034	DB	'%08x  %d. ''%c''', 0aH, 00H
$SG2036	DB	'Unprocessed characters found "%s"', 0aH, 00H
	ORG $+1
$SG2039	DB	'Invalid address: %s', 0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_pesf$ = 8
_pchCmd$ = 12
_pflCommand$ = 16
_ch$ = -40
_i$ = -28
_j$ = -24
_fl$ = -16
_fBadAddr$ = -4
_sel$ = -48
_dw$ = -12
_selCode$ = -8
_offCode$ = -56
_selData$ = -44
_offData$ = -32
_pch$ = -20
_pchAddr$ = -52
_pchArgs$ = -36
_x86Command PROC NEAR
; Line 2968
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
; Line 2978
	mov	eax, DWORD PTR _pflCommand$[ebp]
	mov	DWORD PTR [eax], 0
; Line 2979
	mov	eax, DWORD PTR _pchCmd$[ebp]
	mov	DWORD PTR _pch$[ebp], eax
; Line 2980
	push	32					; 00000020H
	push	DWORD PTR _pch$[ebp]
	call	_nstrskip
	add	esp, 8
	add	DWORD PTR _pch$[ebp], eax
; Line 2984
	push	DWORD PTR _pch$[ebp]
	push	DWORD PTR _pesf$[ebp]
	call	_ParseCommand
	add	esp, 8
	mov	DWORD PTR _i$[ebp], eax
; Line 2985
	cmp	DWORD PTR _i$[ebp], 0
	je	$L1908
; Line 2986
	mov	eax, DWORD PTR _i$[ebp]
	jmp	$L1893
; Line 2991
$L1908:
	mov	eax, DWORD PTR _selCodeLast
	mov	DWORD PTR _selCode$[ebp], eax
; Line 2992
	mov	eax, DWORD PTR _offCodeLast
	mov	DWORD PTR _offCode$[ebp], eax
; Line 2993
	mov	eax, DWORD PTR _selDataLast
	mov	DWORD PTR _selData$[ebp], eax
; Line 2994
	mov	eax, DWORD PTR _offDataLast
	mov	DWORD PTR _offData$[ebp], eax
; Line 2996
	cmp	DWORD PTR _selCode$[ebp], 0
	jne	$L1909
; Line 2997
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+104]
	mov	DWORD PTR _selCode$[ebp], eax
; Line 2998
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+100]
	mov	DWORD PTR _offCode$[ebp], eax
; Line 3001
$L1909:
	cmp	DWORD PTR _selData$[ebp], 0
	jne	$L1910
; Line 3002
	mov	eax, DWORD PTR _pesf$[ebp]
	mov	eax, DWORD PTR [eax+48]
	mov	DWORD PTR _selData$[ebp], eax
; Line 3004
$L1910:
	mov	eax, DWORD PTR _pch$[ebp]
	inc	eax
	mov	DWORD PTR _pchAddr$[ebp], eax
; Line 3005
$L1912:
	mov	eax, DWORD PTR _pchAddr$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	eax, 32					; 00000020H
	movsx	eax, al
	cmp	eax, 97					; 00000061H
	jl	$L1913
	mov	eax, DWORD PTR _pchAddr$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	eax, 32					; 00000020H
	movsx	eax, al
	cmp	eax, 122				; 0000007aH
	jg	$L1913
; Line 3006
	inc	DWORD PTR _pchAddr$[ebp]
	jmp	$L1912
$L1913:
; Line 3007
	push	32					; 00000020H
	push	DWORD PTR _pchAddr$[ebp]
	call	_nstrskip
	add	esp, 8
	add	DWORD PTR _pchAddr$[ebp], eax
; Line 3009
	mov	DWORD PTR _fBadAddr$[ebp], 0
; Line 3010
	mov	eax, DWORD PTR _pchAddr$[ebp]
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 58					; 0000003aH
	je	$L1915
	mov	eax, DWORD PTR _pchAddr$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	eax, eax
	jne	$L1914
$L1915:
; Line 3011
	mov	eax, DWORD PTR _pch$[ebp]
	movsx	eax, BYTE PTR [eax+2]
	or	eax, eax
	je	$L1916
; Line 3012
	mov	eax, DWORD PTR _pch$[ebp]
	inc	eax
	mov	DWORD PTR _pchAddr$[ebp], eax
; Line 3014
$L1916:
; Line 3015
$L1914:
	lea	eax, DWORD PTR _offData$[ebp]
	push	eax
	lea	eax, DWORD PTR _selData$[ebp]
	push	eax
	lea	eax, DWORD PTR _offCode$[ebp]
	push	eax
	lea	eax, DWORD PTR _selCode$[ebp]
	push	eax
	push	DWORD PTR _pchAddr$[ebp]
	push	DWORD PTR _pesf$[ebp]
	call	_ParseAddr
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _pchAddr$[ebp]
	add	ecx, eax
	mov	DWORD PTR _pchArgs$[ebp], ecx
; Line 3016
	mov	eax, DWORD PTR _pchAddr$[ebp]
	cmp	DWORD PTR _pchArgs$[ebp], eax
	jne	$L1917
; Line 3018
	mov	eax, DWORD PTR _pchAddr$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	eax, eax
	je	$L1918
; Line 3019
	mov	DWORD PTR _fBadAddr$[ebp], 1
; Line 3020
$L1918:
; Line 3021
$L1917:
	push	32					; 00000020H
	push	DWORD PTR _pchArgs$[ebp]
	call	_nstrskip
	add	esp, 8
	add	DWORD PTR _pchArgs$[ebp], eax
; Line 3023
	mov	eax, DWORD PTR _pch$[ebp]
	mov	DWORD PTR -60+[ebp], eax
	inc	DWORD PTR _pch$[ebp]
	mov	eax, DWORD PTR -60+[ebp]
	movsx	eax, BYTE PTR [eax]
	or	eax, 32					; 00000020H
	movsx	eax, al
	mov	DWORD PTR -68+[ebp], eax
	jmp	$L1919
; Line 3024
$L1923:
; Line 3025
	push	DWORD PTR _pchArgs$[ebp]
	push	DWORD PTR _pchAddr$[ebp]
	push	DWORD PTR _offCode$[ebp]
	push	DWORD PTR _selCode$[ebp]
	push	DWORD PTR _pch$[ebp]
	push	DWORD PTR _pesf$[ebp]
	call	_x86BPCommand
	add	esp, 24					; 00000018H
	or	eax, eax
	jne	$L1924
; Line 3026
	jmp	$CommandError$1925
; Line 3027
$L1924:
	jmp	$L1920
; Line 3029
$L1926:
; Line 3030
	push	DWORD PTR _pchArgs$[ebp]
	push	DWORD PTR _pchAddr$[ebp]
	push	DWORD PTR _offData$[ebp]
	push	DWORD PTR _selData$[ebp]
	push	DWORD PTR _pch$[ebp]
	push	DWORD PTR _pesf$[ebp]
	call	_x86DumpCommand
	add	esp, 24					; 00000018H
	or	eax, eax
	jne	$L1927
; Line 3031
	jmp	$CommandError$1925
; Line 3032
$L1927:
	jmp	$L1920
; Line 3034
$L1928:
; Line 3035
	push	DWORD PTR _pchArgs$[ebp]
	push	DWORD PTR _pchAddr$[ebp]
	push	DWORD PTR _offData$[ebp]
	push	DWORD PTR _selData$[ebp]
	push	DWORD PTR _pch$[ebp]
	push	DWORD PTR _pesf$[ebp]
	call	_x86EditCommand
	add	esp, 24					; 00000018H
	or	eax, eax
	jne	$L1929
; Line 3036
	jmp	$CommandError$1925
; Line 3037
$L1929:
	jmp	$L1920
; Line 3039
$L1930:
; Line 3040
	mov	eax, DWORD PTR _pchAddr$[ebp]
	cmp	DWORD PTR _pchArgs$[ebp], eax
	je	$L1931
; Line 3041
	push	DWORD PTR _offCode$[ebp]
	push	DWORD PTR _selCode$[ebp]
	push	1024					; 00000400H
	call	_x86AllocBP
	add	esp, 12					; 0000000cH
	or	eax, eax
	jne	$L1932
; Line 3042
	jmp	$L1920
; Line 3043
$L1932:
$L1931:
	mov	eax, DWORD PTR _pch$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	eax, 32					; 00000020H
	movsx	eax, al
	cmp	eax, 116				; 00000074H
	jne	$L1933
; Line 3044
	and	DWORD PTR _flTrace, -9			; fffffff7H
; Line 3045
	jmp	$L1934
$L1933:
	cmp	DWORD PTR _fBadAddr$[ebp], 0
	je	$L1935
; Line 3046
	jmp	$BadAddr$1936
; Line 3047
$L1935:
$L1934:
	mov	eax, DWORD PTR _pesf$[ebp]
	and	DWORD PTR [eax+108], -257		; fffffeffH
; Line 3048
	mov	eax, DWORD PTR _pflCommand$[ebp]
	or	DWORD PTR [eax], 1
; Line 3049
	jmp	$L1920
; Line 3051
$L1937:
; Line 3052
	mov	eax, DWORD PTR _pch$[ebp]
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 63					; 0000003fH
	jne	$L1938
; Line 3057
	push	OFFSET FLAT:$SG1939
	call	_printf
	add	esp, 4
; Line 3058
	jmp	$L1920
; Line 3060
$L1938:
	mov	eax, DWORD PTR _pch$[ebp]
	mov	DWORD PTR _pchArgs$[ebp], eax
; Line 3061
	push	3
	push	OFFSET FLAT:_apszOptions
	lea	eax, DWORD PTR _pchArgs$[ebp]
	push	eax
	call	_istrtoken
	add	esp, 12					; 0000000cH
	mov	DWORD PTR -72+[ebp], eax
	jmp	$L1940
; Line 3062
$L1944:
; Line 3063
	mov	eax, DWORD PTR _pchArgs$[ebp]
	movsx	eax, BYTE PTR [eax]
	sub	eax, 48					; 00000030H
	push	eax
	call	_COMInit
	add	esp, 4
	or	eax, eax
	jne	$L1945
; Line 3064
	push	OFFSET FLAT:$SG1946
	call	_printf
	add	esp, 4
; Line 3065
	jmp	$L1947
$L1945:
	test	BYTE PTR _vsMonitor+4, 2
	jne	$L1948
; Line 3066
	push	0
	push	OFFSET FLAT:_vsMonitor
	call	_SaveVS
	add	esp, 8
; Line 3067
	push	OFFSET FLAT:_vsVM
	call	_RestoreVS
	add	esp, 4
; Line 3068
	or	DWORD PTR _vsVM+4, 2
; Line 3069
	or	DWORD PTR _vsMonitor+4, 2
; Line 3070
	push	OFFSET FLAT:$SG1949
	call	_printf
	add	esp, 4
; Line 3072
	jmp	$L1950
$L1948:
; Line 3073
	push	OFFSET FLAT:$SG1951
	call	_printf
	add	esp, 4
$L1950:
$L1947:
; Line 3074
	jmp	$L1941
; Line 3075
$L1952:
; Line 3076
	push	2
	push	OFFSET FLAT:_apszIDTOptions
	lea	eax, DWORD PTR _pchArgs$[ebp]
	push	eax
	call	_istrtoken
	add	esp, 12					; 0000000cH
	mov	DWORD PTR -76+[ebp], eax
	jmp	$L1953
; Line 3077
$L1957:
; Line 3078
	test	BYTE PTR _flTrace+1, 2
	je	$L1958
; Line 3079
	and	DWORD PTR _flTrace, -513		; fffffdffH
; Line 3080
	push	OFFSET FLAT:$SG1959
	call	_printf
	add	esp, 4
; Line 3082
	jmp	$L1960
$L1958:
; Line 3083
	push	OFFSET FLAT:$SG1961
	call	_printf
	add	esp, 4
$L1960:
; Line 3084
	jmp	$L1954
; Line 3085
$L1962:
; Line 3086
	test	BYTE PTR _flTrace+1, 2
	jne	$L1963
; Line 3087
	or	DWORD PTR _flTrace, 512			; 00000200H
; Line 3088
	push	OFFSET FLAT:$SG1964
	call	_printf
	add	esp, 4
; Line 3090
	jmp	$L1965
$L1963:
; Line 3091
	push	OFFSET FLAT:$SG1966
	call	_printf
	add	esp, 4
$L1965:
; Line 3092
	jmp	$L1954
; Line 3093
	jmp	$L1954
$L1953:
	cmp	DWORD PTR -76+[ebp], 0
	je	$L1957
	cmp	DWORD PTR -76+[ebp], 1
	je	$L1962
	jmp	$L1954
$L1954:
; Line 3094
	jmp	$L1941
; Line 3095
$L1967:
; Line 3096
	test	BYTE PTR _vsMonitor+4, 2
	je	$L1968
; Line 3097
	and	DWORD PTR _vsVM+4, -3			; fffffffdH
; Line 3098
	and	DWORD PTR _vsMonitor+4, -3		; fffffffdH
; Line 3099
	push	0
	push	OFFSET FLAT:_vsVM
	call	_SaveVS
	add	esp, 8
; Line 3100
	push	OFFSET FLAT:_vsMonitor
	call	_RestoreVS
	add	esp, 4
; Line 3101
	push	OFFSET FLAT:$SG1969
	call	_printf
	add	esp, 4
; Line 3103
	jmp	$L1970
$L1968:
; Line 3104
	push	OFFSET FLAT:$SG1971
	call	_printf
	add	esp, 4
$L1970:
; Line 3105
	jmp	$L1941
; Line 3106
$L1972:
; Line 3107
	jmp	$CommandError$1925
; Line 3108
	jmp	$L1941
$L1940:
	cmp	DWORD PTR -72+[ebp], 0
	je	$L1944
	cmp	DWORD PTR -72+[ebp], 1
	je	$L1952
	cmp	DWORD PTR -72+[ebp], 2
	je	$L1967
	jmp	$CommandError$1925
$L1941:
; Line 3109
	jmp	$L1920
; Line 3111
$L1973:
; Line 3114
	mov	eax, DWORD PTR _pch$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	eax, eax
	jne	$L1974
; Line 3115
	push	128					; 00000080H
	push	DWORD PTR _pesf$[ebp]
	call	_x86Trace
	add	esp, 8
	or	eax, eax
	je	$L1975
; Line 3116
	mov	eax, DWORD PTR _pflCommand$[ebp]
	or	DWORD PTR [eax], 1
; Line 3117
$L1975:
	jmp	$L1920
; Line 3119
$L1974:
	mov	eax, DWORD PTR _pTSS
	add	eax, 104				; 00000068H
	push	eax
	push	DWORD PTR _pchAddr$[ebp]
	push	DWORD PTR _pch$[ebp]
	push	DWORD PTR _pesf$[ebp]
	call	_x86PortCommand
	add	esp, 16					; 00000010H
	or	eax, eax
	jne	$L1976
; Line 3120
	jmp	$CommandError$1925
; Line 3121
$L1976:
	jmp	$L1920
; Line 3123
$L1977:
; Line 3127
	mov	eax, DWORD PTR _pch$[ebp]
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 33					; 00000021H
	jne	$L1978
; Line 3128
	mov	eax, DWORD PTR _pmbZero
	mov	DWORD PTR [eax+1344], 0
; Line 3134
$L1978:
	cli
; Line 3136
	mov	BYTE PTR _bDefColor, 7
; Line 3137
	push	0
	push	0
	push	0
	push	0
	push	0
	call	__scroll
	add	esp, 20					; 00000014H
; Line 3138
	push	1
	push	0
	push	0
	call	__setcursor
	add	esp, 12					; 0000000cH
; Line 3139
	push	0
	call	__setvistop
	add	esp, 4
; Line 3141
	call	_Reboot
; Line 3142
	jmp	$L1920
; Line 3144
$L1979:
; Line 3145
	push	32					; 00000020H
	push	DWORD PTR _pch$[ebp]
	call	_nstrskip
	add	esp, 8
	add	DWORD PTR _pch$[ebp], eax
; Line 3146
	mov	eax, DWORD PTR _pch$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	eax, eax
	je	$L1980
	mov	eax, DWORD PTR _pch$[ebp]
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 59					; 0000003bH
	je	$L1980
; Line 3147
	push	DWORD PTR _pch$[ebp]
	call	_ParseReg
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR _i$[ebp], 0
	jne	$L1981
; Line 3148
	push	DWORD PTR _pch$[ebp]
	push	OFFSET FLAT:$SG1982
	call	_printf
	add	esp, 8
; Line 3149
	jmp	$L1920
; Line 3151
$L1981:
	dec	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 6
	push	DWORD PTR _ardRegs[eax]
	call	_nstrlen
	add	esp, 4
	add	DWORD PTR _pch$[ebp], eax
; Line 3152
	push	1
	lea	eax, DWORD PTR _dw$[ebp]
	push	eax
	push	0
	push	DWORD PTR _pch$[ebp]
	push	DWORD PTR _pesf$[ebp]
	call	_ParseValue
	add	esp, 20					; 00000014H
	or	eax, eax
	je	$L1983
; Line 3153
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 6
	movzx	eax, BYTE PTR _ardRegs[eax+5]
	cmp	eax, 3
	jne	$L1984
; Line 3154
	mov	eax, DWORD PTR _pesf$[ebp]
	test	BYTE PTR [eax+110], 2
	je	$L1985
; Line 3155
	or	DWORD PTR _dw$[ebp], 65536		; 00010000H
; Line 3156
$L1985:
	push	DWORD PTR _dw$[ebp]
	call	_x86SelDesc
	add	esp, 4
	push	eax
	call	_x86DescSize
	add	esp, 4
	or	eax, eax
	jne	$L1986
; Line 3157
	push	DWORD PTR _dw$[ebp]
	push	OFFSET FLAT:$SG1987
	call	_printf
	add	esp, 8
; Line 3158
	jmp	$L1920
; Line 3160
$L1986:
; Line 3161
$L1984:
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 6
	movzx	eax, BYTE PTR _ardRegs[eax+5]
	mov	DWORD PTR -80+[ebp], eax
	jmp	$L1988
; Line 3162
$L1992:
; Line 3163
	mov	al, BYTE PTR _dw$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 6
	movzx	ecx, BYTE PTR _ardRegs[ecx+4]
	mov	edx, DWORD PTR _pesf$[ebp]
	mov	BYTE PTR [ecx+edx], al
; Line 3164
	jmp	$L1989
; Line 3165
$L1993:
; Line 3166
	mov	eax, DWORD PTR _dw$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 6
	movzx	ecx, BYTE PTR _ardRegs[ecx+4]
	mov	edx, DWORD PTR _pesf$[ebp]
	mov	WORD PTR [ecx+edx], ax
; Line 3167
	jmp	$L1989
; Line 3168
$L1994:
; Line 3170
	mov	eax, DWORD PTR _dw$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 6
	movzx	ecx, BYTE PTR _ardRegs[ecx+4]
	mov	edx, DWORD PTR _pesf$[ebp]
	mov	DWORD PTR [ecx+edx], eax
; Line 3171
	jmp	$L1989
; Line 3172
$L1995:
; Line 3173
	push	OFFSET FLAT:$SG1996
	call	_printf
	add	esp, 4
; Line 3174
	jmp	$L1989
; Line 3175
	jmp	$L1989
$L1988:
	cmp	DWORD PTR -80+[ebp], 1
	je	$L1992
	cmp	DWORD PTR -80+[ebp], 2
	je	$L1993
	cmp	DWORD PTR -80+[ebp], 3
	jl	$L1995
	cmp	DWORD PTR -80+[ebp], 4
	jle	$L1994
	jmp	$L1995
$L1989:
; Line 3177
$L1983:
	jmp	$L1920
; Line 3179
	jmp	$L1997
$L1980:
; Line 3180
	push	DWORD PTR _pesf$[ebp]
	call	_x86RegDump
	add	esp, 4
$L1997:
; Line 3183
$L1998:
; Line 3184
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+100]
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+104]
	push	DWORD PTR _pesf$[ebp]
	call	_x86InsDump
	add	esp, 12					; 0000000cH
; Line 3185
	jmp	$L1920
; Line 3187
$L1999:
; Line 3188
	mov	eax, DWORD PTR _pch$[ebp]
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 63					; 0000003fH
	jne	$L2000
; Line 3195
	push	OFFSET FLAT:$SG2001
	call	_printf
	add	esp, 4
; Line 3196
	jmp	$L1920
; Line 3198
$L2000:
	mov	DWORD PTR _fl$[ebp], 0
; Line 3199
	mov	DWORD PTR _lInsCount, 0
; Line 3200
$L2003:
	mov	eax, DWORD PTR _pch$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	al, 32					; 00000020H
	mov	BYTE PTR _ch$[ebp], al
	inc	DWORD PTR _pch$[ebp]
	movsx	eax, BYTE PTR _ch$[ebp]
	cmp	eax, 32					; 00000020H
	je	$L2004
; Line 3201
	movsx	eax, BYTE PTR _ch$[ebp]
	mov	DWORD PTR -84+[ebp], eax
	jmp	$L2005
; Line 3202
$L2009:
; Line 3203
	jmp	$EndTrace$2010
; Line 3204
$L2011:
; Line 3205
	or	DWORD PTR _fl$[ebp], 128		; 00000080H
; Line 3206
	jmp	$L2006
; Line 3207
$L2012:
; Line 3208
	or	DWORD PTR _fl$[ebp], 256		; 00000100H
; Line 3209
	jmp	$L2006
; Line 3210
$L2013:
; Line 3211
	or	DWORD PTR _fl$[ebp], 2
; Line 3212
	jmp	$L2006
; Line 3213
$L2014:
; Line 3214
	or	DWORD PTR _fl$[ebp], 64			; 00000040H
; Line 3215
	and	DWORD PTR _fl$[ebp], -33		; ffffffdfH
; Line 3216
	jmp	$L2006
; Line 3217
$L2015:
; Line 3218
	or	DWORD PTR _fl$[ebp], 32			; 00000020H
; Line 3219
	and	DWORD PTR _fl$[ebp], -65		; ffffffbfH
; Line 3220
	jmp	$L2006
; Line 3221
$L2016:
; Line 3222
	jmp	$CommandError$1925
; Line 3223
	jmp	$L2006
$L2005:
	cmp	DWORD PTR -84+[ebp], 113		; 00000071H
	jg	$L2097
	je	$L2014
	cmp	DWORD PTR -84+[ebp], 59			; 0000003bH
	je	$EndTrace$2010
	cmp	DWORD PTR -84+[ebp], 102		; 00000066H
	je	$L2012
	cmp	DWORD PTR -84+[ebp], 103		; 00000067H
	je	$L2013
	jmp	$CommandError$1925
$L2097:
	cmp	DWORD PTR -84+[ebp], 115		; 00000073H
	je	$L2011
	cmp	DWORD PTR -84+[ebp], 118		; 00000076H
	je	$L2015
	jmp	$CommandError$1925
$L2006:
; Line 3224
	jmp	$L2003
$L2004:
; Line 3225
$EndTrace$2010:
; Line 3226
	push	DWORD PTR _fl$[ebp]
	push	DWORD PTR _pesf$[ebp]
	call	_x86Trace
	add	esp, 8
	or	eax, eax
	je	$L2017
; Line 3227
	mov	eax, DWORD PTR _pflCommand$[ebp]
	or	DWORD PTR [eax], 1
; Line 3228
$L2017:
	jmp	$L1920
; Line 3230
$L2018:
; Line 3231
	cmp	DWORD PTR _fBadAddr$[ebp], 0
	je	$L2019
; Line 3232
	jmp	$BadAddr$1936
; Line 3233
$L2019:
	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0
	jmp	$L2020
$L2021:
	inc	DWORD PTR _i$[ebp]
$L2020:
	cmp	DWORD PTR _i$[ebp], 8
	jge	$L2022
; Line 3234
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, DWORD PTR _offCode$[ebp]
	push	eax
	push	DWORD PTR _selCode$[ebp]
	push	DWORD PTR _pesf$[ebp]
	call	_x86InsDump
	add	esp, 12					; 0000000cH
	add	DWORD PTR _j$[ebp], eax
	jmp	$L2021
$L2022:
; Line 3235
	jmp	$L1920
; Line 3237
$L2023:
; Line 3238
	push	DWORD PTR _pchAddr$[ebp]
	push	DWORD PTR _pch$[ebp]
	push	DWORD PTR _pesf$[ebp]
	call	_x86VGACommand
	add	esp, 12					; 0000000cH
	or	eax, eax
	jne	$L2024
; Line 3239
	jmp	$CommandError$1925
; Line 3240
$L2024:
	jmp	$L1920
; Line 3242
$L2025:
; Line 3243
	jmp	$L1920
; Line 3245
$L2026:
; Line 3246
	mov	eax, DWORD PTR _pch$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	eax, eax
	jne	$L2027
; Line 3263
	push	OFFSET FLAT:$SG2028
	call	_printf
	add	esp, 4
; Line 3265
	jmp	$L2029
$L2027:
; Line 3266
	mov	DWORD PTR _sel$[ebp], 0
; Line 3267
	push	1
	lea	eax, DWORD PTR _dw$[ebp]
	push	eax
	lea	eax, DWORD PTR _sel$[ebp]
	push	eax
	push	DWORD PTR _pch$[ebp]
	push	DWORD PTR _pesf$[ebp]
	call	_ParseValue
	add	esp, 20					; 00000014H
	mov	DWORD PTR _i$[ebp], eax
; Line 3268
	cmp	DWORD PTR _i$[ebp], 0
	je	$L2030
; Line 3269
	push	OFFSET FLAT:$SG2031
	call	_printf
	add	esp, 4
; Line 3270
	cmp	DWORD PTR _sel$[ebp], 0
	je	$L2032
; Line 3271
	movzx	eax, WORD PTR _sel$[ebp]
	push	eax
	push	0
	push	DWORD PTR _sel$[ebp]
	call	_x86AddrType
	add	esp, 8
	movsx	eax, al
	push	eax
	push	OFFSET FLAT:$SG2033
	call	_printf
	add	esp, 12					; 0000000cH
; Line 3272
$L2032:
	movzx	eax, BYTE PTR _dw$[ebp]
	cmp	eax, 32					; 00000020H
	jl	$L2095
	movzx	eax, BYTE PTR _dw$[ebp]
	cmp	eax, 127				; 0000007fH
	jge	$L2095
	movzx	eax, BYTE PTR _dw$[ebp]
	mov	DWORD PTR -64+[ebp], eax
	jmp	$L2096
$L2095:
	mov	DWORD PTR -64+[ebp], 32			; 00000020H
$L2096:
	push	DWORD PTR -64+[ebp]
	push	DWORD PTR _dw$[ebp]
	push	DWORD PTR _dw$[ebp]
	push	OFFSET FLAT:$SG2034
	call	_printf
	add	esp, 16					; 00000010H
; Line 3273
	mov	eax, DWORD PTR _i$[ebp]
	add	DWORD PTR _pch$[ebp], eax
; Line 3274
	mov	eax, DWORD PTR _pch$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	eax, eax
	je	$L2035
	mov	eax, DWORD PTR _pch$[ebp]
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 59					; 0000003bH
	je	$L2035
; Line 3275
	push	DWORD PTR _pch$[ebp]
	push	OFFSET FLAT:$SG2036
	call	_printf
	add	esp, 8
; Line 3276
$L2035:
; Line 3277
$L2030:
$L2029:
; Line 3278
	jmp	$L1920
; Line 3280
$L2037:
; Line 3282
$CommandError$1925:
; Line 3283
	mov	eax, DWORD PTR _pflCommand$[ebp]
	or	DWORD PTR [eax], 2
; Line 3284
	jmp	$L1920
; Line 3285
	jmp	$L1920
$L1919:
	cmp	DWORD PTR -68+[ebp], 111		; 0000006fH
	jg	$L2098
	je	$L1937
	cmp	DWORD PTR -68+[ebp], 100		; 00000064H
	jg	$L2099
	je	$L1926
	cmp	DWORD PTR -68+[ebp], 59			; 0000003bH
	je	$L1920
	cmp	DWORD PTR -68+[ebp], 63			; 0000003fH
	je	$L2026
	cmp	DWORD PTR -68+[ebp], 98			; 00000062H
	je	$L1923
	jmp	$L2037
$L2099:
	cmp	DWORD PTR -68+[ebp], 101		; 00000065H
	je	$L1928
	cmp	DWORD PTR -68+[ebp], 103		; 00000067H
	je	$L1930
	cmp	DWORD PTR -68+[ebp], 105		; 00000069H
	je	$L1998
	jmp	$L2037
$L2098:
	sub	DWORD PTR -68+[ebp], 112		; 00000070H
	cmp	DWORD PTR -68+[ebp], 6
	ja	$L2037
	shl	DWORD PTR -68+[ebp], 2
	mov	eax, DWORD PTR -68+[ebp]
	jmp	DWORD PTR CS:$L2100[eax]
$L2100:
	DD	OFFSET FLAT:$L1973
	DD	OFFSET FLAT:$L1977
	DD	OFFSET FLAT:$L1979
	DD	OFFSET FLAT:$L2037
	DD	OFFSET FLAT:$L1999
	DD	OFFSET FLAT:$L2018
	DD	OFFSET FLAT:$L2023
$L1920:
; Line 3286
	jmp	$Exit$2038
; Line 3288
$BadAddr$1936:
; Line 3289
	push	DWORD PTR _pchAddr$[ebp]
	push	OFFSET FLAT:$SG2039
	call	_printf
	add	esp, 8
; Line 3291
$Exit$2038:
; Line 3292
	push	59					; 0000003bH
	push	DWORD PTR _pchCmd$[ebp]
	call	_nstrskipto
	add	esp, 8
	jmp	$L1893
; Line 3293
$L1893:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86Command ENDP
_TEXT	ENDS
EXTRN	_rowCursor:DWORD
EXTRN	_colCursor:DWORD
EXTRN	_ngets:NEAR
_DATA	SEGMENT
	ORG $+3
$SG2052	DB	'Warning: strange VM lock count: %d', 0aH, 00H
$SG2054	DB	'Warning: strange Monitor lock count: %d', 0aH, 00H
	ORG $+3
$SG2065	DB	'total instructions: %d', 0aH, 00H
$SG2070	DB	'%c', 00H
	ORG $+1
$SG2077	DB	'Command error: "%s"', 0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_pesf$ = 8
_flDebug$ = 12
_achInput$ = -92
_flCommand$ = -8
_pchCmd$ = -12
_pszInput$ = -4
_x86Debug PROC NEAR
; Line 3297
	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
; Line 3303
	inc	DWORD PTR _iDebugEntry
; Line 3304
	test	BYTE PTR _flDebug$[ebp], 16		; 00000010H
	je	$L2047
; Line 3305
	inc	DWORD PTR _iIDTEntry
; Line 3307
$L2047:
	push	DWORD PTR _pesf$[ebp]
	call	_x86LoadFrame
	add	esp, 4
; Line 3309
	cmp	DWORD PTR _iDebugEntry, 1
	jne	$L2048
; Line 3310
	test	BYTE PTR _flTrace, 4
	jne	$L2049
; Line 3313
	test	BYTE PTR _flDebug$[ebp], 1
	jne	$L2050
; Line 3314
	push	0
	push	OFFSET FLAT:_vsVM
	call	_SaveVS
	add	esp, 8
; Line 3315
	push	OFFSET FLAT:_vsMonitor
	call	_RestoreVS
	add	esp, 4
; Line 3317
$L2050:
; Line 3319
$L2049:
	test	BYTE PTR _vsVM+4, 2
	jne	$L2051
	cmp	DWORD PTR _vsVM, 0
	je	$L2051
; Line 3320
	push	DWORD PTR _vsVM
	push	OFFSET FLAT:$SG2052
	call	_printf
	add	esp, 8
; Line 3321
$L2051:
	test	BYTE PTR _vsMonitor+4, 2
	jne	$L2053
	cmp	DWORD PTR _vsMonitor, -1
	je	$L2053
; Line 3322
	push	DWORD PTR _vsMonitor
	push	OFFSET FLAT:$SG2054
	call	_printf
	add	esp, 8
; Line 3324
$L2053:
; Line 3325
$L2048:
	push	DWORD PTR _pesf$[ebp]
	call	_x86RemoveBPs
	add	esp, 4
; Line 3327
	sti
; Line 3332
	test	BYTE PTR _flTrace, 1
	je	$L2056
	test	BYTE PTR _flTrace, 32			; 00000020H
	je	$L2055
$L2056:
; Line 3333
	push	DWORD PTR _flDebug$[ebp]
	push	DWORD PTR _pesf$[ebp]
	call	_x86TrapDump
	add	esp, 8
; Line 3334
	push	DWORD PTR _pesf$[ebp]
	call	_x86RegDump
	add	esp, 4
; Line 3336
	jmp	$L2057
$L2055:
	test	BYTE PTR _flTrace, 98			; 00000062H
	jne	$L2058
; Line 3337
	push	0
	push	DWORD PTR _colCursor
	mov	eax, DWORD PTR _rowCursor
	dec	eax
	push	eax
	call	__setcursor
	add	esp, 12					; 0000000cH
; Line 3339
$L2058:
$L2057:
	test	BYTE PTR _flTrace, 64			; 00000040H
	jne	$L2059
; Line 3340
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+100]
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+104]
	push	DWORD PTR _pesf$[ebp]
	call	_x86InsDump
	add	esp, 12					; 0000000cH
; Line 3352
$L2059:
	test	BYTE PTR _flTrace, 2
	je	$L2060
; Line 3353
	inc	DWORD PTR _lInsCount
; Line 3354
	test	BYTE PTR _flKeyEvent, 2
	jne	$L2061
; Line 3355
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+100]
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+104]
	push	768					; 00000300H
	push	DWORD PTR _pesf$[ebp]
	call	_x86FindBP
	add	esp, 16					; 00000010H
	or	eax, eax
	jne	$L2062
; Line 3356
	push	DWORD PTR _flTrace
	push	DWORD PTR _pesf$[ebp]
	call	_x86Trace
	add	esp, 8
	or	eax, eax
	je	$L2063
; Line 3357
	jmp	$Exit$2064
; Line 3358
$L2063:
$L2062:
$L2061:
	push	DWORD PTR _lInsCount
	push	OFFSET FLAT:$SG2065
	call	_printf
	add	esp, 8
; Line 3360
$L2060:
	test	BYTE PTR _flDebug$[ebp], 4
	je	$L2066
; Line 3361
	jmp	$Exit$2064
; Line 3365
$L2066:
	mov	DWORD PTR _flCommand$[ebp], 0
; Line 3366
	and	DWORD PTR _flTrace, -488		; fffffe18H
; Line 3368
$L2068:
	test	BYTE PTR _flCommand$[ebp], 1
	jne	$L2069
; Line 3370
	push	1
	mov	eax, DWORD PTR _pesf$[ebp]
	push	DWORD PTR [eax+104]
	call	_x86AddrType
	add	esp, 8
	movsx	eax, al
	push	eax
	push	OFFSET FLAT:$SG2070
	call	_printf
	add	esp, 8
; Line 3372
	lea	eax, DWORD PTR _achInput$[ebp]
	mov	DWORD PTR _pszInput$[ebp], eax
; Line 3373
	push	DWORD PTR _pszInput$[ebp]
	call	_ngets
	add	esp, 4
; Line 3375
$L2072:
	mov	eax, DWORD PTR _pszInput$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	eax, eax
	je	$L2073
; Line 3376
	mov	eax, DWORD PTR _pszInput$[ebp]
	mov	DWORD PTR _pchCmd$[ebp], eax
; Line 3377
	lea	eax, DWORD PTR _flCommand$[ebp]
	push	eax
	push	DWORD PTR _pchCmd$[ebp]
	push	DWORD PTR _pesf$[ebp]
	call	_x86Command
	add	esp, 12					; 0000000cH
	add	DWORD PTR _pszInput$[ebp], eax
; Line 3378
	mov	eax, DWORD PTR _pszInput$[ebp]
	movsx	eax, BYTE PTR [eax]
	or	eax, eax
	je	$L2074
; Line 3379
	inc	DWORD PTR _pszInput$[ebp]
; Line 3381
$L2074:
	test	BYTE PTR _flCommand$[ebp], 1
	je	$L2075
; Line 3382
	jmp	$L2073
; Line 3384
$L2075:
	test	BYTE PTR _flCommand$[ebp], 2
	je	$L2076
; Line 3385
	push	DWORD PTR _pchCmd$[ebp]
	push	OFFSET FLAT:$SG2077
	call	_printf
	add	esp, 8
; Line 3386
	jmp	$L2073
; Line 3388
$L2076:
	jmp	$L2072
$L2073:
; Line 3389
	jmp	$L2068
$L2069:
; Line 3390
$Exit$2064:
; Line 3391
	cli
; Line 3393
	push	DWORD PTR _pesf$[ebp]
	call	_x86ApplyBPs
	add	esp, 4
; Line 3395
	cmp	DWORD PTR _iDebugEntry, 1
	jne	$L2078
; Line 3396
	test	BYTE PTR _flTrace, 4
	jne	$L2079
; Line 3397
	push	0
	push	OFFSET FLAT:_vsMonitor
	call	_SaveVS
	add	esp, 8
; Line 3398
	push	OFFSET FLAT:_vsVM
	call	_RestoreVS
	add	esp, 4
; Line 3400
$L2079:
; Line 3401
$L2078:
	push	DWORD PTR _pesf$[ebp]
	call	_x86SaveFrame
	add	esp, 4
; Line 3403
	test	BYTE PTR _flDebug$[ebp], 16		; 00000010H
	je	$L2080
; Line 3404
	dec	DWORD PTR _iIDTEntry
; Line 3405
$L2080:
	dec	DWORD PTR _iDebugEntry
; Line 3406
$L2042:
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_x86Debug ENDP
_TEXT	ENDS
END
